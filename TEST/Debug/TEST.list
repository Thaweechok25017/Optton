
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b70  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002d04  08002d04  00003d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d4c  08002d4c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d4c  08002d4c  00003d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d54  08002d54  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d54  08002d54  00003d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d58  08002d58  00003d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d5c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002d68  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002d68  000040b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0ca  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001725  00000000  00000000  0000e106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0000f830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000069c  00000000  00000000  000100d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020194  00000000  00000000  0001076c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a513  00000000  00000000  00030900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9896  00000000  00000000  0003ae13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001046a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002284  00000000  00000000  001046ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00106970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002cec 	.word	0x08002cec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002cec 	.word	0x08002cec

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fa06 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f806 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f886 	bl	80005e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f854 	bl	8000580 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <main+0x14>

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b096      	sub	sp, #88	@ 0x58
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	2244      	movs	r2, #68	@ 0x44
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f002 fbd1 	bl	8002c92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f0:	463b      	mov	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000502:	f000 fceb 	bl	8000edc <HAL_PWREx_ControlVoltageScaling>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800050c:	f000 f8f2 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000510:	2302      	movs	r3, #2
 8000512:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000514:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000518:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800051a:	2340      	movs	r3, #64	@ 0x40
 800051c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051e:	2302      	movs	r3, #2
 8000520:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000522:	2302      	movs	r3, #2
 8000524:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000526:	2301      	movs	r3, #1
 8000528:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800052a:	230a      	movs	r3, #10
 800052c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800052e:	2307      	movs	r3, #7
 8000530:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000532:	2302      	movs	r3, #2
 8000534:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000536:	2302      	movs	r3, #2
 8000538:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fd22 	bl	8000f88 <HAL_RCC_OscConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800054a:	f000 f8d3 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054e:	230f      	movs	r3, #15
 8000550:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000552:	2303      	movs	r3, #3
 8000554:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000562:	463b      	mov	r3, r7
 8000564:	2104      	movs	r1, #4
 8000566:	4618      	mov	r0, r3
 8000568:	f001 f922 	bl	80017b0 <HAL_RCC_ClockConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000572:	f000 f8bf 	bl	80006f4 <Error_Handler>
  }
}
 8000576:	bf00      	nop
 8000578:	3758      	adds	r7, #88	@ 0x58
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000584:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <MX_USART2_UART_Init+0x58>)
 8000586:	4a15      	ldr	r2, [pc, #84]	@ (80005dc <MX_USART2_UART_Init+0x5c>)
 8000588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800058a:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <MX_USART2_UART_Init+0x58>)
 800058c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <MX_USART2_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <MX_USART2_UART_Init+0x58>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800059e:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <MX_USART2_UART_Init+0x58>)
 80005a6:	220c      	movs	r2, #12
 80005a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b0:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <MX_USART2_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005b6:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <MX_USART2_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <MX_USART2_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005c2:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <MX_USART2_UART_Init+0x58>)
 80005c4:	f001 fe76 	bl	80022b4 <HAL_UART_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ce:	f000 f891 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028
 80005dc:	40004400 	.word	0x40004400

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b3c      	ldr	r3, [pc, #240]	@ (80006e8 <MX_GPIO_Init+0x108>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	4a3b      	ldr	r2, [pc, #236]	@ (80006e8 <MX_GPIO_Init+0x108>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000602:	4b39      	ldr	r3, [pc, #228]	@ (80006e8 <MX_GPIO_Init+0x108>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	4b36      	ldr	r3, [pc, #216]	@ (80006e8 <MX_GPIO_Init+0x108>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	4a35      	ldr	r2, [pc, #212]	@ (80006e8 <MX_GPIO_Init+0x108>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061a:	4b33      	ldr	r3, [pc, #204]	@ (80006e8 <MX_GPIO_Init+0x108>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b30      	ldr	r3, [pc, #192]	@ (80006e8 <MX_GPIO_Init+0x108>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	4a2f      	ldr	r2, [pc, #188]	@ (80006e8 <MX_GPIO_Init+0x108>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000632:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <MX_GPIO_Init+0x108>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <MX_GPIO_Init+0x108>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <MX_GPIO_Init+0x108>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b27      	ldr	r3, [pc, #156]	@ (80006e8 <MX_GPIO_Init+0x108>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	21b0      	movs	r1, #176	@ 0xb0
 800065a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065e:	f000 fc17 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000668:	4820      	ldr	r0, [pc, #128]	@ (80006ec <MX_GPIO_Init+0x10c>)
 800066a:	f000 fc11 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800066e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000674:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	481a      	ldr	r0, [pc, #104]	@ (80006f0 <MX_GPIO_Init+0x110>)
 8000686:	f000 fa89 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800068a:	23b0      	movs	r3, #176	@ 0xb0
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a4:	f000 fa7a 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80006a8:	2340      	movs	r3, #64	@ 0x40
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006be:	f000 fa6d 	bl	8000b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80006c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	4804      	ldr	r0, [pc, #16]	@ (80006ec <MX_GPIO_Init+0x10c>)
 80006dc:	f000 fa5e 	bl	8000b9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	@ 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000
 80006ec:	48000400 	.word	0x48000400
 80006f0:	48000800 	.word	0x48000800

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <Error_Handler+0x8>

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <HAL_MspInit+0x44>)
 8000708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800070a:	4a0e      	ldr	r2, [pc, #56]	@ (8000744 <HAL_MspInit+0x44>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6613      	str	r3, [r2, #96]	@ 0x60
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <HAL_MspInit+0x44>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <HAL_MspInit+0x44>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000722:	4a08      	ldr	r2, [pc, #32]	@ (8000744 <HAL_MspInit+0x44>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000728:	6593      	str	r3, [r2, #88]	@ 0x58
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <HAL_MspInit+0x44>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0a4      	sub	sp, #144	@ 0x90
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2268      	movs	r2, #104	@ 0x68
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f002 fa92 	bl	8002c92 <memset>
  if(huart->Instance==USART2)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a21      	ldr	r2, [pc, #132]	@ (80007f8 <HAL_UART_MspInit+0xb0>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d13a      	bne.n	80007ee <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000778:	2302      	movs	r3, #2
 800077a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800077c:	2300      	movs	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fa37 	bl	8001bf8 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000790:	f7ff ffb0 	bl	80006f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000794:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <HAL_UART_MspInit+0xb4>)
 8000796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000798:	4a18      	ldr	r2, [pc, #96]	@ (80007fc <HAL_UART_MspInit+0xb4>)
 800079a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800079e:	6593      	str	r3, [r2, #88]	@ 0x58
 80007a0:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <HAL_UART_MspInit+0xb4>)
 80007a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <HAL_UART_MspInit+0xb4>)
 80007ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b0:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <HAL_UART_MspInit+0xb4>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b8:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <HAL_UART_MspInit+0xb4>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007c4:	230c      	movs	r3, #12
 80007c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007da:	2307      	movs	r3, #7
 80007dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007e4:	4619      	mov	r1, r3
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ea:	f000 f9d7 	bl	8000b9c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80007ee:	bf00      	nop
 80007f0:	3790      	adds	r7, #144	@ 0x90
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40004400 	.word	0x40004400
 80007fc:	40021000 	.word	0x40021000

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <NMI_Handler+0x4>

08000808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <MemManage_Handler+0x4>

08000818 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <UsageFault_Handler+0x4>

08000828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000856:	f000 f89b 	bl	8000990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <SystemInit+0x20>)
 8000866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800086a:	4a05      	ldr	r2, [pc, #20]	@ (8000880 <SystemInit+0x20>)
 800086c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000884:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000888:	f7ff ffea 	bl	8000860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800088c:	480c      	ldr	r0, [pc, #48]	@ (80008c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800088e:	490d      	ldr	r1, [pc, #52]	@ (80008c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000890:	4a0d      	ldr	r2, [pc, #52]	@ (80008c8 <LoopForever+0xe>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000894:	e002      	b.n	800089c <LoopCopyDataInit>

08000896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089a:	3304      	adds	r3, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800089c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a0:	d3f9      	bcc.n	8000896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a2:	4a0a      	ldr	r2, [pc, #40]	@ (80008cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a4:	4c0a      	ldr	r4, [pc, #40]	@ (80008d0 <LoopForever+0x16>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a8:	e001      	b.n	80008ae <LoopFillZerobss>

080008aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ac:	3204      	adds	r2, #4

080008ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b0:	d3fb      	bcc.n	80008aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b2:	f002 f9f7 	bl	8002ca4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008b6:	f7ff fe05 	bl	80004c4 <main>

080008ba <LoopForever>:

LoopForever:
    b LoopForever
 80008ba:	e7fe      	b.n	80008ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008bc:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008c8:	08002d5c 	.word	0x08002d5c
  ldr r2, =_sbss
 80008cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008d0:	200000b4 	.word	0x200000b4

080008d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC1_IRQHandler>
	...

080008d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <HAL_Init+0x3c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000914 <HAL_Init+0x3c>)
 80008e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ee:	2003      	movs	r0, #3
 80008f0:	f000 f920 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 f80f 	bl	8000918 <HAL_InitTick>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000900:	2301      	movs	r3, #1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	e001      	b.n	800090a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000906:	f7ff fefb 	bl	8000700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800090a:	79fb      	ldrb	r3, [r7, #7]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40022000 	.word	0x40022000

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000924:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <HAL_InitTick+0x6c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d023      	beq.n	8000974 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <HAL_InitTick+0x70>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <HAL_InitTick+0x6c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800093a:	fbb3 f3f1 	udiv	r3, r3, r1
 800093e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f91d 	bl	8000b82 <HAL_SYSTICK_Config>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d10f      	bne.n	800096e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d809      	bhi.n	8000968 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f000 f8f5 	bl	8000b4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000960:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <HAL_InitTick+0x74>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
 8000966:	e007      	b.n	8000978 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000968:	2301      	movs	r3, #1
 800096a:	73fb      	strb	r3, [r7, #15]
 800096c:	e004      	b.n	8000978 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	73fb      	strb	r3, [r7, #15]
 8000972:	e001      	b.n	8000978 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000978:	7bfb      	ldrb	r3, [r7, #15]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000008 	.word	0x20000008
 8000988:	20000000 	.word	0x20000000
 800098c:	20000004 	.word	0x20000004

08000990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_IncTick+0x20>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_IncTick+0x24>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <HAL_IncTick+0x24>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008
 80009b4:	200000b0 	.word	0x200000b0

080009b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;
 80009bc:	4b03      	ldr	r3, [pc, #12]	@ (80009cc <HAL_GetTick+0x14>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	200000b0 	.word	0x200000b0

080009d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a02:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	60d3      	str	r3, [r2, #12]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <__NVIC_GetPriorityGrouping+0x18>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	f003 0307 	and.w	r3, r3, #7
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0a      	blt.n	8000a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	490c      	ldr	r1, [pc, #48]	@ (8000a80 <__NVIC_SetPriority+0x4c>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	440b      	add	r3, r1
 8000a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a5c:	e00a      	b.n	8000a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4908      	ldr	r1, [pc, #32]	@ (8000a84 <__NVIC_SetPriority+0x50>)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	0112      	lsls	r2, r2, #4
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	761a      	strb	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	@ 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf28      	it	cs
 8000aa6:	2304      	movcs	r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3304      	adds	r3, #4
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d902      	bls.n	8000ab8 <NVIC_EncodePriority+0x30>
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	e000      	b.n	8000aba <NVIC_EncodePriority+0x32>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	4313      	orrs	r3, r2
         );
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	@ 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00f      	b.n	8000b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <SysTick_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0e:	210f      	movs	r1, #15
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f7ff ff8e 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <SysTick_Config+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <SysTick_Config+0x40>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff47 	bl	80009d0 <__NVIC_SetPriorityGrouping>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5c:	f7ff ff5c 	bl	8000a18 <__NVIC_GetPriorityGrouping>
 8000b60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	6978      	ldr	r0, [r7, #20]
 8000b68:	f7ff ff8e 	bl	8000a88 <NVIC_EncodePriority>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff5d 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffb0 	bl	8000af0 <SysTick_Config>
 8000b90:	4603      	mov	r3, r0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b087      	sub	sp, #28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000baa:	e154      	b.n	8000e56 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 8146 	beq.w	8000e50 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d005      	beq.n	8000bdc <HAL_GPIO_Init+0x40>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d130      	bne.n	8000c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2203      	movs	r2, #3
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c12:	2201      	movs	r2, #1
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	f003 0201 	and.w	r2, r3, #1
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d017      	beq.n	8000c7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	2203      	movs	r2, #3
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d123      	bne.n	8000cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	691a      	ldr	r2, [r3, #16]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	08da      	lsrs	r2, r3, #3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3208      	adds	r2, #8
 8000cc8:	6939      	ldr	r1, [r7, #16]
 8000cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0203 	and.w	r2, r3, #3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80a0 	beq.w	8000e50 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d10:	4b58      	ldr	r3, [pc, #352]	@ (8000e74 <HAL_GPIO_Init+0x2d8>)
 8000d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d14:	4a57      	ldr	r2, [pc, #348]	@ (8000e74 <HAL_GPIO_Init+0x2d8>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d1c:	4b55      	ldr	r3, [pc, #340]	@ (8000e74 <HAL_GPIO_Init+0x2d8>)
 8000d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d28:	4a53      	ldr	r2, [pc, #332]	@ (8000e78 <HAL_GPIO_Init+0x2dc>)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d52:	d019      	beq.n	8000d88 <HAL_GPIO_Init+0x1ec>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a49      	ldr	r2, [pc, #292]	@ (8000e7c <HAL_GPIO_Init+0x2e0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d013      	beq.n	8000d84 <HAL_GPIO_Init+0x1e8>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a48      	ldr	r2, [pc, #288]	@ (8000e80 <HAL_GPIO_Init+0x2e4>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d00d      	beq.n	8000d80 <HAL_GPIO_Init+0x1e4>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a47      	ldr	r2, [pc, #284]	@ (8000e84 <HAL_GPIO_Init+0x2e8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d007      	beq.n	8000d7c <HAL_GPIO_Init+0x1e0>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a46      	ldr	r2, [pc, #280]	@ (8000e88 <HAL_GPIO_Init+0x2ec>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d101      	bne.n	8000d78 <HAL_GPIO_Init+0x1dc>
 8000d74:	2304      	movs	r3, #4
 8000d76:	e008      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d78:	2307      	movs	r3, #7
 8000d7a:	e006      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e004      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d80:	2302      	movs	r3, #2
 8000d82:	e002      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e000      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	f002 0203 	and.w	r2, r2, #3
 8000d90:	0092      	lsls	r2, r2, #2
 8000d92:	4093      	lsls	r3, r2
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d9a:	4937      	ldr	r1, [pc, #220]	@ (8000e78 <HAL_GPIO_Init+0x2dc>)
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	3302      	adds	r3, #2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000da8:	4b38      	ldr	r3, [pc, #224]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dcc:	4a2f      	ldr	r2, [pc, #188]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000df6:	4a25      	ldr	r2, [pc, #148]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dfc:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e20:	4a1a      	ldr	r2, [pc, #104]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e4a:	4a10      	ldr	r2, [pc, #64]	@ (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3301      	adds	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f47f aea3 	bne.w	8000bac <HAL_GPIO_Init+0x10>
  }
}
 8000e66:	bf00      	nop
 8000e68:	bf00      	nop
 8000e6a:	371c      	adds	r7, #28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010000 	.word	0x40010000
 8000e7c:	48000400 	.word	0x48000400
 8000e80:	48000800 	.word	0x48000800
 8000e84:	48000c00 	.word	0x48000c00
 8000e88:	48001000 	.word	0x48001000
 8000e8c:	40010400 	.word	0x40010400

08000e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ec4:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40007000 	.word	0x40007000

08000edc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000eea:	d130      	bne.n	8000f4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eec:	4b23      	ldr	r3, [pc, #140]	@ (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ef8:	d038      	beq.n	8000f6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000efa:	4b20      	ldr	r3, [pc, #128]	@ (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f02:	4a1e      	ldr	r2, [pc, #120]	@ (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2232      	movs	r2, #50	@ 0x32
 8000f10:	fb02 f303 	mul.w	r3, r2, r3
 8000f14:	4a1b      	ldr	r2, [pc, #108]	@ (8000f84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f16:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1a:	0c9b      	lsrs	r3, r3, #18
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f20:	e002      	b.n	8000f28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f28:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f34:	d102      	bne.n	8000f3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1f2      	bne.n	8000f22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f48:	d110      	bne.n	8000f6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e00f      	b.n	8000f6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f5a:	d007      	beq.n	8000f6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f5c:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f64:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40007000 	.word	0x40007000
 8000f80:	20000000 	.word	0x20000000
 8000f84:	431bde83 	.word	0x431bde83

08000f88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d102      	bne.n	8000f9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	f000 bc02 	b.w	80017a0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f9c:	4b96      	ldr	r3, [pc, #600]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 030c 	and.w	r3, r3, #12
 8000fa4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fa6:	4b94      	ldr	r3, [pc, #592]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0310 	and.w	r3, r3, #16
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80e4 	beq.w	8001186 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d007      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x4c>
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	2b0c      	cmp	r3, #12
 8000fc8:	f040 808b 	bne.w	80010e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	f040 8087 	bne.w	80010e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fd4:	4b88      	ldr	r3, [pc, #544]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d005      	beq.n	8000fec <HAL_RCC_OscConfig+0x64>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e3d9      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a1a      	ldr	r2, [r3, #32]
 8000ff0:	4b81      	ldr	r3, [pc, #516]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d004      	beq.n	8001006 <HAL_RCC_OscConfig+0x7e>
 8000ffc:	4b7e      	ldr	r3, [pc, #504]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001004:	e005      	b.n	8001012 <HAL_RCC_OscConfig+0x8a>
 8001006:	4b7c      	ldr	r3, [pc, #496]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001008:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001012:	4293      	cmp	r3, r2
 8001014:	d223      	bcs.n	800105e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fd8c 	bl	8001b38 <RCC_SetFlashLatencyFromMSIRange>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e3ba      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800102a:	4b73      	ldr	r3, [pc, #460]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a72      	ldr	r2, [pc, #456]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4b70      	ldr	r3, [pc, #448]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	496d      	ldr	r1, [pc, #436]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001048:	4b6b      	ldr	r3, [pc, #428]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	4968      	ldr	r1, [pc, #416]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001058:	4313      	orrs	r3, r2
 800105a:	604b      	str	r3, [r1, #4]
 800105c:	e025      	b.n	80010aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800105e:	4b66      	ldr	r3, [pc, #408]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a65      	ldr	r2, [pc, #404]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	4b63      	ldr	r3, [pc, #396]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4960      	ldr	r1, [pc, #384]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001078:	4313      	orrs	r3, r2
 800107a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800107c:	4b5e      	ldr	r3, [pc, #376]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	495b      	ldr	r1, [pc, #364]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 800108c:	4313      	orrs	r3, r2
 800108e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d109      	bne.n	80010aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fd4c 	bl	8001b38 <RCC_SetFlashLatencyFromMSIRange>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e37a      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010aa:	f000 fc81 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 80010ae:	4602      	mov	r2, r0
 80010b0:	4b51      	ldr	r3, [pc, #324]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	4950      	ldr	r1, [pc, #320]	@ (80011fc <HAL_RCC_OscConfig+0x274>)
 80010bc:	5ccb      	ldrb	r3, [r1, r3]
 80010be:	f003 031f 	and.w	r3, r3, #31
 80010c2:	fa22 f303 	lsr.w	r3, r2, r3
 80010c6:	4a4e      	ldr	r2, [pc, #312]	@ (8001200 <HAL_RCC_OscConfig+0x278>)
 80010c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001204 <HAL_RCC_OscConfig+0x27c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fc22 	bl	8000918 <HAL_InitTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d052      	beq.n	8001184 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	e35e      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d032      	beq.n	8001150 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010ea:	4b43      	ldr	r3, [pc, #268]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a42      	ldr	r2, [pc, #264]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fc5f 	bl	80009b8 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010fe:	f7ff fc5b 	bl	80009b8 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e347      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001110:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800111c:	4b36      	ldr	r3, [pc, #216]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a35      	ldr	r2, [pc, #212]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	4930      	ldr	r1, [pc, #192]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800113a:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	492b      	ldr	r1, [pc, #172]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 800114a:	4313      	orrs	r3, r2
 800114c:	604b      	str	r3, [r1, #4]
 800114e:	e01a      	b.n	8001186 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001150:	4b29      	ldr	r3, [pc, #164]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a28      	ldr	r2, [pc, #160]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001156:	f023 0301 	bic.w	r3, r3, #1
 800115a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800115c:	f7ff fc2c 	bl	80009b8 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001164:	f7ff fc28 	bl	80009b8 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e314      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001176:	4b20      	ldr	r3, [pc, #128]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x1dc>
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001184:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d073      	beq.n	800127a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2b08      	cmp	r3, #8
 8001196:	d005      	beq.n	80011a4 <HAL_RCC_OscConfig+0x21c>
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2b0c      	cmp	r3, #12
 800119c:	d10e      	bne.n	80011bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d10b      	bne.n	80011bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d063      	beq.n	8001278 <HAL_RCC_OscConfig+0x2f0>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d15f      	bne.n	8001278 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e2f1      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011c4:	d106      	bne.n	80011d4 <HAL_RCC_OscConfig+0x24c>
 80011c6:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a0b      	ldr	r2, [pc, #44]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 80011cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e025      	b.n	8001220 <HAL_RCC_OscConfig+0x298>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011dc:	d114      	bne.n	8001208 <HAL_RCC_OscConfig+0x280>
 80011de:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a02      	ldr	r2, [pc, #8]	@ (80011f8 <HAL_RCC_OscConfig+0x270>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e013      	b.n	8001220 <HAL_RCC_OscConfig+0x298>
 80011f8:	40021000 	.word	0x40021000
 80011fc:	08002d04 	.word	0x08002d04
 8001200:	20000000 	.word	0x20000000
 8001204:	20000004 	.word	0x20000004
 8001208:	4ba0      	ldr	r3, [pc, #640]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a9f      	ldr	r2, [pc, #636]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 800120e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b9d      	ldr	r3, [pc, #628]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a9c      	ldr	r2, [pc, #624]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800121e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fbc6 	bl	80009b8 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fbc2 	bl	80009b8 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	@ 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e2ae      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001242:	4b92      	ldr	r3, [pc, #584]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x2a8>
 800124e:	e014      	b.n	800127a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff fbb2 	bl	80009b8 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fbae 	bl	80009b8 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	@ 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e29a      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800126a:	4b88      	ldr	r3, [pc, #544]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x2d0>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d060      	beq.n	8001348 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b04      	cmp	r3, #4
 800128a:	d005      	beq.n	8001298 <HAL_RCC_OscConfig+0x310>
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2b0c      	cmp	r3, #12
 8001290:	d119      	bne.n	80012c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d116      	bne.n	80012c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001298:	4b7c      	ldr	r3, [pc, #496]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <HAL_RCC_OscConfig+0x328>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e277      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b0:	4b76      	ldr	r3, [pc, #472]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	061b      	lsls	r3, r3, #24
 80012be:	4973      	ldr	r1, [pc, #460]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c4:	e040      	b.n	8001348 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d023      	beq.n	8001316 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ce:	4b6f      	ldr	r3, [pc, #444]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6e      	ldr	r2, [pc, #440]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012da:	f7ff fb6d 	bl	80009b8 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e2:	f7ff fb69 	bl	80009b8 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e255      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f4:	4b65      	ldr	r3, [pc, #404]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001300:	4b62      	ldr	r3, [pc, #392]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	061b      	lsls	r3, r3, #24
 800130e:	495f      	ldr	r1, [pc, #380]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
 8001314:	e018      	b.n	8001348 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001316:	4b5d      	ldr	r3, [pc, #372]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a5c      	ldr	r2, [pc, #368]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 800131c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001322:	f7ff fb49 	bl	80009b8 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132a:	f7ff fb45 	bl	80009b8 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e231      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800133c:	4b53      	ldr	r3, [pc, #332]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	d03c      	beq.n	80013ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d01c      	beq.n	8001396 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135c:	4b4b      	ldr	r3, [pc, #300]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 800135e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001362:	4a4a      	ldr	r2, [pc, #296]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136c:	f7ff fb24 	bl	80009b8 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001374:	f7ff fb20 	bl	80009b8 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e20c      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001386:	4b41      	ldr	r3, [pc, #260]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 8001388:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0ef      	beq.n	8001374 <HAL_RCC_OscConfig+0x3ec>
 8001394:	e01b      	b.n	80013ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001396:	4b3d      	ldr	r3, [pc, #244]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 8001398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800139c:	4a3b      	ldr	r2, [pc, #236]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 800139e:	f023 0301 	bic.w	r3, r3, #1
 80013a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a6:	f7ff fb07 	bl	80009b8 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff fb03 	bl	80009b8 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1ef      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013c0:	4b32      	ldr	r3, [pc, #200]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 80013c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1ef      	bne.n	80013ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80a6 	beq.w	8001528 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013e0:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 80013e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10d      	bne.n	8001408 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	4b27      	ldr	r3, [pc, #156]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f0:	4a26      	ldr	r2, [pc, #152]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80013f8:	4b24      	ldr	r3, [pc, #144]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 80013fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001404:	2301      	movs	r3, #1
 8001406:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001408:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <HAL_RCC_OscConfig+0x508>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d118      	bne.n	8001446 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <HAL_RCC_OscConfig+0x508>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a1d      	ldr	r2, [pc, #116]	@ (8001490 <HAL_RCC_OscConfig+0x508>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800141e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001420:	f7ff faca 	bl	80009b8 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001428:	f7ff fac6 	bl	80009b8 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e1b2      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <HAL_RCC_OscConfig+0x508>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d108      	bne.n	8001460 <HAL_RCC_OscConfig+0x4d8>
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 8001450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800145e:	e029      	b.n	80014b4 <HAL_RCC_OscConfig+0x52c>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b05      	cmp	r3, #5
 8001466:	d115      	bne.n	8001494 <HAL_RCC_OscConfig+0x50c>
 8001468:	4b08      	ldr	r3, [pc, #32]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 800146a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800146e:	4a07      	ldr	r2, [pc, #28]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001478:	4b04      	ldr	r3, [pc, #16]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 800147a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800147e:	4a03      	ldr	r2, [pc, #12]	@ (800148c <HAL_RCC_OscConfig+0x504>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001488:	e014      	b.n	80014b4 <HAL_RCC_OscConfig+0x52c>
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	40007000 	.word	0x40007000
 8001494:	4b9a      	ldr	r3, [pc, #616]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 8001496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800149a:	4a99      	ldr	r2, [pc, #612]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 800149c:	f023 0301 	bic.w	r3, r3, #1
 80014a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014a4:	4b96      	ldr	r3, [pc, #600]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 80014a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014aa:	4a95      	ldr	r2, [pc, #596]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 80014ac:	f023 0304 	bic.w	r3, r3, #4
 80014b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d016      	beq.n	80014ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fa7c 	bl	80009b8 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014c2:	e00a      	b.n	80014da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c4:	f7ff fa78 	bl	80009b8 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e162      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014da:	4b89      	ldr	r3, [pc, #548]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 80014dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0ed      	beq.n	80014c4 <HAL_RCC_OscConfig+0x53c>
 80014e8:	e015      	b.n	8001516 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ea:	f7ff fa65 	bl	80009b8 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014f0:	e00a      	b.n	8001508 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	f7ff fa61 	bl	80009b8 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001500:	4293      	cmp	r3, r2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e14b      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001508:	4b7d      	ldr	r3, [pc, #500]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 800150a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1ed      	bne.n	80014f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001516:	7ffb      	ldrb	r3, [r7, #31]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d105      	bne.n	8001528 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151c:	4b78      	ldr	r3, [pc, #480]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 800151e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001520:	4a77      	ldr	r2, [pc, #476]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 8001522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001526:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0320 	and.w	r3, r3, #32
 8001530:	2b00      	cmp	r3, #0
 8001532:	d03c      	beq.n	80015ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001538:	2b00      	cmp	r3, #0
 800153a:	d01c      	beq.n	8001576 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800153c:	4b70      	ldr	r3, [pc, #448]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 800153e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001542:	4a6f      	ldr	r2, [pc, #444]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff fa34 	bl	80009b8 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001554:	f7ff fa30 	bl	80009b8 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e11c      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001566:	4b66      	ldr	r3, [pc, #408]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 8001568:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0ef      	beq.n	8001554 <HAL_RCC_OscConfig+0x5cc>
 8001574:	e01b      	b.n	80015ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001576:	4b62      	ldr	r3, [pc, #392]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 8001578:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800157c:	4a60      	ldr	r2, [pc, #384]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001586:	f7ff fa17 	bl	80009b8 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800158e:	f7ff fa13 	bl	80009b8 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0ff      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015a0:	4b57      	ldr	r3, [pc, #348]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 80015a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1ef      	bne.n	800158e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 80f3 	beq.w	800179e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015bc:	2b02      	cmp	r3, #2
 80015be:	f040 80c9 	bne.w	8001754 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f003 0203 	and.w	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d12c      	bne.n	8001630 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e0:	3b01      	subs	r3, #1
 80015e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d123      	bne.n	8001630 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d11b      	bne.n	8001630 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001602:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d113      	bne.n	8001630 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	3b01      	subs	r3, #1
 8001616:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d109      	bne.n	8001630 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	3b01      	subs	r3, #1
 800162a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800162c:	429a      	cmp	r2, r3
 800162e:	d06b      	beq.n	8001708 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d062      	beq.n	80016fc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001636:	4b32      	ldr	r3, [pc, #200]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0ac      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001646:	4b2e      	ldr	r3, [pc, #184]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a2d      	ldr	r2, [pc, #180]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 800164c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001650:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001652:	f7ff f9b1 	bl	80009b8 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff f9ad 	bl	80009b8 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e099      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800166c:	4b24      	ldr	r3, [pc, #144]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001678:	4b21      	ldr	r3, [pc, #132]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <HAL_RCC_OscConfig+0x77c>)
 800167e:	4013      	ands	r3, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001688:	3a01      	subs	r2, #1
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	4311      	orrs	r1, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001692:	0212      	lsls	r2, r2, #8
 8001694:	4311      	orrs	r1, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800169a:	0852      	lsrs	r2, r2, #1
 800169c:	3a01      	subs	r2, #1
 800169e:	0552      	lsls	r2, r2, #21
 80016a0:	4311      	orrs	r1, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016a6:	0852      	lsrs	r2, r2, #1
 80016a8:	3a01      	subs	r2, #1
 80016aa:	0652      	lsls	r2, r2, #25
 80016ac:	4311      	orrs	r1, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016b2:	06d2      	lsls	r2, r2, #27
 80016b4:	430a      	orrs	r2, r1
 80016b6:	4912      	ldr	r1, [pc, #72]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016bc:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 80016c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 80016ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016d4:	f7ff f970 	bl	80009b8 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff f96c 	bl	80009b8 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e058      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ee:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <HAL_RCC_OscConfig+0x778>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016fa:	e050      	b.n	800179e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e04f      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
 8001700:	40021000 	.word	0x40021000
 8001704:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001708:	4b27      	ldr	r3, [pc, #156]	@ (80017a8 <HAL_RCC_OscConfig+0x820>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d144      	bne.n	800179e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001714:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <HAL_RCC_OscConfig+0x820>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a23      	ldr	r2, [pc, #140]	@ (80017a8 <HAL_RCC_OscConfig+0x820>)
 800171a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800171e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001720:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <HAL_RCC_OscConfig+0x820>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4a20      	ldr	r2, [pc, #128]	@ (80017a8 <HAL_RCC_OscConfig+0x820>)
 8001726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800172a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800172c:	f7ff f944 	bl	80009b8 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff f940 	bl	80009b8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e02c      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <HAL_RCC_OscConfig+0x820>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x7ac>
 8001752:	e024      	b.n	800179e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d01f      	beq.n	800179a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175a:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <HAL_RCC_OscConfig+0x820>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <HAL_RCC_OscConfig+0x820>)
 8001760:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7ff f927 	bl	80009b8 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176e:	f7ff f923 	bl	80009b8 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e00f      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_RCC_OscConfig+0x820>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f0      	bne.n	800176e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_RCC_OscConfig+0x820>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	4905      	ldr	r1, [pc, #20]	@ (80017a8 <HAL_RCC_OscConfig+0x820>)
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_RCC_OscConfig+0x824>)
 8001794:	4013      	ands	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
 8001798:	e001      	b.n	800179e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000
 80017ac:	feeefffc 	.word	0xfeeefffc

080017b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0e7      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b75      	ldr	r3, [pc, #468]	@ (800199c <HAL_RCC_ClockConfig+0x1ec>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d910      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b72      	ldr	r3, [pc, #456]	@ (800199c <HAL_RCC_ClockConfig+0x1ec>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 0207 	bic.w	r2, r3, #7
 80017da:	4970      	ldr	r1, [pc, #448]	@ (800199c <HAL_RCC_ClockConfig+0x1ec>)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b6e      	ldr	r3, [pc, #440]	@ (800199c <HAL_RCC_ClockConfig+0x1ec>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0cf      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d010      	beq.n	8001822 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4b66      	ldr	r3, [pc, #408]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800180c:	429a      	cmp	r2, r3
 800180e:	d908      	bls.n	8001822 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b63      	ldr	r3, [pc, #396]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4960      	ldr	r1, [pc, #384]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d04c      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001836:	4b5a      	ldr	r3, [pc, #360]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d121      	bne.n	8001886 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0a6      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184e:	4b54      	ldr	r3, [pc, #336]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d115      	bne.n	8001886 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e09a      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001866:	4b4e      	ldr	r3, [pc, #312]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e08e      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001876:	4b4a      	ldr	r3, [pc, #296]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e086      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001886:	4b46      	ldr	r3, [pc, #280]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f023 0203 	bic.w	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4943      	ldr	r1, [pc, #268]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001898:	f7ff f88e 	bl	80009b8 <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a0:	f7ff f88a 	bl	80009b8 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e06e      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	4b3a      	ldr	r3, [pc, #232]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 020c 	and.w	r2, r3, #12
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d1eb      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d010      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	4b31      	ldr	r3, [pc, #196]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d208      	bcs.n	80018f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e4:	4b2e      	ldr	r3, [pc, #184]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	492b      	ldr	r1, [pc, #172]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f6:	4b29      	ldr	r3, [pc, #164]	@ (800199c <HAL_RCC_ClockConfig+0x1ec>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d210      	bcs.n	8001926 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001904:	4b25      	ldr	r3, [pc, #148]	@ (800199c <HAL_RCC_ClockConfig+0x1ec>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 0207 	bic.w	r2, r3, #7
 800190c:	4923      	ldr	r1, [pc, #140]	@ (800199c <HAL_RCC_ClockConfig+0x1ec>)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001914:	4b21      	ldr	r3, [pc, #132]	@ (800199c <HAL_RCC_ClockConfig+0x1ec>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d001      	beq.n	8001926 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e036      	b.n	8001994 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d008      	beq.n	8001944 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001932:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	4918      	ldr	r1, [pc, #96]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	4313      	orrs	r3, r2
 8001942:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d009      	beq.n	8001964 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001950:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4910      	ldr	r1, [pc, #64]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001964:	f000 f824 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8001968:	4602      	mov	r2, r0
 800196a:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	490b      	ldr	r1, [pc, #44]	@ (80019a4 <HAL_RCC_ClockConfig+0x1f4>)
 8001976:	5ccb      	ldrb	r3, [r1, r3]
 8001978:	f003 031f 	and.w	r3, r3, #31
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	4a09      	ldr	r2, [pc, #36]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001982:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001984:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <HAL_RCC_ClockConfig+0x1fc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe ffc5 	bl	8000918 <HAL_InitTick>
 800198e:	4603      	mov	r3, r0
 8001990:	72fb      	strb	r3, [r7, #11]

  return status;
 8001992:	7afb      	ldrb	r3, [r7, #11]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40022000 	.word	0x40022000
 80019a0:	40021000 	.word	0x40021000
 80019a4:	08002d04 	.word	0x08002d04
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004

080019b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	@ 0x24
 80019b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019be:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019c8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x34>
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d121      	bne.n	8001a22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d11e      	bne.n	8001a22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019e4:	4b34      	ldr	r3, [pc, #208]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019f0:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	e005      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a00:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10d      	bne.n	8001a38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a20:	e00a      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d102      	bne.n	8001a2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a28:	4b25      	ldr	r3, [pc, #148]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	e004      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a34:	4b23      	ldr	r3, [pc, #140]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	d134      	bne.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d003      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d003      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0xac>
 8001a54:	e005      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a58:	617b      	str	r3, [r7, #20]
      break;
 8001a5a:	e005      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a5e:	617b      	str	r3, [r7, #20]
      break;
 8001a60:	e002      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	617b      	str	r3, [r7, #20]
      break;
 8001a66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	3301      	adds	r3, #1
 8001a74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a76:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	fb03 f202 	mul.w	r2, r3, r2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	0e5b      	lsrs	r3, r3, #25
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001aa8:	69bb      	ldr	r3, [r7, #24]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	@ 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	08002d1c 	.word	0x08002d1c
 8001ac0:	00f42400 	.word	0x00f42400
 8001ac4:	007a1200 	.word	0x007a1200

08001ac8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000

08001ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ae4:	f7ff fff0 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	0a1b      	lsrs	r3, r3, #8
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	4904      	ldr	r1, [pc, #16]	@ (8001b08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001af6:	5ccb      	ldrb	r3, [r1, r3]
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40021000 	.word	0x40021000
 8001b08:	08002d14 	.word	0x08002d14

08001b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b10:	f7ff ffda 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	0adb      	lsrs	r3, r3, #11
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4904      	ldr	r1, [pc, #16]	@ (8001b34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000
 8001b34:	08002d14 	.word	0x08002d14

08001b38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b44:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b50:	f7ff f9b6 	bl	8000ec0 <HAL_PWREx_GetVoltageRange>
 8001b54:	6178      	str	r0, [r7, #20]
 8001b56:	e014      	b.n	8001b82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b58:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5c:	4a24      	ldr	r2, [pc, #144]	@ (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b62:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b64:	4b22      	ldr	r3, [pc, #136]	@ (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b70:	f7ff f9a6 	bl	8000ec0 <HAL_PWREx_GetVoltageRange>
 8001b74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b76:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b88:	d10b      	bne.n	8001ba2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b80      	cmp	r3, #128	@ 0x80
 8001b8e:	d919      	bls.n	8001bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b94:	d902      	bls.n	8001b9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b96:	2302      	movs	r3, #2
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	e013      	b.n	8001bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	e010      	b.n	8001bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b80      	cmp	r3, #128	@ 0x80
 8001ba6:	d902      	bls.n	8001bae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ba8:	2303      	movs	r3, #3
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	e00a      	b.n	8001bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b80      	cmp	r3, #128	@ 0x80
 8001bb2:	d102      	bne.n	8001bba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	e004      	b.n	8001bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b70      	cmp	r3, #112	@ 0x70
 8001bbe:	d101      	bne.n	8001bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 0207 	bic.w	r2, r3, #7
 8001bcc:	4909      	ldr	r1, [pc, #36]	@ (8001bf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bd4:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40022000 	.word	0x40022000

08001bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c00:	2300      	movs	r3, #0
 8001c02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c04:	2300      	movs	r3, #0
 8001c06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d031      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c18:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c1c:	d01a      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001c1e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c22:	d814      	bhi.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d009      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c2c:	d10f      	bne.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	4a5c      	ldr	r2, [pc, #368]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c38:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c3a:	e00c      	b.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 fa44 	bl	80020d0 <RCCEx_PLLSAI1_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c4c:	e003      	b.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	74fb      	strb	r3, [r7, #19]
      break;
 8001c52:	e000      	b.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c56:	7cfb      	ldrb	r3, [r7, #19]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10b      	bne.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c5c:	4b51      	ldr	r3, [pc, #324]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	494e      	ldr	r1, [pc, #312]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001c72:	e001      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c74:	7cfb      	ldrb	r3, [r7, #19]
 8001c76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 809e 	beq.w	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c8a:	4b46      	ldr	r3, [pc, #280]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00d      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca0:	4b40      	ldr	r3, [pc, #256]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca4:	4a3f      	ldr	r2, [pc, #252]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001caa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cac:	4b3d      	ldr	r3, [pc, #244]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a39      	ldr	r2, [pc, #228]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cc8:	f7fe fe76 	bl	80009b8 <HAL_GetTick>
 8001ccc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001cce:	e009      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd0:	f7fe fe72 	bl	80009b8 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d902      	bls.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	74fb      	strb	r3, [r7, #19]
        break;
 8001ce2:	e005      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ce4:	4b30      	ldr	r3, [pc, #192]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ef      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001cf0:	7cfb      	ldrb	r3, [r7, #19]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d15a      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01e      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d019      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d12:	4b24      	ldr	r3, [pc, #144]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d1e:	4b21      	ldr	r3, [pc, #132]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d24:	4a1f      	ldr	r2, [pc, #124]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d34:	4a1b      	ldr	r2, [pc, #108]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d3e:	4a19      	ldr	r2, [pc, #100]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d016      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7fe fe32 	bl	80009b8 <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d56:	e00b      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d58:	f7fe fe2e 	bl	80009b8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d902      	bls.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	74fb      	strb	r3, [r7, #19]
            break;
 8001d6e:	e006      	b.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0ec      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001d7e:	7cfb      	ldrb	r3, [r7, #19]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10b      	bne.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d84:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d92:	4904      	ldr	r1, [pc, #16]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001d9a:	e009      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d9c:	7cfb      	ldrb	r3, [r7, #19]
 8001d9e:	74bb      	strb	r3, [r7, #18]
 8001da0:	e006      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001db0:	7c7b      	ldrb	r3, [r7, #17]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db6:	4b9e      	ldr	r3, [pc, #632]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dba:	4a9d      	ldr	r2, [pc, #628]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001dbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00a      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dce:	4b98      	ldr	r3, [pc, #608]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dd4:	f023 0203 	bic.w	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4994      	ldr	r1, [pc, #592]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00a      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001df0:	4b8f      	ldr	r3, [pc, #572]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df6:	f023 020c 	bic.w	r2, r3, #12
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	498c      	ldr	r1, [pc, #560]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00a      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e12:	4b87      	ldr	r3, [pc, #540]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e18:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e20:	4983      	ldr	r1, [pc, #524]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00a      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e34:	4b7e      	ldr	r3, [pc, #504]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e42:	497b      	ldr	r1, [pc, #492]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00a      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e56:	4b76      	ldr	r3, [pc, #472]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e64:	4972      	ldr	r1, [pc, #456]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00a      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e78:	4b6d      	ldr	r3, [pc, #436]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e7e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	496a      	ldr	r1, [pc, #424]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00a      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e9a:	4b65      	ldr	r3, [pc, #404]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ea0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea8:	4961      	ldr	r1, [pc, #388]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00a      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ebc:	4b5c      	ldr	r3, [pc, #368]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eca:	4959      	ldr	r1, [pc, #356]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00a      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ede:	4b54      	ldr	r3, [pc, #336]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eec:	4950      	ldr	r1, [pc, #320]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00a      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f00:	4b4b      	ldr	r3, [pc, #300]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0e:	4948      	ldr	r1, [pc, #288]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f22:	4b43      	ldr	r3, [pc, #268]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f28:	f023 0203 	bic.w	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	493f      	ldr	r1, [pc, #252]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d028      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f44:	4b3a      	ldr	r3, [pc, #232]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f52:	4937      	ldr	r1, [pc, #220]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f62:	d106      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f64:	4b32      	ldr	r3, [pc, #200]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4a31      	ldr	r2, [pc, #196]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f6e:	60d3      	str	r3, [r2, #12]
 8001f70:	e011      	b.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001f7a:	d10c      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3304      	adds	r3, #4
 8001f80:	2101      	movs	r1, #1
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f8a4 	bl	80020d0 <RCCEx_PLLSAI1_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001f8c:	7cfb      	ldrb	r3, [r7, #19]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8001f92:	7cfb      	ldrb	r3, [r7, #19]
 8001f94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d028      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001fa2:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb0:	491f      	ldr	r1, [pc, #124]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001fc0:	d106      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	4a1a      	ldr	r2, [pc, #104]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fcc:	60d3      	str	r3, [r2, #12]
 8001fce:	e011      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 f875 	bl	80020d0 <RCCEx_PLLSAI1_Config>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001fea:	7cfb      	ldrb	r3, [r7, #19]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d02b      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002000:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002006:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200e:	4908      	ldr	r1, [pc, #32]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800201e:	d109      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002020:	4b03      	ldr	r3, [pc, #12]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4a02      	ldr	r2, [pc, #8]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800202a:	60d3      	str	r3, [r2, #12]
 800202c:	e014      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002038:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800203c:	d10c      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3304      	adds	r3, #4
 8002042:	2101      	movs	r1, #1
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f843 	bl	80020d0 <RCCEx_PLLSAI1_Config>
 800204a:	4603      	mov	r3, r0
 800204c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800204e:	7cfb      	ldrb	r3, [r7, #19]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01c      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002064:	4b19      	ldr	r3, [pc, #100]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002072:	4916      	ldr	r1, [pc, #88]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002082:	d10c      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3304      	adds	r3, #4
 8002088:	2102      	movs	r1, #2
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f820 	bl	80020d0 <RCCEx_PLLSAI1_Config>
 8002090:	4603      	mov	r3, r0
 8002092:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800209a:	7cfb      	ldrb	r3, [r7, #19]
 800209c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020aa:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b8:	4904      	ldr	r1, [pc, #16]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80020c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000

080020d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020de:	4b74      	ldr	r3, [pc, #464]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d018      	beq.n	800211c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80020ea:	4b71      	ldr	r3, [pc, #452]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f003 0203 	and.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d10d      	bne.n	8002116 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
       ||
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002102:	4b6b      	ldr	r3, [pc, #428]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
       ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d047      	beq.n	80021a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	e044      	b.n	80021a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d018      	beq.n	8002156 <RCCEx_PLLSAI1_Config+0x86>
 8002124:	2b03      	cmp	r3, #3
 8002126:	d825      	bhi.n	8002174 <RCCEx_PLLSAI1_Config+0xa4>
 8002128:	2b01      	cmp	r3, #1
 800212a:	d002      	beq.n	8002132 <RCCEx_PLLSAI1_Config+0x62>
 800212c:	2b02      	cmp	r3, #2
 800212e:	d009      	beq.n	8002144 <RCCEx_PLLSAI1_Config+0x74>
 8002130:	e020      	b.n	8002174 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002132:	4b5f      	ldr	r3, [pc, #380]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d11d      	bne.n	800217a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002142:	e01a      	b.n	800217a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002144:	4b5a      	ldr	r3, [pc, #360]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214c:	2b00      	cmp	r3, #0
 800214e:	d116      	bne.n	800217e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002154:	e013      	b.n	800217e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002156:	4b56      	ldr	r3, [pc, #344]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10f      	bne.n	8002182 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002162:	4b53      	ldr	r3, [pc, #332]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002172:	e006      	b.n	8002182 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
      break;
 8002178:	e004      	b.n	8002184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800217a:	bf00      	nop
 800217c:	e002      	b.n	8002184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800217e:	bf00      	nop
 8002180:	e000      	b.n	8002184 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002182:	bf00      	nop
    }

    if(status == HAL_OK)
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10d      	bne.n	80021a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800218a:	4b49      	ldr	r3, [pc, #292]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6819      	ldr	r1, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	430b      	orrs	r3, r1
 80021a0:	4943      	ldr	r1, [pc, #268]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d17c      	bne.n	80022a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80021ac:	4b40      	ldr	r3, [pc, #256]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a3f      	ldr	r2, [pc, #252]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80021b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b8:	f7fe fbfe 	bl	80009b8 <HAL_GetTick>
 80021bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021be:	e009      	b.n	80021d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021c0:	f7fe fbfa 	bl	80009b8 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d902      	bls.n	80021d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	73fb      	strb	r3, [r7, #15]
        break;
 80021d2:	e005      	b.n	80021e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021d4:	4b36      	ldr	r3, [pc, #216]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ef      	bne.n	80021c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d15f      	bne.n	80022a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d110      	bne.n	800220e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021ec:	4b30      	ldr	r3, [pc, #192]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80021f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6892      	ldr	r2, [r2, #8]
 80021fc:	0211      	lsls	r1, r2, #8
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68d2      	ldr	r2, [r2, #12]
 8002202:	06d2      	lsls	r2, r2, #27
 8002204:	430a      	orrs	r2, r1
 8002206:	492a      	ldr	r1, [pc, #168]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002208:	4313      	orrs	r3, r2
 800220a:	610b      	str	r3, [r1, #16]
 800220c:	e027      	b.n	800225e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d112      	bne.n	800223a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002214:	4b26      	ldr	r3, [pc, #152]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800221c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6892      	ldr	r2, [r2, #8]
 8002224:	0211      	lsls	r1, r2, #8
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6912      	ldr	r2, [r2, #16]
 800222a:	0852      	lsrs	r2, r2, #1
 800222c:	3a01      	subs	r2, #1
 800222e:	0552      	lsls	r2, r2, #21
 8002230:	430a      	orrs	r2, r1
 8002232:	491f      	ldr	r1, [pc, #124]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002234:	4313      	orrs	r3, r2
 8002236:	610b      	str	r3, [r1, #16]
 8002238:	e011      	b.n	800225e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800223a:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002242:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6892      	ldr	r2, [r2, #8]
 800224a:	0211      	lsls	r1, r2, #8
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6952      	ldr	r2, [r2, #20]
 8002250:	0852      	lsrs	r2, r2, #1
 8002252:	3a01      	subs	r2, #1
 8002254:	0652      	lsls	r2, r2, #25
 8002256:	430a      	orrs	r2, r1
 8002258:	4915      	ldr	r1, [pc, #84]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800225a:	4313      	orrs	r3, r2
 800225c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800225e:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a13      	ldr	r2, [pc, #76]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002264:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002268:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7fe fba5 	bl	80009b8 <HAL_GetTick>
 800226e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002270:	e009      	b.n	8002286 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002272:	f7fe fba1 	bl	80009b8 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d902      	bls.n	8002286 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	73fb      	strb	r3, [r7, #15]
          break;
 8002284:	e005      	b.n	8002292 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002286:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0ef      	beq.n	8002272 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d106      	bne.n	80022a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4903      	ldr	r1, [pc, #12]	@ (80022b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000

080022b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e040      	b.n	8002348 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7fe fa36 	bl	8000748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2224      	movs	r2, #36	@ 0x24
 80022e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0201 	bic.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 faae 	bl	800285c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f825 	bl	8002350 <UART_SetConfig>
 8002306:	4603      	mov	r3, r0
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e01b      	b.n	8002348 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800231e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800232e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fb2d 	bl	80029a0 <UART_CheckIdleState>
 8002346:	4603      	mov	r3, r0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002354:	b08a      	sub	sp, #40	@ 0x28
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	431a      	orrs	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	431a      	orrs	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	4313      	orrs	r3, r2
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4ba5      	ldr	r3, [pc, #660]	@ (8002614 <UART_SetConfig+0x2c4>)
 8002380:	4013      	ands	r3, r2
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002388:	430b      	orrs	r3, r1
 800238a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a9a      	ldr	r2, [pc, #616]	@ (8002618 <UART_SetConfig+0x2c8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d004      	beq.n	80023bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b8:	4313      	orrs	r3, r2
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023cc:	430a      	orrs	r2, r1
 80023ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a91      	ldr	r2, [pc, #580]	@ (800261c <UART_SetConfig+0x2cc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d126      	bne.n	8002428 <UART_SetConfig+0xd8>
 80023da:	4b91      	ldr	r3, [pc, #580]	@ (8002620 <UART_SetConfig+0x2d0>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d81b      	bhi.n	8002420 <UART_SetConfig+0xd0>
 80023e8:	a201      	add	r2, pc, #4	@ (adr r2, 80023f0 <UART_SetConfig+0xa0>)
 80023ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ee:	bf00      	nop
 80023f0:	08002401 	.word	0x08002401
 80023f4:	08002411 	.word	0x08002411
 80023f8:	08002409 	.word	0x08002409
 80023fc:	08002419 	.word	0x08002419
 8002400:	2301      	movs	r3, #1
 8002402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002406:	e0d6      	b.n	80025b6 <UART_SetConfig+0x266>
 8002408:	2302      	movs	r3, #2
 800240a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800240e:	e0d2      	b.n	80025b6 <UART_SetConfig+0x266>
 8002410:	2304      	movs	r3, #4
 8002412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002416:	e0ce      	b.n	80025b6 <UART_SetConfig+0x266>
 8002418:	2308      	movs	r3, #8
 800241a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800241e:	e0ca      	b.n	80025b6 <UART_SetConfig+0x266>
 8002420:	2310      	movs	r3, #16
 8002422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002426:	e0c6      	b.n	80025b6 <UART_SetConfig+0x266>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a7d      	ldr	r2, [pc, #500]	@ (8002624 <UART_SetConfig+0x2d4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d138      	bne.n	80024a4 <UART_SetConfig+0x154>
 8002432:	4b7b      	ldr	r3, [pc, #492]	@ (8002620 <UART_SetConfig+0x2d0>)
 8002434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b0c      	cmp	r3, #12
 800243e:	d82d      	bhi.n	800249c <UART_SetConfig+0x14c>
 8002440:	a201      	add	r2, pc, #4	@ (adr r2, 8002448 <UART_SetConfig+0xf8>)
 8002442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002446:	bf00      	nop
 8002448:	0800247d 	.word	0x0800247d
 800244c:	0800249d 	.word	0x0800249d
 8002450:	0800249d 	.word	0x0800249d
 8002454:	0800249d 	.word	0x0800249d
 8002458:	0800248d 	.word	0x0800248d
 800245c:	0800249d 	.word	0x0800249d
 8002460:	0800249d 	.word	0x0800249d
 8002464:	0800249d 	.word	0x0800249d
 8002468:	08002485 	.word	0x08002485
 800246c:	0800249d 	.word	0x0800249d
 8002470:	0800249d 	.word	0x0800249d
 8002474:	0800249d 	.word	0x0800249d
 8002478:	08002495 	.word	0x08002495
 800247c:	2300      	movs	r3, #0
 800247e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002482:	e098      	b.n	80025b6 <UART_SetConfig+0x266>
 8002484:	2302      	movs	r3, #2
 8002486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800248a:	e094      	b.n	80025b6 <UART_SetConfig+0x266>
 800248c:	2304      	movs	r3, #4
 800248e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002492:	e090      	b.n	80025b6 <UART_SetConfig+0x266>
 8002494:	2308      	movs	r3, #8
 8002496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800249a:	e08c      	b.n	80025b6 <UART_SetConfig+0x266>
 800249c:	2310      	movs	r3, #16
 800249e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024a2:	e088      	b.n	80025b6 <UART_SetConfig+0x266>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a5f      	ldr	r2, [pc, #380]	@ (8002628 <UART_SetConfig+0x2d8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d125      	bne.n	80024fa <UART_SetConfig+0x1aa>
 80024ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002620 <UART_SetConfig+0x2d0>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80024b8:	2b30      	cmp	r3, #48	@ 0x30
 80024ba:	d016      	beq.n	80024ea <UART_SetConfig+0x19a>
 80024bc:	2b30      	cmp	r3, #48	@ 0x30
 80024be:	d818      	bhi.n	80024f2 <UART_SetConfig+0x1a2>
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	d00a      	beq.n	80024da <UART_SetConfig+0x18a>
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d814      	bhi.n	80024f2 <UART_SetConfig+0x1a2>
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <UART_SetConfig+0x182>
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d008      	beq.n	80024e2 <UART_SetConfig+0x192>
 80024d0:	e00f      	b.n	80024f2 <UART_SetConfig+0x1a2>
 80024d2:	2300      	movs	r3, #0
 80024d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024d8:	e06d      	b.n	80025b6 <UART_SetConfig+0x266>
 80024da:	2302      	movs	r3, #2
 80024dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024e0:	e069      	b.n	80025b6 <UART_SetConfig+0x266>
 80024e2:	2304      	movs	r3, #4
 80024e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024e8:	e065      	b.n	80025b6 <UART_SetConfig+0x266>
 80024ea:	2308      	movs	r3, #8
 80024ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024f0:	e061      	b.n	80025b6 <UART_SetConfig+0x266>
 80024f2:	2310      	movs	r3, #16
 80024f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024f8:	e05d      	b.n	80025b6 <UART_SetConfig+0x266>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a4b      	ldr	r2, [pc, #300]	@ (800262c <UART_SetConfig+0x2dc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d125      	bne.n	8002550 <UART_SetConfig+0x200>
 8002504:	4b46      	ldr	r3, [pc, #280]	@ (8002620 <UART_SetConfig+0x2d0>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800250e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002510:	d016      	beq.n	8002540 <UART_SetConfig+0x1f0>
 8002512:	2bc0      	cmp	r3, #192	@ 0xc0
 8002514:	d818      	bhi.n	8002548 <UART_SetConfig+0x1f8>
 8002516:	2b80      	cmp	r3, #128	@ 0x80
 8002518:	d00a      	beq.n	8002530 <UART_SetConfig+0x1e0>
 800251a:	2b80      	cmp	r3, #128	@ 0x80
 800251c:	d814      	bhi.n	8002548 <UART_SetConfig+0x1f8>
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <UART_SetConfig+0x1d8>
 8002522:	2b40      	cmp	r3, #64	@ 0x40
 8002524:	d008      	beq.n	8002538 <UART_SetConfig+0x1e8>
 8002526:	e00f      	b.n	8002548 <UART_SetConfig+0x1f8>
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800252e:	e042      	b.n	80025b6 <UART_SetConfig+0x266>
 8002530:	2302      	movs	r3, #2
 8002532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002536:	e03e      	b.n	80025b6 <UART_SetConfig+0x266>
 8002538:	2304      	movs	r3, #4
 800253a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800253e:	e03a      	b.n	80025b6 <UART_SetConfig+0x266>
 8002540:	2308      	movs	r3, #8
 8002542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002546:	e036      	b.n	80025b6 <UART_SetConfig+0x266>
 8002548:	2310      	movs	r3, #16
 800254a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800254e:	e032      	b.n	80025b6 <UART_SetConfig+0x266>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a30      	ldr	r2, [pc, #192]	@ (8002618 <UART_SetConfig+0x2c8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d12a      	bne.n	80025b0 <UART_SetConfig+0x260>
 800255a:	4b31      	ldr	r3, [pc, #196]	@ (8002620 <UART_SetConfig+0x2d0>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002560:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002564:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002568:	d01a      	beq.n	80025a0 <UART_SetConfig+0x250>
 800256a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800256e:	d81b      	bhi.n	80025a8 <UART_SetConfig+0x258>
 8002570:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002574:	d00c      	beq.n	8002590 <UART_SetConfig+0x240>
 8002576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800257a:	d815      	bhi.n	80025a8 <UART_SetConfig+0x258>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <UART_SetConfig+0x238>
 8002580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002584:	d008      	beq.n	8002598 <UART_SetConfig+0x248>
 8002586:	e00f      	b.n	80025a8 <UART_SetConfig+0x258>
 8002588:	2300      	movs	r3, #0
 800258a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800258e:	e012      	b.n	80025b6 <UART_SetConfig+0x266>
 8002590:	2302      	movs	r3, #2
 8002592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002596:	e00e      	b.n	80025b6 <UART_SetConfig+0x266>
 8002598:	2304      	movs	r3, #4
 800259a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800259e:	e00a      	b.n	80025b6 <UART_SetConfig+0x266>
 80025a0:	2308      	movs	r3, #8
 80025a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80025a6:	e006      	b.n	80025b6 <UART_SetConfig+0x266>
 80025a8:	2310      	movs	r3, #16
 80025aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80025ae:	e002      	b.n	80025b6 <UART_SetConfig+0x266>
 80025b0:	2310      	movs	r3, #16
 80025b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a17      	ldr	r2, [pc, #92]	@ (8002618 <UART_SetConfig+0x2c8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	f040 808b 	bne.w	80026d8 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80025c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d834      	bhi.n	8002634 <UART_SetConfig+0x2e4>
 80025ca:	a201      	add	r2, pc, #4	@ (adr r2, 80025d0 <UART_SetConfig+0x280>)
 80025cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d0:	080025f5 	.word	0x080025f5
 80025d4:	08002635 	.word	0x08002635
 80025d8:	080025fd 	.word	0x080025fd
 80025dc:	08002635 	.word	0x08002635
 80025e0:	08002603 	.word	0x08002603
 80025e4:	08002635 	.word	0x08002635
 80025e8:	08002635 	.word	0x08002635
 80025ec:	08002635 	.word	0x08002635
 80025f0:	0800260b 	.word	0x0800260b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025f4:	f7ff fa74 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 80025f8:	61f8      	str	r0, [r7, #28]
        break;
 80025fa:	e021      	b.n	8002640 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <UART_SetConfig+0x2e0>)
 80025fe:	61fb      	str	r3, [r7, #28]
        break;
 8002600:	e01e      	b.n	8002640 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002602:	f7ff f9d5 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8002606:	61f8      	str	r0, [r7, #28]
        break;
 8002608:	e01a      	b.n	8002640 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800260a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800260e:	61fb      	str	r3, [r7, #28]
        break;
 8002610:	e016      	b.n	8002640 <UART_SetConfig+0x2f0>
 8002612:	bf00      	nop
 8002614:	efff69f3 	.word	0xefff69f3
 8002618:	40008000 	.word	0x40008000
 800261c:	40013800 	.word	0x40013800
 8002620:	40021000 	.word	0x40021000
 8002624:	40004400 	.word	0x40004400
 8002628:	40004800 	.word	0x40004800
 800262c:	40004c00 	.word	0x40004c00
 8002630:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800263e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 80fa 	beq.w	800283c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	429a      	cmp	r2, r3
 8002656:	d305      	bcc.n	8002664 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	429a      	cmp	r2, r3
 8002662:	d903      	bls.n	800266c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800266a:	e0e7      	b.n	800283c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2200      	movs	r2, #0
 8002670:	461c      	mov	r4, r3
 8002672:	4615      	mov	r5, r2
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	022b      	lsls	r3, r5, #8
 800267e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002682:	0222      	lsls	r2, r4, #8
 8002684:	68f9      	ldr	r1, [r7, #12]
 8002686:	6849      	ldr	r1, [r1, #4]
 8002688:	0849      	lsrs	r1, r1, #1
 800268a:	2000      	movs	r0, #0
 800268c:	4688      	mov	r8, r1
 800268e:	4681      	mov	r9, r0
 8002690:	eb12 0a08 	adds.w	sl, r2, r8
 8002694:	eb43 0b09 	adc.w	fp, r3, r9
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026a6:	4650      	mov	r0, sl
 80026a8:	4659      	mov	r1, fp
 80026aa:	f7fd fd93 	bl	80001d4 <__aeabi_uldivmod>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4613      	mov	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026bc:	d308      	bcc.n	80026d0 <UART_SetConfig+0x380>
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026c4:	d204      	bcs.n	80026d0 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	e0b5      	b.n	800283c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80026d6:	e0b1      	b.n	800283c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026e0:	d15d      	bne.n	800279e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80026e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d827      	bhi.n	800273a <UART_SetConfig+0x3ea>
 80026ea:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <UART_SetConfig+0x3a0>)
 80026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f0:	08002715 	.word	0x08002715
 80026f4:	0800271d 	.word	0x0800271d
 80026f8:	08002725 	.word	0x08002725
 80026fc:	0800273b 	.word	0x0800273b
 8002700:	0800272b 	.word	0x0800272b
 8002704:	0800273b 	.word	0x0800273b
 8002708:	0800273b 	.word	0x0800273b
 800270c:	0800273b 	.word	0x0800273b
 8002710:	08002733 	.word	0x08002733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002714:	f7ff f9e4 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 8002718:	61f8      	str	r0, [r7, #28]
        break;
 800271a:	e014      	b.n	8002746 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800271c:	f7ff f9f6 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 8002720:	61f8      	str	r0, [r7, #28]
        break;
 8002722:	e010      	b.n	8002746 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002724:	4b4c      	ldr	r3, [pc, #304]	@ (8002858 <UART_SetConfig+0x508>)
 8002726:	61fb      	str	r3, [r7, #28]
        break;
 8002728:	e00d      	b.n	8002746 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800272a:	f7ff f941 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 800272e:	61f8      	str	r0, [r7, #28]
        break;
 8002730:	e009      	b.n	8002746 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002736:	61fb      	str	r3, [r7, #28]
        break;
 8002738:	e005      	b.n	8002746 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002744:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d077      	beq.n	800283c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005a      	lsls	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	441a      	add	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b0f      	cmp	r3, #15
 8002766:	d916      	bls.n	8002796 <UART_SetConfig+0x446>
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276e:	d212      	bcs.n	8002796 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	b29b      	uxth	r3, r3
 8002774:	f023 030f 	bic.w	r3, r3, #15
 8002778:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	b29b      	uxth	r3, r3
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	b29a      	uxth	r2, r3
 8002786:	8afb      	ldrh	r3, [r7, #22]
 8002788:	4313      	orrs	r3, r2
 800278a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	8afa      	ldrh	r2, [r7, #22]
 8002792:	60da      	str	r2, [r3, #12]
 8002794:	e052      	b.n	800283c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800279c:	e04e      	b.n	800283c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800279e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d827      	bhi.n	80027f6 <UART_SetConfig+0x4a6>
 80027a6:	a201      	add	r2, pc, #4	@ (adr r2, 80027ac <UART_SetConfig+0x45c>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027d1 	.word	0x080027d1
 80027b0:	080027d9 	.word	0x080027d9
 80027b4:	080027e1 	.word	0x080027e1
 80027b8:	080027f7 	.word	0x080027f7
 80027bc:	080027e7 	.word	0x080027e7
 80027c0:	080027f7 	.word	0x080027f7
 80027c4:	080027f7 	.word	0x080027f7
 80027c8:	080027f7 	.word	0x080027f7
 80027cc:	080027ef 	.word	0x080027ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027d0:	f7ff f986 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 80027d4:	61f8      	str	r0, [r7, #28]
        break;
 80027d6:	e014      	b.n	8002802 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027d8:	f7ff f998 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 80027dc:	61f8      	str	r0, [r7, #28]
        break;
 80027de:	e010      	b.n	8002802 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002858 <UART_SetConfig+0x508>)
 80027e2:	61fb      	str	r3, [r7, #28]
        break;
 80027e4:	e00d      	b.n	8002802 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027e6:	f7ff f8e3 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 80027ea:	61f8      	str	r0, [r7, #28]
        break;
 80027ec:	e009      	b.n	8002802 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027f2:	61fb      	str	r3, [r7, #28]
        break;
 80027f4:	e005      	b.n	8002802 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002800:	bf00      	nop
    }

    if (pclk != 0U)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d019      	beq.n	800283c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	085a      	lsrs	r2, r3, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	441a      	add	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b0f      	cmp	r3, #15
 8002820:	d909      	bls.n	8002836 <UART_SetConfig+0x4e6>
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002828:	d205      	bcs.n	8002836 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60da      	str	r2, [r3, #12]
 8002834:	e002      	b.n	800283c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002848:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800284c:	4618      	mov	r0, r3
 800284e:	3728      	adds	r7, #40	@ 0x28
 8002850:	46bd      	mov	sp, r7
 8002852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002856:	bf00      	nop
 8002858:	00f42400 	.word	0x00f42400

0800285c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01a      	beq.n	8002972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800295a:	d10a      	bne.n	8002972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	605a      	str	r2, [r3, #4]
  }
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b098      	sub	sp, #96	@ 0x60
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029b0:	f7fe f802 	bl	80009b8 <HAL_GetTick>
 80029b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d12e      	bne.n	8002a22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029cc:	2200      	movs	r2, #0
 80029ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f88c 	bl	8002af0 <UART_WaitOnFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d021      	beq.n	8002a22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e6:	e853 3f00 	ldrex	r3, [r3]
 80029ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80029ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80029fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a04:	e841 2300 	strex	r3, r2, [r1]
 8002a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e6      	bne.n	80029de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e062      	b.n	8002ae8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d149      	bne.n	8002ac4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f856 	bl	8002af0 <UART_WaitOnFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d03c      	beq.n	8002ac4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	e853 3f00 	ldrex	r3, [r3]
 8002a56:	623b      	str	r3, [r7, #32]
   return(result);
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a70:	e841 2300 	strex	r3, r2, [r1]
 8002a74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1e6      	bne.n	8002a4a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3308      	adds	r3, #8
 8002a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	e853 3f00 	ldrex	r3, [r3]
 8002a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3308      	adds	r3, #8
 8002a9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a9c:	61fa      	str	r2, [r7, #28]
 8002a9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa0:	69b9      	ldr	r1, [r7, #24]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	e841 2300 	strex	r3, r2, [r1]
 8002aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1e5      	bne.n	8002a7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e011      	b.n	8002ae8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3758      	adds	r7, #88	@ 0x58
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b00:	e04f      	b.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d04b      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0a:	f7fd ff55 	bl	80009b8 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e04e      	b.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d037      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b80      	cmp	r3, #128	@ 0x80
 8002b36:	d034      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b40      	cmp	r3, #64	@ 0x40
 8002b3c:	d031      	beq.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d110      	bne.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2208      	movs	r2, #8
 8002b52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f838 	bl	8002bca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e029      	b.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b7c:	d111      	bne.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f81e 	bl	8002bca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e00f      	b.n	8002bc2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4013      	ands	r3, r2
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d0a0      	beq.n	8002b02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b095      	sub	sp, #84	@ 0x54
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bda:	e853 3f00 	ldrex	r3, [r3]
 8002bde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bf2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bf8:	e841 2300 	strex	r3, r2, [r1]
 8002bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e6      	bne.n	8002bd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3308      	adds	r3, #8
 8002c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	e853 3f00 	ldrex	r3, [r3]
 8002c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3308      	adds	r3, #8
 8002c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c2c:	e841 2300 	strex	r3, r2, [r1]
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e5      	bne.n	8002c04 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d118      	bne.n	8002c72 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	e853 3f00 	ldrex	r3, [r3]
 8002c4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f023 0310 	bic.w	r3, r3, #16
 8002c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c62:	6979      	ldr	r1, [r7, #20]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	e841 2300 	strex	r3, r2, [r1]
 8002c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1e6      	bne.n	8002c40 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002c86:	bf00      	nop
 8002c88:	3754      	adds	r7, #84	@ 0x54
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <memset>:
 8002c92:	4402      	add	r2, r0
 8002c94:	4603      	mov	r3, r0
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d100      	bne.n	8002c9c <memset+0xa>
 8002c9a:	4770      	bx	lr
 8002c9c:	f803 1b01 	strb.w	r1, [r3], #1
 8002ca0:	e7f9      	b.n	8002c96 <memset+0x4>
	...

08002ca4 <__libc_init_array>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8002cdc <__libc_init_array+0x38>)
 8002ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8002ce0 <__libc_init_array+0x3c>)
 8002caa:	1b64      	subs	r4, r4, r5
 8002cac:	10a4      	asrs	r4, r4, #2
 8002cae:	2600      	movs	r6, #0
 8002cb0:	42a6      	cmp	r6, r4
 8002cb2:	d109      	bne.n	8002cc8 <__libc_init_array+0x24>
 8002cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8002ce4 <__libc_init_array+0x40>)
 8002cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8002ce8 <__libc_init_array+0x44>)
 8002cb8:	f000 f818 	bl	8002cec <_init>
 8002cbc:	1b64      	subs	r4, r4, r5
 8002cbe:	10a4      	asrs	r4, r4, #2
 8002cc0:	2600      	movs	r6, #0
 8002cc2:	42a6      	cmp	r6, r4
 8002cc4:	d105      	bne.n	8002cd2 <__libc_init_array+0x2e>
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
 8002cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ccc:	4798      	blx	r3
 8002cce:	3601      	adds	r6, #1
 8002cd0:	e7ee      	b.n	8002cb0 <__libc_init_array+0xc>
 8002cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd6:	4798      	blx	r3
 8002cd8:	3601      	adds	r6, #1
 8002cda:	e7f2      	b.n	8002cc2 <__libc_init_array+0x1e>
 8002cdc:	08002d54 	.word	0x08002d54
 8002ce0:	08002d54 	.word	0x08002d54
 8002ce4:	08002d54 	.word	0x08002d54
 8002ce8:	08002d58 	.word	0x08002d58

08002cec <_init>:
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	bf00      	nop
 8002cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf2:	bc08      	pop	{r3}
 8002cf4:	469e      	mov	lr, r3
 8002cf6:	4770      	bx	lr

08002cf8 <_fini>:
 8002cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfa:	bf00      	nop
 8002cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfe:	bc08      	pop	{r3}
 8002d00:	469e      	mov	lr, r3
 8002d02:	4770      	bx	lr
