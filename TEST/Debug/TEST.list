
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08004644  08004644  00005644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047fc  080047fc  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080047fc  080047fc  000057fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004804  08004804  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004804  08004804  00005804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004808  08004808  00005808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800480c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  08004874  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004874  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c84b  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0c  00000000  00000000  000128e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  000146f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008fa  00000000  00000000  00015298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002315f  00000000  00000000  00015b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e41b  00000000  00000000  00038cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d15a1  00000000  00000000  0004710c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001186ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c4  00000000  00000000  001186f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0011bfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800462c 	.word	0x0800462c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800462c 	.word	0x0800462c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <WaitForStart>:
int pattern[3];
int step = 0;
int round_flag = 0;
int started = 0; // ใช้ตรวจสอบว่ากดปุ่ม OP1 & OP3 ค้าง 5 วินาทีแล้วหรือยัง

void WaitForStart() {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
    uint32_t start_time = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]

    LED_Status(1, 1);
 800057a:	2101      	movs	r1, #1
 800057c:	2001      	movs	r0, #1
 800057e:	f000 f88d 	bl	800069c <LED_Status>
    LED_Status(3, 1);
 8000582:	2101      	movs	r1, #1
 8000584:	2003      	movs	r0, #3
 8000586:	f000 f889 	bl	800069c <LED_Status>

    while (!started) {
 800058a:	e02c      	b.n	80005e6 <WaitForStart+0x76>
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)) {
 800058c:	2101      	movs	r1, #1
 800058e:	481a      	ldr	r0, [pc, #104]	@ (80005f8 <WaitForStart+0x88>)
 8000590:	f001 f874 	bl	800167c <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d023      	beq.n	80005e2 <WaitForStart+0x72>
 800059a:	2104      	movs	r1, #4
 800059c:	4816      	ldr	r0, [pc, #88]	@ (80005f8 <WaitForStart+0x88>)
 800059e:	f001 f86d 	bl	800167c <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d01c      	beq.n	80005e2 <WaitForStart+0x72>
            if (start_time == 0) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d102      	bne.n	80005b4 <WaitForStart+0x44>
                start_time = HAL_GetTick();
 80005ae:	f000 fdd5 	bl	800115c <HAL_GetTick>
 80005b2:	6078      	str	r0, [r7, #4]
            }
            if (HAL_GetTick() - start_time >= 5000) {
 80005b4:	f000 fdd2 	bl	800115c <HAL_GetTick>
 80005b8:	4602      	mov	r2, r0
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	f241 3287 	movw	r2, #4999	@ 0x1387
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d90f      	bls.n	80005e6 <WaitForStart+0x76>
                started = 1;
 80005c6:	4b0d      	ldr	r3, [pc, #52]	@ (80005fc <WaitForStart+0x8c>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	601a      	str	r2, [r3, #0]
                LED_Status(1, 0);
 80005cc:	2100      	movs	r1, #0
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 f864 	bl	800069c <LED_Status>
                LED_Status(3, 0);
 80005d4:	2100      	movs	r1, #0
 80005d6:	2003      	movs	r0, #3
 80005d8:	f000 f860 	bl	800069c <LED_Status>
                GeneratePattern();
 80005dc:	f000 f810 	bl	8000600 <GeneratePattern>
            if (HAL_GetTick() - start_time >= 5000) {
 80005e0:	e001      	b.n	80005e6 <WaitForStart+0x76>
            }
        } else {
            start_time = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
    while (!started) {
 80005e6:	4b05      	ldr	r3, [pc, #20]	@ (80005fc <WaitForStart+0x8c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0ce      	beq.n	800058c <WaitForStart+0x1c>
        }
    }
}
 80005ee:	bf00      	nop
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	48000800 	.word	0x48000800
 80005fc:	20000098 	.word	0x20000098

08000600 <GeneratePattern>:


void GeneratePattern() {
 8000600:	b580      	push	{r7, lr}
 8000602:	b0a6      	sub	sp, #152	@ 0x98
 8000604:	af00      	add	r7, sp, #0
    int patterns[12][3] = {
 8000606:	4a21      	ldr	r2, [pc, #132]	@ (800068c <GeneratePattern+0x8c>)
 8000608:	463b      	mov	r3, r7
 800060a:	4611      	mov	r1, r2
 800060c:	2290      	movs	r2, #144	@ 0x90
 800060e:	4618      	mov	r0, r3
 8000610:	f003 f9df 	bl	80039d2 <memcpy>
        {1, 2, 1}, {1, 2, 3}, {1, 3, 1}, {1, 3, 2},
        {2, 1, 2}, {2, 1, 3}, {2, 3, 1}, {2, 3, 2},
        {3, 1, 2}, {3, 1, 3}, {3, 2, 1}, {3, 2, 3}
    };
    srand(HAL_GetTick());
 8000614:	f000 fda2 	bl	800115c <HAL_GetTick>
 8000618:	4603      	mov	r3, r0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 ffec 	bl	80035f8 <srand>
    int index = rand() % 12;
 8000620:	f003 f818 	bl	8003654 <rand>
 8000624:	4602      	mov	r2, r0
 8000626:	4b1a      	ldr	r3, [pc, #104]	@ (8000690 <GeneratePattern+0x90>)
 8000628:	fb83 1302 	smull	r1, r3, r3, r2
 800062c:	1059      	asrs	r1, r3, #1
 800062e:	17d3      	asrs	r3, r2, #31
 8000630:	1ac9      	subs	r1, r1, r3
 8000632:	460b      	mov	r3, r1
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	440b      	add	r3, r1
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    for (int i = 0; i < 3; i++) {
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000646:	e016      	b.n	8000676 <GeneratePattern+0x76>
        pattern[i] = patterns[index][i];
 8000648:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800064c:	4613      	mov	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	4413      	add	r3, r2
 8000652:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000656:	4413      	add	r3, r2
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	3398      	adds	r3, #152	@ 0x98
 800065c:	443b      	add	r3, r7
 800065e:	f853 2c98 	ldr.w	r2, [r3, #-152]
 8000662:	490c      	ldr	r1, [pc, #48]	@ (8000694 <GeneratePattern+0x94>)
 8000664:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 800066c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000670:	3301      	adds	r3, #1
 8000672:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000676:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800067a:	2b02      	cmp	r3, #2
 800067c:	dde4      	ble.n	8000648 <GeneratePattern+0x48>
    }
    step = 0;
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <GeneratePattern+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
}
 8000684:	bf00      	nop
 8000686:	3798      	adds	r7, #152	@ 0x98
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08004644 	.word	0x08004644
 8000690:	2aaaaaab 	.word	0x2aaaaaab
 8000694:	20000084 	.word	0x20000084
 8000698:	20000090 	.word	0x20000090

0800069c <LED_Status>:

void LED_Status(int index, int state) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
    GPIO_TypeDef *port;
    uint16_t pin;

    switch (index) {
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d015      	beq.n	80006d8 <LED_Status+0x3c>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	dc25      	bgt.n	80006fe <LED_Status+0x62>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d003      	beq.n	80006c0 <LED_Status+0x24>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d006      	beq.n	80006cc <LED_Status+0x30>
        case 1: port = GPIOC; pin = GPIO_PIN_10; break;
        case 2: port = GPIOC; pin = GPIO_PIN_11; break;
        case 3: port = GPIOC; pin = GPIO_PIN_12; break;
        default: return;
 80006be:	e01e      	b.n	80006fe <LED_Status+0x62>
        case 1: port = GPIOC; pin = GPIO_PIN_10; break;
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <LED_Status+0x6c>)
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c8:	817b      	strh	r3, [r7, #10]
 80006ca:	e00b      	b.n	80006e4 <LED_Status+0x48>
        case 2: port = GPIOC; pin = GPIO_PIN_11; break;
 80006cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <LED_Status+0x6c>)
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006d4:	817b      	strh	r3, [r7, #10]
 80006d6:	e005      	b.n	80006e4 <LED_Status+0x48>
        case 3: port = GPIOC; pin = GPIO_PIN_12; break;
 80006d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <LED_Status+0x6c>)
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e0:	817b      	strh	r3, [r7, #10]
 80006e2:	bf00      	nop
    }
    HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	bf14      	ite	ne
 80006ea:	2301      	movne	r3, #1
 80006ec:	2300      	moveq	r3, #0
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	461a      	mov	r2, r3
 80006f2:	897b      	ldrh	r3, [r7, #10]
 80006f4:	4619      	mov	r1, r3
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f000 ffd8 	bl	80016ac <HAL_GPIO_WritePin>
 80006fc:	e000      	b.n	8000700 <LED_Status+0x64>
        default: return;
 80006fe:	bf00      	nop
}
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	48000800 	.word	0x48000800

0800070c <BlinkLED>:

void BlinkLED(int led_status) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef *port = GPIOC;
 8000714:	4b15      	ldr	r3, [pc, #84]	@ (800076c <BlinkLED+0x60>)
 8000716:	613b      	str	r3, [r7, #16]
    uint16_t pin = (led_status == 0) ? GPIO_PIN_8 : GPIO_PIN_7; // 0 = LED_on, 1 = LED_off
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d102      	bne.n	8000724 <BlinkLED+0x18>
 800071e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000722:	e000      	b.n	8000726 <BlinkLED+0x1a>
 8000724:	2380      	movs	r3, #128	@ 0x80
 8000726:	81fb      	strh	r3, [r7, #14]

    for (int i = 0; i < 2; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	e016      	b.n	800075c <BlinkLED+0x50>
        HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 800072e:	89fb      	ldrh	r3, [r7, #14]
 8000730:	2201      	movs	r2, #1
 8000732:	4619      	mov	r1, r3
 8000734:	6938      	ldr	r0, [r7, #16]
 8000736:	f000 ffb9 	bl	80016ac <HAL_GPIO_WritePin>
        HAL_Delay(500);
 800073a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800073e:	f000 fd19 	bl	8001174 <HAL_Delay>
        HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8000742:	89fb      	ldrh	r3, [r7, #14]
 8000744:	2200      	movs	r2, #0
 8000746:	4619      	mov	r1, r3
 8000748:	6938      	ldr	r0, [r7, #16]
 800074a:	f000 ffaf 	bl	80016ac <HAL_GPIO_WritePin>
        HAL_Delay(500);
 800074e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000752:	f000 fd0f 	bl	8001174 <HAL_Delay>
    for (int i = 0; i < 2; i++) {
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	3301      	adds	r3, #1
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	2b01      	cmp	r3, #1
 8000760:	dde5      	ble.n	800072e <BlinkLED+0x22>
    }
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	48000800 	.word	0x48000800

08000770 <ProcessPattern>:

void ProcessPattern() {
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
    // เปิด LED ตาม pattern ที่กดไปแล้ว
    for (int i = 0; i < 3; i++) {
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e02b      	b.n	80007d4 <ProcessPattern+0x64>
        LED_Status(pattern[i], 1);
 800077c:	4a43      	ldr	r2, [pc, #268]	@ (800088c <ProcessPattern+0x11c>)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000784:	2101      	movs	r1, #1
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff88 	bl	800069c <LED_Status>
        while (!ReadButton(GPIOC, (pattern[i] == 1 ? GPIO_PIN_0 : pattern[i] == 2 ? GPIO_PIN_1 : GPIO_PIN_2)));
 800078c:	bf00      	nop
 800078e:	4a3f      	ldr	r2, [pc, #252]	@ (800088c <ProcessPattern+0x11c>)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d009      	beq.n	80007ae <ProcessPattern+0x3e>
 800079a:	4a3c      	ldr	r2, [pc, #240]	@ (800088c <ProcessPattern+0x11c>)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d101      	bne.n	80007aa <ProcessPattern+0x3a>
 80007a6:	2302      	movs	r3, #2
 80007a8:	e002      	b.n	80007b0 <ProcessPattern+0x40>
 80007aa:	2304      	movs	r3, #4
 80007ac:	e000      	b.n	80007b0 <ProcessPattern+0x40>
 80007ae:	2301      	movs	r3, #1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4837      	ldr	r0, [pc, #220]	@ (8000890 <ProcessPattern+0x120>)
 80007b4:	f000 f8c0 	bl	8000938 <ReadButton>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0e7      	beq.n	800078e <ProcessPattern+0x1e>
        LED_Status(pattern[i], 0);
 80007be:	4a33      	ldr	r2, [pc, #204]	@ (800088c <ProcessPattern+0x11c>)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff67 	bl	800069c <LED_Status>
    for (int i = 0; i < 3; i++) {
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	3301      	adds	r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	ddd0      	ble.n	800077c <ProcessPattern+0xc>
    }

    // สลับสถานะ LED_on / LED_off ตามรอบ
    if (round_flag == 0) {
 80007da:	4b2e      	ldr	r3, [pc, #184]	@ (8000894 <ProcessPattern+0x124>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d10c      	bne.n	80007fc <ProcessPattern+0x8c>
        HAL_GPIO_WritePin(GPIOC, LED_on_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e8:	4829      	ldr	r0, [pc, #164]	@ (8000890 <ProcessPattern+0x120>)
 80007ea:	f000 ff5f 	bl	80016ac <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, LED_off_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007f4:	4826      	ldr	r0, [pc, #152]	@ (8000890 <ProcessPattern+0x120>)
 80007f6:	f000 ff59 	bl	80016ac <HAL_GPIO_WritePin>
 80007fa:	e00b      	b.n	8000814 <ProcessPattern+0xa4>
    } else {
        HAL_GPIO_WritePin(GPIOC, LED_on_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000802:	4823      	ldr	r0, [pc, #140]	@ (8000890 <ProcessPattern+0x120>)
 8000804:	f000 ff52 	bl	80016ac <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, LED_off_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800080e:	4820      	ldr	r0, [pc, #128]	@ (8000890 <ProcessPattern+0x120>)
 8000810:	f000 ff4c 	bl	80016ac <HAL_GPIO_WritePin>
    }

    round_flag = !round_flag;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <ProcessPattern+0x124>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	bf0c      	ite	eq
 800081c:	2301      	moveq	r3, #1
 800081e:	2300      	movne	r3, #0
 8000820:	b2db      	uxtb	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <ProcessPattern+0x124>)
 8000826:	601a      	str	r2, [r3, #0]

    GeneratePattern();
 8000828:	f7ff feea 	bl	8000600 <GeneratePattern>

    uint32_t start_time = HAL_GetTick();
 800082c:	f000 fc96 	bl	800115c <HAL_GetTick>
 8000830:	60b8      	str	r0, [r7, #8]
    int current_index = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
    int led_state = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	603b      	str	r3, [r7, #0]

    while (current_index < 3) {
 800083a:	e01f      	b.n	800087c <ProcessPattern+0x10c>
        if (HAL_GetTick() - start_time >= 500) {
 800083c:	f000 fc8e 	bl	800115c <HAL_GetTick>
 8000840:	4602      	mov	r2, r0
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800084a:	d317      	bcc.n	800087c <ProcessPattern+0x10c>
            LED_Status(pattern[current_index], led_state);
 800084c:	4a0f      	ldr	r2, [pc, #60]	@ (800088c <ProcessPattern+0x11c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	6839      	ldr	r1, [r7, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff20 	bl	800069c <LED_Status>

            if (led_state == 0) {
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d102      	bne.n	8000868 <ProcessPattern+0xf8>
                current_index++;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3301      	adds	r3, #1
 8000866:	607b      	str	r3, [r7, #4]
            }

            led_state = !led_state;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	bf0c      	ite	eq
 800086e:	2301      	moveq	r3, #1
 8000870:	2300      	movne	r3, #0
 8000872:	b2db      	uxtb	r3, r3
 8000874:	603b      	str	r3, [r7, #0]
            start_time = HAL_GetTick();
 8000876:	f000 fc71 	bl	800115c <HAL_GetTick>
 800087a:	60b8      	str	r0, [r7, #8]
    while (current_index < 3) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b02      	cmp	r3, #2
 8000880:	dddc      	ble.n	800083c <ProcessPattern+0xcc>
        }
    }
}
 8000882:	bf00      	nop
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000084 	.word	0x20000084
 8000890:	48000800 	.word	0x48000800
 8000894:	20000094 	.word	0x20000094

08000898 <CheckInput>:

void CheckInput() {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
    int pressed = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) ||
 800089e:	2101      	movs	r1, #1
 80008a0:	4821      	ldr	r0, [pc, #132]	@ (8000928 <CheckInput+0x90>)
 80008a2:	f000 feeb 	bl	800167c <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
                  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) ||
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d10d      	bne.n	80008c8 <CheckInput+0x30>
 80008ac:	2102      	movs	r1, #2
 80008ae:	481e      	ldr	r0, [pc, #120]	@ (8000928 <CheckInput+0x90>)
 80008b0:	f000 fee4 	bl	800167c <HAL_GPIO_ReadPin>
 80008b4:	4603      	mov	r3, r0
    int pressed = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) ||
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d106      	bne.n	80008c8 <CheckInput+0x30>
                  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 80008ba:	2104      	movs	r1, #4
 80008bc:	481a      	ldr	r0, [pc, #104]	@ (8000928 <CheckInput+0x90>)
 80008be:	f000 fedd 	bl	800167c <HAL_GPIO_ReadPin>
 80008c2:	4603      	mov	r3, r0
                  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) ||
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <CheckInput+0x34>
 80008c8:	2301      	movs	r3, #1
 80008ca:	e000      	b.n	80008ce <CheckInput+0x36>
 80008cc:	2300      	movs	r3, #0
    int pressed = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) ||
 80008ce:	607b      	str	r3, [r7, #4]

    if (pressed) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d024      	beq.n	8000920 <CheckInput+0x88>
        int correct_op = (pattern[step] == 1) ? GPIO_PIN_0 :
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <CheckInput+0x94>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a15      	ldr	r2, [pc, #84]	@ (8000930 <CheckInput+0x98>)
 80008dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d00a      	beq.n	80008fa <CheckInput+0x62>
                         (pattern[step] == 2) ? GPIO_PIN_1 : GPIO_PIN_2;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <CheckInput+0x94>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a11      	ldr	r2, [pc, #68]	@ (8000930 <CheckInput+0x98>)
 80008ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d101      	bne.n	80008f6 <CheckInput+0x5e>
 80008f2:	2302      	movs	r3, #2
 80008f4:	e002      	b.n	80008fc <CheckInput+0x64>
 80008f6:	2304      	movs	r3, #4
 80008f8:	e000      	b.n	80008fc <CheckInput+0x64>
        int correct_op = (pattern[step] == 1) ? GPIO_PIN_0 :
 80008fa:	2301      	movs	r3, #1
 80008fc:	603b      	str	r3, [r7, #0]

        if (HAL_GPIO_ReadPin(GPIOC, correct_op)) {
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b29b      	uxth	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	4808      	ldr	r0, [pc, #32]	@ (8000928 <CheckInput+0x90>)
 8000906:	f000 feb9 	bl	800167c <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d002      	beq.n	8000916 <CheckInput+0x7e>
            ProcessPattern();
 8000910:	f7ff ff2e 	bl	8000770 <ProcessPattern>
        } else {
            BlinkLED(round_flag);
        }
    }
}
 8000914:	e004      	b.n	8000920 <CheckInput+0x88>
            BlinkLED(round_flag);
 8000916:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <CheckInput+0x9c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fef6 	bl	800070c <BlinkLED>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	48000800 	.word	0x48000800
 800092c:	20000090 	.word	0x20000090
 8000930:	20000084 	.word	0x20000084
 8000934:	20000094 	.word	0x20000094

08000938 <ReadButton>:

uint8_t ReadButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	807b      	strh	r3, [r7, #2]
    uint32_t start_time = HAL_GetTick();
 8000944:	f000 fc0a 	bl	800115c <HAL_GetTick>
 8000948:	60f8      	str	r0, [r7, #12]

    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 800094a:	e012      	b.n	8000972 <ReadButton+0x3a>
        if (HAL_GetTick() - start_time >= 500) {
 800094c:	f000 fc06 	bl	800115c <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800095a:	d30a      	bcc.n	8000972 <ReadButton+0x3a>
            while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET);  // รอจนปล่อยปุ่ม
 800095c:	bf00      	nop
 800095e:	887b      	ldrh	r3, [r7, #2]
 8000960:	4619      	mov	r1, r3
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 fe8a 	bl	800167c <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d0f7      	beq.n	800095e <ReadButton+0x26>
            return 1;
 800096e:	2301      	movs	r3, #1
 8000970:	e008      	b.n	8000984 <ReadButton+0x4c>
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 8000972:	887b      	ldrh	r3, [r7, #2]
 8000974:	4619      	mov	r1, r3
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 fe80 	bl	800167c <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d0e4      	beq.n	800094c <ReadButton+0x14>
        }
    }
    return 0;
 8000982:	2300      	movs	r3, #0
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000990:	f000 fb74 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f80b 	bl	80009ae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 f8c8 	bl	8000b2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800099c:	f000 f896 	bl	8000acc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80009a0:	f000 f856 	bl	8000a50 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  WaitForStart();
 80009a4:	f7ff fde4 	bl	8000570 <WaitForStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      CheckInput(); // ตรวจจับการกดปุ่มและดำเนินการตามแพทเทิร์น
 80009a8:	f7ff ff76 	bl	8000898 <CheckInput>
 80009ac:	e7fc      	b.n	80009a8 <main+0x1c>

080009ae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b096      	sub	sp, #88	@ 0x58
 80009b2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2244      	movs	r2, #68	@ 0x44
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 ff8c 	bl	80038da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009d0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009d4:	f000 fe90 	bl	80016f8 <HAL_PWREx_ControlVoltageScaling>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009de:	f000 f951 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e2:	2302      	movs	r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80009ec:	2340      	movs	r3, #64	@ 0x40
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f0:	2302      	movs	r3, #2
 80009f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f4:	2302      	movs	r3, #2
 80009f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009fc:	230a      	movs	r3, #10
 80009fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a00:	2307      	movs	r3, #7
 8000a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fec7 	bl	80017a4 <HAL_RCC_OscConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a1c:	f000 f932 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	230f      	movs	r3, #15
 8000a22:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a24:	2303      	movs	r3, #3
 8000a26:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a34:	463b      	mov	r3, r7
 8000a36:	2104      	movs	r1, #4
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fac7 	bl	8001fcc <HAL_RCC_ClockConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a44:	f000 f91e 	bl	8000c84 <Error_Handler>
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3758      	adds	r7, #88	@ 0x58
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a56:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac8 <MX_SPI1_Init+0x78>)
 8000a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a68:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a6a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000a6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000a9e:	2207      	movs	r2, #7
 8000aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000aaa:	2208      	movs	r2, #8
 8000aac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_SPI1_Init+0x74>)
 8000ab0:	f002 f80e 	bl	8002ad0 <HAL_SPI_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000aba:	f000 f8e3 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000009c 	.word	0x2000009c
 8000ac8:	40013000 	.word	0x40013000

08000acc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000ad2:	4a15      	ldr	r2, [pc, #84]	@ (8000b28 <MX_USART2_UART_Init+0x5c>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_USART2_UART_Init+0x58>)
 8000b10:	f002 f881 	bl	8002c16 <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b1a:	f000 f8b3 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000100 	.word	0x20000100
 8000b28:	40004400 	.word	0x40004400

08000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	@ 0x28
 8000b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	4b4d      	ldr	r3, [pc, #308]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a4c      	ldr	r2, [pc, #304]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5a:	4b47      	ldr	r3, [pc, #284]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a46      	ldr	r2, [pc, #280]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b44      	ldr	r3, [pc, #272]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b41      	ldr	r3, [pc, #260]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	4a40      	ldr	r2, [pc, #256]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	4a3a      	ldr	r2, [pc, #232]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b96:	4b38      	ldr	r3, [pc, #224]	@ (8000c78 <MX_GPIO_Init+0x14c>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	21b0      	movs	r1, #176	@ 0xb0
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000baa:	f000 fd7f 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb4:	4831      	ldr	r0, [pc, #196]	@ (8000c7c <MX_GPIO_Init+0x150>)
 8000bb6:	f000 fd79 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_on_Pin|LED_off_Pin|LED_1_Pin|LED_2_Pin
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 8000bc0:	482f      	ldr	r0, [pc, #188]	@ (8000c80 <MX_GPIO_Init+0x154>)
 8000bc2:	f000 fd73 	bl	80016ac <HAL_GPIO_WritePin>
                          |LED_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bcc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4828      	ldr	r0, [pc, #160]	@ (8000c80 <MX_GPIO_Init+0x154>)
 8000bde:	f000 fbd3 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : OP1_Pin OP2_Pin OP3_Pin */
  GPIO_InitStruct.Pin = OP1_Pin|OP2_Pin|OP3_Pin;
 8000be2:	2307      	movs	r3, #7
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4822      	ldr	r0, [pc, #136]	@ (8000c80 <MX_GPIO_Init+0x154>)
 8000bf6:	f000 fbc7 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000bfa:	23b0      	movs	r3, #176	@ 0xb0
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c14:	f000 fbb8 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000c18:	2340      	movs	r3, #64	@ 0x40
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2e:	f000 fbab 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000c32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <MX_GPIO_Init+0x150>)
 8000c4c:	f000 fb9c 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_on_Pin LED_off_Pin LED_1_Pin LED_2_Pin
                           LED_3_Pin */
  GPIO_InitStruct.Pin = LED_on_Pin|LED_off_Pin|LED_1_Pin|LED_2_Pin
 8000c50:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000c54:	617b      	str	r3, [r7, #20]
                          |LED_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_GPIO_Init+0x154>)
 8000c6a:	f000 fb8d 	bl	8001388 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	@ 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	48000400 	.word	0x48000400
 8000c80:	48000800 	.word	0x48000800

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <Error_Handler+0x8>

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb2:	4a08      	ldr	r2, [pc, #32]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	@ 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a18      	ldr	r2, [pc, #96]	@ (8000d58 <HAL_SPI_MspInit+0x80>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d129      	bne.n	8000d4e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfa:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <HAL_SPI_MspInit+0x84>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfe:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <HAL_SPI_MspInit+0x84>)
 8000d00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <HAL_SPI_MspInit+0x84>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <HAL_SPI_MspInit+0x84>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d16:	4a11      	ldr	r2, [pc, #68]	@ (8000d5c <HAL_SPI_MspInit+0x84>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <HAL_SPI_MspInit+0x84>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8000d2a:	f641 0302 	movw	r3, #6146	@ 0x1802
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3c:	2305      	movs	r3, #5
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4a:	f000 fb1d 	bl	8001388 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	@ 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40013000 	.word	0x40013000
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0a4      	sub	sp, #144	@ 0x90
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2268      	movs	r2, #104	@ 0x68
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 fdaa 	bl	80038da <memset>
  if(huart->Instance==USART2)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a21      	ldr	r2, [pc, #132]	@ (8000e10 <HAL_UART_MspInit+0xb0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d13a      	bne.n	8000e06 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f001 fb39 	bl	8002414 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000da8:	f7ff ff6c 	bl	8000c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dac:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <HAL_UART_MspInit+0xb4>)
 8000dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db0:	4a18      	ldr	r2, [pc, #96]	@ (8000e14 <HAL_UART_MspInit+0xb4>)
 8000db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db8:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <HAL_UART_MspInit+0xb4>)
 8000dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <HAL_UART_MspInit+0xb4>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc8:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <HAL_UART_MspInit+0xb4>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd0:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <HAL_UART_MspInit+0xb4>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ddc:	230c      	movs	r3, #12
 8000dde:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df2:	2307      	movs	r3, #7
 8000df4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e02:	f000 fac1 	bl	8001388 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e06:	bf00      	nop
 8000e08:	3790      	adds	r7, #144	@ 0x90
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40004400 	.word	0x40004400
 8000e14:	40021000 	.word	0x40021000

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <NMI_Handler+0x4>

08000e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <MemManage_Handler+0x4>

08000e30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6e:	f000 f961 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  return 1;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_kill>:

int _kill(int pid, int sig)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e90:	f002 fd72 	bl	8003978 <__errno>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2216      	movs	r2, #22
 8000e98:	601a      	str	r2, [r3, #0]
  return -1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_exit>:

void _exit (int status)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eae:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffe7 	bl	8000e86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <_exit+0x12>

08000ebc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	e00a      	b.n	8000ee4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ece:	f3af 8000 	nop.w
 8000ed2:	4601      	mov	r1, r0
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	60ba      	str	r2, [r7, #8]
 8000eda:	b2ca      	uxtb	r2, r1
 8000edc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbf0      	blt.n	8000ece <_read+0x12>
  }

  return len;
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	e009      	b.n	8000f1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbf1      	blt.n	8000f08 <_write+0x12>
  }
  return len;
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_close>:

int _close(int file)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f56:	605a      	str	r2, [r3, #4]
  return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_isatty>:

int _isatty(int file)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	@ (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d207      	bcs.n	8000fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc8:	f002 fcd6 	bl	8003978 <__errno>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	e009      	b.n	8000fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a05      	ldr	r2, [pc, #20]	@ (8000ffc <_sbrk+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20028000 	.word	0x20028000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	20000188 	.word	0x20000188
 8001000:	200002e0 	.word	0x200002e0

08001004 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	@ (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001060 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800102c:	f7ff ffea 	bl	8001004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	@ (8001064 <LoopForever+0x6>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	@ (8001068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <LoopForever+0xe>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	@ (8001074 <LoopForever+0x16>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001056:	f002 fc95 	bl	8003984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800105a:	f7ff fc97 	bl	800098c <main>

0800105e <LoopForever>:

LoopForever:
    b LoopForever
 800105e:	e7fe      	b.n	800105e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001060:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800106c:	0800480c 	.word	0x0800480c
  ldr r2, =_sbss
 8001070:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001074:	200002dc 	.word	0x200002dc

08001078 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC1_IRQHandler>
	...

0800107c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_Init+0x3c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a0b      	ldr	r2, [pc, #44]	@ (80010b8 <HAL_Init+0x3c>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001090:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001092:	2003      	movs	r0, #3
 8001094:	f000 f944 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001098:	2000      	movs	r0, #0
 800109a:	f000 f80f 	bl	80010bc <HAL_InitTick>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	e001      	b.n	80010ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010aa:	f7ff fdf1 	bl	8000c90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40022000 	.word	0x40022000

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <HAL_InitTick+0x6c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d023      	beq.n	8001118 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010d0:	4b16      	ldr	r3, [pc, #88]	@ (800112c <HAL_InitTick+0x70>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <HAL_InitTick+0x6c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f941 	bl	800136e <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10f      	bne.n	8001112 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d809      	bhi.n	800110c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f000 f919 	bl	8001336 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001104:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <HAL_InitTick+0x74>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e007      	b.n	800111c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e004      	b.n	800111c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	e001      	b.n	800111c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	20000000 	.word	0x20000000
 8001130:	20000004 	.word	0x20000004

08001134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008
 8001158:	2000018c 	.word	0x2000018c

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	2000018c 	.word	0x2000018c

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff ffee 	bl	800115c <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_Delay+0x44>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119a:	bf00      	nop
 800119c:	f7ff ffde 	bl	800115c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008

080011bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d8:	4013      	ands	r3, r2
 80011da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001208:	4b04      	ldr	r3, [pc, #16]	@ (800121c <__NVIC_GetPriorityGrouping+0x18>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	f003 0307 	and.w	r3, r3, #7
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	@ (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	@ (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	@ 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
         );
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	@ 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	@ (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f7ff ff8e 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	@ (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff47 	bl	80011bc <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff5c 	bl	8001204 <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff8e 	bl	8001274 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5d 	bl	8001220 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffb0 	bl	80012dc <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001396:	e154      	b.n	8001642 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	4013      	ands	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8146 	beq.w	800163c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d005      	beq.n	80013c8 <HAL_GPIO_Init+0x40>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d130      	bne.n	800142a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fe:	2201      	movs	r2, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f003 0201 	and.w	r2, r3, #1
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b03      	cmp	r3, #3
 8001434:	d017      	beq.n	8001466 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d123      	bne.n	80014ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	08da      	lsrs	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3208      	adds	r2, #8
 800147a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	691a      	ldr	r2, [r3, #16]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	08da      	lsrs	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3208      	adds	r2, #8
 80014b4:	6939      	ldr	r1, [r7, #16]
 80014b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0203 	and.w	r2, r3, #3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80a0 	beq.w	800163c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fc:	4b58      	ldr	r3, [pc, #352]	@ (8001660 <HAL_GPIO_Init+0x2d8>)
 80014fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001500:	4a57      	ldr	r2, [pc, #348]	@ (8001660 <HAL_GPIO_Init+0x2d8>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6613      	str	r3, [r2, #96]	@ 0x60
 8001508:	4b55      	ldr	r3, [pc, #340]	@ (8001660 <HAL_GPIO_Init+0x2d8>)
 800150a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001514:	4a53      	ldr	r2, [pc, #332]	@ (8001664 <HAL_GPIO_Init+0x2dc>)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800153e:	d019      	beq.n	8001574 <HAL_GPIO_Init+0x1ec>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a49      	ldr	r2, [pc, #292]	@ (8001668 <HAL_GPIO_Init+0x2e0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d013      	beq.n	8001570 <HAL_GPIO_Init+0x1e8>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a48      	ldr	r2, [pc, #288]	@ (800166c <HAL_GPIO_Init+0x2e4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d00d      	beq.n	800156c <HAL_GPIO_Init+0x1e4>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a47      	ldr	r2, [pc, #284]	@ (8001670 <HAL_GPIO_Init+0x2e8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d007      	beq.n	8001568 <HAL_GPIO_Init+0x1e0>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a46      	ldr	r2, [pc, #280]	@ (8001674 <HAL_GPIO_Init+0x2ec>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d101      	bne.n	8001564 <HAL_GPIO_Init+0x1dc>
 8001560:	2304      	movs	r3, #4
 8001562:	e008      	b.n	8001576 <HAL_GPIO_Init+0x1ee>
 8001564:	2307      	movs	r3, #7
 8001566:	e006      	b.n	8001576 <HAL_GPIO_Init+0x1ee>
 8001568:	2303      	movs	r3, #3
 800156a:	e004      	b.n	8001576 <HAL_GPIO_Init+0x1ee>
 800156c:	2302      	movs	r3, #2
 800156e:	e002      	b.n	8001576 <HAL_GPIO_Init+0x1ee>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_GPIO_Init+0x1ee>
 8001574:	2300      	movs	r3, #0
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	f002 0203 	and.w	r2, r2, #3
 800157c:	0092      	lsls	r2, r2, #2
 800157e:	4093      	lsls	r3, r2
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001586:	4937      	ldr	r1, [pc, #220]	@ (8001664 <HAL_GPIO_Init+0x2dc>)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001594:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015be:	4b2e      	ldr	r3, [pc, #184]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e2:	4a25      	ldr	r2, [pc, #148]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015e8:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800160c:	4a1a      	ldr	r2, [pc, #104]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001612:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001636:	4a10      	ldr	r2, [pc, #64]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3301      	adds	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	f47f aea3 	bne.w	8001398 <HAL_GPIO_Init+0x10>
  }
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000
 8001668:	48000400 	.word	0x48000400
 800166c:	48000800 	.word	0x48000800
 8001670:	48000c00 	.word	0x48000c00
 8001674:	48001000 	.word	0x48001000
 8001678:	40010400 	.word	0x40010400

0800167c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	4013      	ands	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	e001      	b.n	800169e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016bc:	787b      	ldrb	r3, [r7, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016c8:	e002      	b.n	80016d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016e0:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40007000 	.word	0x40007000

080016f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001706:	d130      	bne.n	800176a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001708:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001714:	d038      	beq.n	8001788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800171e:	4a1e      	ldr	r2, [pc, #120]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001720:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001724:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001726:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2232      	movs	r2, #50	@ 0x32
 800172c:	fb02 f303 	mul.w	r3, r2, r3
 8001730:	4a1b      	ldr	r2, [pc, #108]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0c9b      	lsrs	r3, r3, #18
 8001738:	3301      	adds	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800173c:	e002      	b.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3b01      	subs	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800174c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001750:	d102      	bne.n	8001758 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f2      	bne.n	800173e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001758:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001764:	d110      	bne.n	8001788 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e00f      	b.n	800178a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800176a:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001776:	d007      	beq.n	8001788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001778:	4b07      	ldr	r3, [pc, #28]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001780:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001782:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001786:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40007000 	.word	0x40007000
 800179c:	20000000 	.word	0x20000000
 80017a0:	431bde83 	.word	0x431bde83

080017a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f000 bc02 	b.w	8001fbc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b8:	4b96      	ldr	r3, [pc, #600]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017c2:	4b94      	ldr	r3, [pc, #592]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80e4 	beq.w	80019a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <HAL_RCC_OscConfig+0x4c>
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2b0c      	cmp	r3, #12
 80017e4:	f040 808b 	bne.w	80018fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	f040 8087 	bne.w	80018fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017f0:	4b88      	ldr	r3, [pc, #544]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_OscConfig+0x64>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e3d9      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1a      	ldr	r2, [r3, #32]
 800180c:	4b81      	ldr	r3, [pc, #516]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <HAL_RCC_OscConfig+0x7e>
 8001818:	4b7e      	ldr	r3, [pc, #504]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001820:	e005      	b.n	800182e <HAL_RCC_OscConfig+0x8a>
 8001822:	4b7c      	ldr	r3, [pc, #496]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800182e:	4293      	cmp	r3, r2
 8001830:	d223      	bcs.n	800187a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4618      	mov	r0, r3
 8001838:	f000 fd8c 	bl	8002354 <RCC_SetFlashLatencyFromMSIRange>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e3ba      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001846:	4b73      	ldr	r3, [pc, #460]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a72      	ldr	r2, [pc, #456]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b70      	ldr	r3, [pc, #448]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	496d      	ldr	r1, [pc, #436]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001864:	4b6b      	ldr	r3, [pc, #428]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	4968      	ldr	r1, [pc, #416]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
 8001878:	e025      	b.n	80018c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800187a:	4b66      	ldr	r3, [pc, #408]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a65      	ldr	r2, [pc, #404]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b63      	ldr	r3, [pc, #396]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4960      	ldr	r1, [pc, #384]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001898:	4b5e      	ldr	r3, [pc, #376]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	495b      	ldr	r1, [pc, #364]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 fd4c 	bl	8002354 <RCC_SetFlashLatencyFromMSIRange>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e37a      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018c6:	f000 fc81 	bl	80021cc <HAL_RCC_GetSysClockFreq>
 80018ca:	4602      	mov	r2, r0
 80018cc:	4b51      	ldr	r3, [pc, #324]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	4950      	ldr	r1, [pc, #320]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80018d8:	5ccb      	ldrb	r3, [r1, r3]
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	4a4e      	ldr	r2, [pc, #312]	@ (8001a1c <HAL_RCC_OscConfig+0x278>)
 80018e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fbe6 	bl	80010bc <HAL_InitTick>
 80018f0:	4603      	mov	r3, r0
 80018f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d052      	beq.n	80019a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	e35e      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d032      	beq.n	800196c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001906:	4b43      	ldr	r3, [pc, #268]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a42      	ldr	r2, [pc, #264]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001912:	f7ff fc23 	bl	800115c <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800191a:	f7ff fc1f 	bl	800115c <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e347      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800192c:	4b39      	ldr	r3, [pc, #228]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001938:	4b36      	ldr	r3, [pc, #216]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a35      	ldr	r2, [pc, #212]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 800193e:	f043 0308 	orr.w	r3, r3, #8
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b33      	ldr	r3, [pc, #204]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	4930      	ldr	r1, [pc, #192]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001956:	4b2f      	ldr	r3, [pc, #188]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	492b      	ldr	r1, [pc, #172]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]
 800196a:	e01a      	b.n	80019a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800196c:	4b29      	ldr	r3, [pc, #164]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a28      	ldr	r2, [pc, #160]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001978:	f7ff fbf0 	bl	800115c <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001980:	f7ff fbec 	bl	800115c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e314      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001992:	4b20      	ldr	r3, [pc, #128]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x1dc>
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d073      	beq.n	8001a96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_OscConfig+0x21c>
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d10e      	bne.n	80019d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d10b      	bne.n	80019d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	4b14      	ldr	r3, [pc, #80]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d063      	beq.n	8001a94 <HAL_RCC_OscConfig+0x2f0>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d15f      	bne.n	8001a94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e2f1      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e0:	d106      	bne.n	80019f0 <HAL_RCC_OscConfig+0x24c>
 80019e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e025      	b.n	8001a3c <HAL_RCC_OscConfig+0x298>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019f8:	d114      	bne.n	8001a24 <HAL_RCC_OscConfig+0x280>
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a05      	ldr	r2, [pc, #20]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a02      	ldr	r2, [pc, #8]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e013      	b.n	8001a3c <HAL_RCC_OscConfig+0x298>
 8001a14:	40021000 	.word	0x40021000
 8001a18:	080046d4 	.word	0x080046d4
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000004 	.word	0x20000004
 8001a24:	4ba0      	ldr	r3, [pc, #640]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a9f      	ldr	r2, [pc, #636]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b9d      	ldr	r3, [pc, #628]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a9c      	ldr	r2, [pc, #624]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff fb8a 	bl	800115c <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fb86 	bl	800115c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	@ 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e2ae      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a5e:	4b92      	ldr	r3, [pc, #584]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x2a8>
 8001a6a:	e014      	b.n	8001a96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fb76 	bl	800115c <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff fb72 	bl	800115c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	@ 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e29a      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a86:	4b88      	ldr	r3, [pc, #544]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x2d0>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d060      	beq.n	8001b64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x310>
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d119      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d116      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_OscConfig+0x328>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e277      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001acc:	4b76      	ldr	r3, [pc, #472]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	061b      	lsls	r3, r3, #24
 8001ada:	4973      	ldr	r1, [pc, #460]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae0:	e040      	b.n	8001b64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d023      	beq.n	8001b32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aea:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a6e      	ldr	r2, [pc, #440]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff fb31 	bl	800115c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff fb2d 	bl	800115c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e255      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b10:	4b65      	ldr	r3, [pc, #404]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1c:	4b62      	ldr	r3, [pc, #392]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	061b      	lsls	r3, r3, #24
 8001b2a:	495f      	ldr	r1, [pc, #380]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
 8001b30:	e018      	b.n	8001b64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b32:	4b5d      	ldr	r3, [pc, #372]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fb0d 	bl	800115c <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b46:	f7ff fb09 	bl	800115c <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e231      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b58:	4b53      	ldr	r3, [pc, #332]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d03c      	beq.n	8001bea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b78:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b7e:	4a4a      	ldr	r2, [pc, #296]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff fae8 	bl	800115c <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b90:	f7ff fae4 	bl	800115c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e20c      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba2:	4b41      	ldr	r3, [pc, #260]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0ef      	beq.n	8001b90 <HAL_RCC_OscConfig+0x3ec>
 8001bb0:	e01b      	b.n	8001bea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff facb 	bl	800115c <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bca:	f7ff fac7 	bl	800115c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e1ef      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bdc:	4b32      	ldr	r3, [pc, #200]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ef      	bne.n	8001bca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80a6 	beq.w	8001d44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10d      	bne.n	8001c24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c08:	4b27      	ldr	r3, [pc, #156]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0c:	4a26      	ldr	r2, [pc, #152]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c14:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c20:	2301      	movs	r3, #1
 8001c22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c24:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_RCC_OscConfig+0x508>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d118      	bne.n	8001c62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c30:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <HAL_RCC_OscConfig+0x508>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1d      	ldr	r2, [pc, #116]	@ (8001cac <HAL_RCC_OscConfig+0x508>)
 8001c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3c:	f7ff fa8e 	bl	800115c <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c44:	f7ff fa8a 	bl	800115c <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1b2      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c56:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <HAL_RCC_OscConfig+0x508>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d108      	bne.n	8001c7c <HAL_RCC_OscConfig+0x4d8>
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c7a:	e029      	b.n	8001cd0 <HAL_RCC_OscConfig+0x52c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	d115      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x50c>
 8001c84:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8a:	4a07      	ldr	r2, [pc, #28]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c9a:	4a03      	ldr	r2, [pc, #12]	@ (8001ca8 <HAL_RCC_OscConfig+0x504>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ca4:	e014      	b.n	8001cd0 <HAL_RCC_OscConfig+0x52c>
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40007000 	.word	0x40007000
 8001cb0:	4b9a      	ldr	r3, [pc, #616]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb6:	4a99      	ldr	r2, [pc, #612]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cc0:	4b96      	ldr	r3, [pc, #600]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc6:	4a95      	ldr	r2, [pc, #596]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d016      	beq.n	8001d06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fa40 	bl	800115c <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fa3c 	bl	800115c <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e162      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf6:	4b89      	ldr	r3, [pc, #548]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0ed      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x53c>
 8001d04:	e015      	b.n	8001d32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d06:	f7ff fa29 	bl	800115c <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d0c:	e00a      	b.n	8001d24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7ff fa25 	bl	800115c <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e14b      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d24:	4b7d      	ldr	r3, [pc, #500]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1ed      	bne.n	8001d0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d32:	7ffb      	ldrb	r3, [r7, #31]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d105      	bne.n	8001d44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d38:	4b78      	ldr	r3, [pc, #480]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3c:	4a77      	ldr	r2, [pc, #476]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001d3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d03c      	beq.n	8001dca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01c      	beq.n	8001d92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d58:	4b70      	ldr	r3, [pc, #448]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d5e:	4a6f      	ldr	r2, [pc, #444]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff f9f8 	bl	800115c <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d70:	f7ff f9f4 	bl	800115c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e11c      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d82:	4b66      	ldr	r3, [pc, #408]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0ef      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5cc>
 8001d90:	e01b      	b.n	8001dca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d92:	4b62      	ldr	r3, [pc, #392]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d98:	4a60      	ldr	r2, [pc, #384]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da2:	f7ff f9db 	bl	800115c <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001daa:	f7ff f9d7 	bl	800115c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0ff      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dbc:	4b57      	ldr	r3, [pc, #348]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1ef      	bne.n	8001daa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80f3 	beq.w	8001fba <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	f040 80c9 	bne.w	8001f70 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dde:	4b4f      	ldr	r3, [pc, #316]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 0203 	and.w	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d12c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d123      	bne.n	8001e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d11b      	bne.n	8001e4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d113      	bne.n	8001e4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	3b01      	subs	r3, #1
 8001e32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d109      	bne.n	8001e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	3b01      	subs	r3, #1
 8001e46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d06b      	beq.n	8001f24 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	d062      	beq.n	8001f18 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e52:	4b32      	ldr	r3, [pc, #200]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e0ac      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e62:	4b2e      	ldr	r3, [pc, #184]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a2d      	ldr	r2, [pc, #180]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001e68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e6e:	f7ff f975 	bl	800115c <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7ff f971 	bl	800115c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e099      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e88:	4b24      	ldr	r3, [pc, #144]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e94:	4b21      	ldr	r3, [pc, #132]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <HAL_RCC_OscConfig+0x77c>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ea4:	3a01      	subs	r2, #1
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	4311      	orrs	r1, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001eae:	0212      	lsls	r2, r2, #8
 8001eb0:	4311      	orrs	r1, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001eb6:	0852      	lsrs	r2, r2, #1
 8001eb8:	3a01      	subs	r2, #1
 8001eba:	0552      	lsls	r2, r2, #21
 8001ebc:	4311      	orrs	r1, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ec2:	0852      	lsrs	r2, r2, #1
 8001ec4:	3a01      	subs	r2, #1
 8001ec6:	0652      	lsls	r2, r2, #25
 8001ec8:	4311      	orrs	r1, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ece:	06d2      	lsls	r2, r2, #27
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	4912      	ldr	r1, [pc, #72]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ed8:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0f      	ldr	r2, [pc, #60]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001ede:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ee2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ef0:	f7ff f934 	bl	800115c <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff f930 	bl	800115c <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e058      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0a:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <HAL_RCC_OscConfig+0x778>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f16:	e050      	b.n	8001fba <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e04f      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f24:	4b27      	ldr	r3, [pc, #156]	@ (8001fc4 <HAL_RCC_OscConfig+0x820>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d144      	bne.n	8001fba <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f30:	4b24      	ldr	r3, [pc, #144]	@ (8001fc4 <HAL_RCC_OscConfig+0x820>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a23      	ldr	r2, [pc, #140]	@ (8001fc4 <HAL_RCC_OscConfig+0x820>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f3c:	4b21      	ldr	r3, [pc, #132]	@ (8001fc4 <HAL_RCC_OscConfig+0x820>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a20      	ldr	r2, [pc, #128]	@ (8001fc4 <HAL_RCC_OscConfig+0x820>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f48:	f7ff f908 	bl	800115c <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff f904 	bl	800115c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e02c      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <HAL_RCC_OscConfig+0x820>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x7ac>
 8001f6e:	e024      	b.n	8001fba <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d01f      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <HAL_RCC_OscConfig+0x820>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a12      	ldr	r2, [pc, #72]	@ (8001fc4 <HAL_RCC_OscConfig+0x820>)
 8001f7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff f8eb 	bl	800115c <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7ff f8e7 	bl	800115c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e00f      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f9c:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <HAL_RCC_OscConfig+0x820>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f0      	bne.n	8001f8a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_RCC_OscConfig+0x820>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	4905      	ldr	r1, [pc, #20]	@ (8001fc4 <HAL_RCC_OscConfig+0x820>)
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_RCC_OscConfig+0x824>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60cb      	str	r3, [r1, #12]
 8001fb4:	e001      	b.n	8001fba <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	feeefffc 	.word	0xfeeefffc

08001fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0e7      	b.n	80021b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b75      	ldr	r3, [pc, #468]	@ (80021b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d910      	bls.n	8002010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b72      	ldr	r3, [pc, #456]	@ (80021b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 0207 	bic.w	r2, r3, #7
 8001ff6:	4970      	ldr	r1, [pc, #448]	@ (80021b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b6e      	ldr	r3, [pc, #440]	@ (80021b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0cf      	b.n	80021b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	4b66      	ldr	r3, [pc, #408]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002028:	429a      	cmp	r2, r3
 800202a:	d908      	bls.n	800203e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202c:	4b63      	ldr	r3, [pc, #396]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4960      	ldr	r1, [pc, #384]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d04c      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b03      	cmp	r3, #3
 8002050:	d107      	bne.n	8002062 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002052:	4b5a      	ldr	r3, [pc, #360]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d121      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e0a6      	b.n	80021b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206a:	4b54      	ldr	r3, [pc, #336]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d115      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e09a      	b.n	80021b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002082:	4b4e      	ldr	r3, [pc, #312]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e08e      	b.n	80021b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002092:	4b4a      	ldr	r3, [pc, #296]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e086      	b.n	80021b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020a2:	4b46      	ldr	r3, [pc, #280]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f023 0203 	bic.w	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4943      	ldr	r1, [pc, #268]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b4:	f7ff f852 	bl	800115c <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020bc:	f7ff f84e 	bl	800115c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e06e      	b.n	80021b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	4b3a      	ldr	r3, [pc, #232]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 020c 	and.w	r2, r3, #12
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d1eb      	bne.n	80020bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d010      	beq.n	8002112 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	4b31      	ldr	r3, [pc, #196]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d208      	bcs.n	8002112 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002100:	4b2e      	ldr	r3, [pc, #184]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	492b      	ldr	r1, [pc, #172]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002112:	4b29      	ldr	r3, [pc, #164]	@ (80021b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d210      	bcs.n	8002142 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002120:	4b25      	ldr	r3, [pc, #148]	@ (80021b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f023 0207 	bic.w	r2, r3, #7
 8002128:	4923      	ldr	r1, [pc, #140]	@ (80021b8 <HAL_RCC_ClockConfig+0x1ec>)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002130:	4b21      	ldr	r3, [pc, #132]	@ (80021b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d001      	beq.n	8002142 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e036      	b.n	80021b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800214e:	4b1b      	ldr	r3, [pc, #108]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	4918      	ldr	r1, [pc, #96]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	4313      	orrs	r3, r2
 800215e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d009      	beq.n	8002180 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800216c:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4910      	ldr	r1, [pc, #64]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 800217c:	4313      	orrs	r3, r2
 800217e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002180:	f000 f824 	bl	80021cc <HAL_RCC_GetSysClockFreq>
 8002184:	4602      	mov	r2, r0
 8002186:	4b0d      	ldr	r3, [pc, #52]	@ (80021bc <HAL_RCC_ClockConfig+0x1f0>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	490b      	ldr	r1, [pc, #44]	@ (80021c0 <HAL_RCC_ClockConfig+0x1f4>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
 800219c:	4a09      	ldr	r2, [pc, #36]	@ (80021c4 <HAL_RCC_ClockConfig+0x1f8>)
 800219e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021a0:	4b09      	ldr	r3, [pc, #36]	@ (80021c8 <HAL_RCC_ClockConfig+0x1fc>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe ff89 	bl	80010bc <HAL_InitTick>
 80021aa:	4603      	mov	r3, r0
 80021ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80021ae:	7afb      	ldrb	r3, [r7, #11]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40022000 	.word	0x40022000
 80021bc:	40021000 	.word	0x40021000
 80021c0:	080046d4 	.word	0x080046d4
 80021c4:	20000000 	.word	0x20000000
 80021c8:	20000004 	.word	0x20000004

080021cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	@ 0x24
 80021d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021da:	4b3e      	ldr	r3, [pc, #248]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e4:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x34>
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b0c      	cmp	r3, #12
 80021f8:	d121      	bne.n	800223e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d11e      	bne.n	800223e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002200:	4b34      	ldr	r3, [pc, #208]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d107      	bne.n	800221c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800220c:	4b31      	ldr	r3, [pc, #196]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800220e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	f003 030f 	and.w	r3, r3, #15
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	e005      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800221c:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002228:	4a2b      	ldr	r2, [pc, #172]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002230:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10d      	bne.n	8002254 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d102      	bne.n	800224a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002244:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	e004      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	2b08      	cmp	r3, #8
 800224e:	d101      	bne.n	8002254 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002250:	4b23      	ldr	r3, [pc, #140]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002252:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	2b0c      	cmp	r3, #12
 8002258:	d134      	bne.n	80022c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800225a:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d003      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0xa6>
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d003      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0xac>
 8002270:	e005      	b.n	800227e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002272:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002274:	617b      	str	r3, [r7, #20]
      break;
 8002276:	e005      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002278:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800227a:	617b      	str	r3, [r7, #20]
      break;
 800227c:	e002      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	617b      	str	r3, [r7, #20]
      break;
 8002282:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002284:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	3301      	adds	r3, #1
 8002290:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002292:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	fb03 f202 	mul.w	r2, r3, r2
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	0e5b      	lsrs	r3, r3, #25
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	3301      	adds	r3, #1
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022c4:	69bb      	ldr	r3, [r7, #24]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	@ 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	080046ec 	.word	0x080046ec
 80022dc:	00f42400 	.word	0x00f42400
 80022e0:	007a1200 	.word	0x007a1200

080022e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e8:	4b03      	ldr	r3, [pc, #12]	@ (80022f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000000 	.word	0x20000000

080022fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002300:	f7ff fff0 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	@ (8002324 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	080046e4 	.word	0x080046e4

08002328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800232c:	f7ff ffda 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	0adb      	lsrs	r3, r3, #11
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4904      	ldr	r1, [pc, #16]	@ (8002350 <HAL_RCC_GetPCLK2Freq+0x28>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	080046e4 	.word	0x080046e4

08002354 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002360:	4b2a      	ldr	r3, [pc, #168]	@ (800240c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800236c:	f7ff f9b6 	bl	80016dc <HAL_PWREx_GetVoltageRange>
 8002370:	6178      	str	r0, [r7, #20]
 8002372:	e014      	b.n	800239e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002374:	4b25      	ldr	r3, [pc, #148]	@ (800240c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002378:	4a24      	ldr	r2, [pc, #144]	@ (800240c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800237a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002380:	4b22      	ldr	r3, [pc, #136]	@ (800240c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800238c:	f7ff f9a6 	bl	80016dc <HAL_PWREx_GetVoltageRange>
 8002390:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002392:	4b1e      	ldr	r3, [pc, #120]	@ (800240c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002396:	4a1d      	ldr	r2, [pc, #116]	@ (800240c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002398:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800239c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023a4:	d10b      	bne.n	80023be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b80      	cmp	r3, #128	@ 0x80
 80023aa:	d919      	bls.n	80023e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2ba0      	cmp	r3, #160	@ 0xa0
 80023b0:	d902      	bls.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023b2:	2302      	movs	r3, #2
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	e013      	b.n	80023e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023b8:	2301      	movs	r3, #1
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	e010      	b.n	80023e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b80      	cmp	r3, #128	@ 0x80
 80023c2:	d902      	bls.n	80023ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023c4:	2303      	movs	r3, #3
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	e00a      	b.n	80023e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b80      	cmp	r3, #128	@ 0x80
 80023ce:	d102      	bne.n	80023d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023d0:	2302      	movs	r3, #2
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	e004      	b.n	80023e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b70      	cmp	r3, #112	@ 0x70
 80023da:	d101      	bne.n	80023e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023dc:	2301      	movs	r3, #1
 80023de:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 0207 	bic.w	r2, r3, #7
 80023e8:	4909      	ldr	r1, [pc, #36]	@ (8002410 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023f0:	4b07      	ldr	r3, [pc, #28]	@ (8002410 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d001      	beq.n	8002402 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	40022000 	.word	0x40022000

08002414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800241c:	2300      	movs	r3, #0
 800241e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002420:	2300      	movs	r3, #0
 8002422:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800242c:	2b00      	cmp	r3, #0
 800242e:	d031      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002434:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002438:	d01a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800243a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800243e:	d814      	bhi.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002444:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002448:	d10f      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800244a:	4b5d      	ldr	r3, [pc, #372]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	4a5c      	ldr	r2, [pc, #368]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002454:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002456:	e00c      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3304      	adds	r3, #4
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fa44 	bl	80028ec <RCCEx_PLLSAI1_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002468:	e003      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	74fb      	strb	r3, [r7, #19]
      break;
 800246e:	e000      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10b      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002478:	4b51      	ldr	r3, [pc, #324]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002486:	494e      	ldr	r1, [pc, #312]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800248e:	e001      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 809e 	beq.w	80025de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024a6:	4b46      	ldr	r3, [pc, #280]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024bc:	4b40      	ldr	r3, [pc, #256]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	4a3f      	ldr	r2, [pc, #252]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80024c8:	4b3d      	ldr	r3, [pc, #244]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d4:	2301      	movs	r3, #1
 80024d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d8:	4b3a      	ldr	r3, [pc, #232]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a39      	ldr	r2, [pc, #228]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024e4:	f7fe fe3a 	bl	800115c <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024ea:	e009      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ec:	f7fe fe36 	bl	800115c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d902      	bls.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	74fb      	strb	r3, [r7, #19]
        break;
 80024fe:	e005      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002500:	4b30      	ldr	r3, [pc, #192]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0ef      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800250c:	7cfb      	ldrb	r3, [r7, #19]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d15a      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002512:	4b2b      	ldr	r3, [pc, #172]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002518:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800251c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01e      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	429a      	cmp	r2, r3
 800252c:	d019      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800252e:	4b24      	ldr	r3, [pc, #144]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002538:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800253a:	4b21      	ldr	r3, [pc, #132]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002540:	4a1f      	ldr	r2, [pc, #124]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002546:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800254a:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002550:	4a1b      	ldr	r2, [pc, #108]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002556:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800255a:	4a19      	ldr	r2, [pc, #100]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d016      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7fe fdf6 	bl	800115c <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002572:	e00b      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002574:	f7fe fdf2 	bl	800115c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002582:	4293      	cmp	r3, r2
 8002584:	d902      	bls.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	74fb      	strb	r3, [r7, #19]
            break;
 800258a:	e006      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258c:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0ec      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10b      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a0:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025ae:	4904      	ldr	r1, [pc, #16]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025b6:	e009      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	74bb      	strb	r3, [r7, #18]
 80025bc:	e006      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025cc:	7c7b      	ldrb	r3, [r7, #17]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d105      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d2:	4b9e      	ldr	r3, [pc, #632]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d6:	4a9d      	ldr	r2, [pc, #628]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ea:	4b98      	ldr	r3, [pc, #608]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f0:	f023 0203 	bic.w	r2, r3, #3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4994      	ldr	r1, [pc, #592]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800260c:	4b8f      	ldr	r3, [pc, #572]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002612:	f023 020c 	bic.w	r2, r3, #12
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	498c      	ldr	r1, [pc, #560]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800262e:	4b87      	ldr	r3, [pc, #540]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002634:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	4983      	ldr	r1, [pc, #524]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002650:	4b7e      	ldr	r3, [pc, #504]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002656:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265e:	497b      	ldr	r1, [pc, #492]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002672:	4b76      	ldr	r3, [pc, #472]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002678:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002680:	4972      	ldr	r1, [pc, #456]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002694:	4b6d      	ldr	r3, [pc, #436]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	496a      	ldr	r1, [pc, #424]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026b6:	4b65      	ldr	r3, [pc, #404]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026bc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c4:	4961      	ldr	r1, [pc, #388]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026d8:	4b5c      	ldr	r3, [pc, #368]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e6:	4959      	ldr	r1, [pc, #356]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026fa:	4b54      	ldr	r3, [pc, #336]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002700:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	4950      	ldr	r1, [pc, #320]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800271c:	4b4b      	ldr	r3, [pc, #300]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002722:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272a:	4948      	ldr	r1, [pc, #288]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800273e:	4b43      	ldr	r3, [pc, #268]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002740:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002744:	f023 0203 	bic.w	r2, r3, #3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	493f      	ldr	r1, [pc, #252]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d028      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002760:	4b3a      	ldr	r3, [pc, #232]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002766:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800276e:	4937      	ldr	r1, [pc, #220]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800277a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800277e:	d106      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a31      	ldr	r2, [pc, #196]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002786:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800278a:	60d3      	str	r3, [r2, #12]
 800278c:	e011      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002792:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002796:	d10c      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	2101      	movs	r1, #1
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f8a4 	bl	80028ec <RCCEx_PLLSAI1_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d028      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027be:	4b23      	ldr	r3, [pc, #140]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027cc:	491f      	ldr	r1, [pc, #124]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027dc:	d106      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027de:	4b1b      	ldr	r3, [pc, #108]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4a1a      	ldr	r2, [pc, #104]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027e8:	60d3      	str	r3, [r2, #12]
 80027ea:	e011      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027f4:	d10c      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2101      	movs	r1, #1
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 f875 	bl	80028ec <RCCEx_PLLSAI1_Config>
 8002802:	4603      	mov	r3, r0
 8002804:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d02b      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002822:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282a:	4908      	ldr	r1, [pc, #32]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800283a:	d109      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283c:	4b03      	ldr	r3, [pc, #12]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a02      	ldr	r2, [pc, #8]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002846:	60d3      	str	r3, [r2, #12]
 8002848:	e014      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002858:	d10c      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3304      	adds	r3, #4
 800285e:	2101      	movs	r1, #1
 8002860:	4618      	mov	r0, r3
 8002862:	f000 f843 	bl	80028ec <RCCEx_PLLSAI1_Config>
 8002866:	4603      	mov	r3, r0
 8002868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01c      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002880:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002886:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288e:	4916      	ldr	r1, [pc, #88]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800289e:	d10c      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3304      	adds	r3, #4
 80028a4:	2102      	movs	r1, #2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f820 	bl	80028ec <RCCEx_PLLSAI1_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028c6:	4b08      	ldr	r3, [pc, #32]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d4:	4904      	ldr	r1, [pc, #16]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000

080028ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028fa:	4b74      	ldr	r3, [pc, #464]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d018      	beq.n	8002938 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002906:	4b71      	ldr	r3, [pc, #452]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 0203 	and.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d10d      	bne.n	8002932 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
       ||
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800291e:	4b6b      	ldr	r3, [pc, #428]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
       ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d047      	beq.n	80029c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
 8002936:	e044      	b.n	80029c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d018      	beq.n	8002972 <RCCEx_PLLSAI1_Config+0x86>
 8002940:	2b03      	cmp	r3, #3
 8002942:	d825      	bhi.n	8002990 <RCCEx_PLLSAI1_Config+0xa4>
 8002944:	2b01      	cmp	r3, #1
 8002946:	d002      	beq.n	800294e <RCCEx_PLLSAI1_Config+0x62>
 8002948:	2b02      	cmp	r3, #2
 800294a:	d009      	beq.n	8002960 <RCCEx_PLLSAI1_Config+0x74>
 800294c:	e020      	b.n	8002990 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800294e:	4b5f      	ldr	r3, [pc, #380]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d11d      	bne.n	8002996 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800295e:	e01a      	b.n	8002996 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002960:	4b5a      	ldr	r3, [pc, #360]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002968:	2b00      	cmp	r3, #0
 800296a:	d116      	bne.n	800299a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002970:	e013      	b.n	800299a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002972:	4b56      	ldr	r3, [pc, #344]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10f      	bne.n	800299e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800297e:	4b53      	ldr	r3, [pc, #332]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800298e:	e006      	b.n	800299e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      break;
 8002994:	e004      	b.n	80029a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002996:	bf00      	nop
 8002998:	e002      	b.n	80029a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800299a:	bf00      	nop
 800299c:	e000      	b.n	80029a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800299e:	bf00      	nop
    }

    if(status == HAL_OK)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10d      	bne.n	80029c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029a6:	4b49      	ldr	r3, [pc, #292]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6819      	ldr	r1, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	430b      	orrs	r3, r1
 80029bc:	4943      	ldr	r1, [pc, #268]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d17c      	bne.n	8002ac2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029c8:	4b40      	ldr	r3, [pc, #256]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a3f      	ldr	r2, [pc, #252]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d4:	f7fe fbc2 	bl	800115c <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029da:	e009      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029dc:	f7fe fbbe 	bl	800115c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d902      	bls.n	80029f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	73fb      	strb	r3, [r7, #15]
        break;
 80029ee:	e005      	b.n	80029fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029f0:	4b36      	ldr	r3, [pc, #216]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1ef      	bne.n	80029dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d15f      	bne.n	8002ac2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d110      	bne.n	8002a2a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a08:	4b30      	ldr	r3, [pc, #192]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002a10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6892      	ldr	r2, [r2, #8]
 8002a18:	0211      	lsls	r1, r2, #8
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68d2      	ldr	r2, [r2, #12]
 8002a1e:	06d2      	lsls	r2, r2, #27
 8002a20:	430a      	orrs	r2, r1
 8002a22:	492a      	ldr	r1, [pc, #168]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	610b      	str	r3, [r1, #16]
 8002a28:	e027      	b.n	8002a7a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d112      	bne.n	8002a56 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a30:	4b26      	ldr	r3, [pc, #152]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6892      	ldr	r2, [r2, #8]
 8002a40:	0211      	lsls	r1, r2, #8
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6912      	ldr	r2, [r2, #16]
 8002a46:	0852      	lsrs	r2, r2, #1
 8002a48:	3a01      	subs	r2, #1
 8002a4a:	0552      	lsls	r2, r2, #21
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	491f      	ldr	r1, [pc, #124]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	610b      	str	r3, [r1, #16]
 8002a54:	e011      	b.n	8002a7a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a56:	4b1d      	ldr	r3, [pc, #116]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a5e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6892      	ldr	r2, [r2, #8]
 8002a66:	0211      	lsls	r1, r2, #8
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6952      	ldr	r2, [r2, #20]
 8002a6c:	0852      	lsrs	r2, r2, #1
 8002a6e:	3a01      	subs	r2, #1
 8002a70:	0652      	lsls	r2, r2, #25
 8002a72:	430a      	orrs	r2, r1
 8002a74:	4915      	ldr	r1, [pc, #84]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a7a:	4b14      	ldr	r3, [pc, #80]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a13      	ldr	r2, [pc, #76]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7fe fb69 	bl	800115c <HAL_GetTick>
 8002a8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a8c:	e009      	b.n	8002aa2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a8e:	f7fe fb65 	bl	800115c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d902      	bls.n	8002aa2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	73fb      	strb	r3, [r7, #15]
          break;
 8002aa0:	e005      	b.n	8002aae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0ef      	beq.n	8002a8e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d106      	bne.n	8002ac2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ab4:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	4903      	ldr	r1, [pc, #12]	@ (8002acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000

08002ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e095      	b.n	8002c0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d108      	bne.n	8002afc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002af2:	d009      	beq.n	8002b08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	61da      	str	r2, [r3, #28]
 8002afa:	e005      	b.n	8002b08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe f8d8 	bl	8000cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b48:	d902      	bls.n	8002b50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	e002      	b.n	8002b56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002b5e:	d007      	beq.n	8002b70 <HAL_SPI_Init+0xa0>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b68:	d002      	beq.n	8002b70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb2:	ea42 0103 	orr.w	r1, r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	f003 0204 	and.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002bec:	ea42 0103 	orr.w	r1, r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e040      	b.n	8002caa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fe f891 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2224      	movs	r2, #36	@ 0x24
 8002c42:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 faaf 	bl	80031c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f826 	bl	8002cb4 <UART_SetConfig>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e01b      	b.n	8002caa <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fb2e 	bl	8003304 <UART_CheckIdleState>
 8002ca8:	4603      	mov	r3, r0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb8:	b08a      	sub	sp, #40	@ 0x28
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4ba5      	ldr	r3, [pc, #660]	@ (8002f78 <UART_SetConfig+0x2c4>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cec:	430b      	orrs	r3, r1
 8002cee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a9a      	ldr	r2, [pc, #616]	@ (8002f7c <UART_SetConfig+0x2c8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d004      	beq.n	8002d20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d30:	430a      	orrs	r2, r1
 8002d32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a91      	ldr	r2, [pc, #580]	@ (8002f80 <UART_SetConfig+0x2cc>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d126      	bne.n	8002d8c <UART_SetConfig+0xd8>
 8002d3e:	4b91      	ldr	r3, [pc, #580]	@ (8002f84 <UART_SetConfig+0x2d0>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d81b      	bhi.n	8002d84 <UART_SetConfig+0xd0>
 8002d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d54 <UART_SetConfig+0xa0>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d65 	.word	0x08002d65
 8002d58:	08002d75 	.word	0x08002d75
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d7d 	.word	0x08002d7d
 8002d64:	2301      	movs	r3, #1
 8002d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d6a:	e0d6      	b.n	8002f1a <UART_SetConfig+0x266>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d72:	e0d2      	b.n	8002f1a <UART_SetConfig+0x266>
 8002d74:	2304      	movs	r3, #4
 8002d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d7a:	e0ce      	b.n	8002f1a <UART_SetConfig+0x266>
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d82:	e0ca      	b.n	8002f1a <UART_SetConfig+0x266>
 8002d84:	2310      	movs	r3, #16
 8002d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d8a:	e0c6      	b.n	8002f1a <UART_SetConfig+0x266>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a7d      	ldr	r2, [pc, #500]	@ (8002f88 <UART_SetConfig+0x2d4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d138      	bne.n	8002e08 <UART_SetConfig+0x154>
 8002d96:	4b7b      	ldr	r3, [pc, #492]	@ (8002f84 <UART_SetConfig+0x2d0>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d82d      	bhi.n	8002e00 <UART_SetConfig+0x14c>
 8002da4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dac <UART_SetConfig+0xf8>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002de1 	.word	0x08002de1
 8002db0:	08002e01 	.word	0x08002e01
 8002db4:	08002e01 	.word	0x08002e01
 8002db8:	08002e01 	.word	0x08002e01
 8002dbc:	08002df1 	.word	0x08002df1
 8002dc0:	08002e01 	.word	0x08002e01
 8002dc4:	08002e01 	.word	0x08002e01
 8002dc8:	08002e01 	.word	0x08002e01
 8002dcc:	08002de9 	.word	0x08002de9
 8002dd0:	08002e01 	.word	0x08002e01
 8002dd4:	08002e01 	.word	0x08002e01
 8002dd8:	08002e01 	.word	0x08002e01
 8002ddc:	08002df9 	.word	0x08002df9
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002de6:	e098      	b.n	8002f1a <UART_SetConfig+0x266>
 8002de8:	2302      	movs	r3, #2
 8002dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dee:	e094      	b.n	8002f1a <UART_SetConfig+0x266>
 8002df0:	2304      	movs	r3, #4
 8002df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002df6:	e090      	b.n	8002f1a <UART_SetConfig+0x266>
 8002df8:	2308      	movs	r3, #8
 8002dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dfe:	e08c      	b.n	8002f1a <UART_SetConfig+0x266>
 8002e00:	2310      	movs	r3, #16
 8002e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e06:	e088      	b.n	8002f1a <UART_SetConfig+0x266>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a5f      	ldr	r2, [pc, #380]	@ (8002f8c <UART_SetConfig+0x2d8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d125      	bne.n	8002e5e <UART_SetConfig+0x1aa>
 8002e12:	4b5c      	ldr	r3, [pc, #368]	@ (8002f84 <UART_SetConfig+0x2d0>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e1c:	2b30      	cmp	r3, #48	@ 0x30
 8002e1e:	d016      	beq.n	8002e4e <UART_SetConfig+0x19a>
 8002e20:	2b30      	cmp	r3, #48	@ 0x30
 8002e22:	d818      	bhi.n	8002e56 <UART_SetConfig+0x1a2>
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d00a      	beq.n	8002e3e <UART_SetConfig+0x18a>
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d814      	bhi.n	8002e56 <UART_SetConfig+0x1a2>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <UART_SetConfig+0x182>
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d008      	beq.n	8002e46 <UART_SetConfig+0x192>
 8002e34:	e00f      	b.n	8002e56 <UART_SetConfig+0x1a2>
 8002e36:	2300      	movs	r3, #0
 8002e38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e3c:	e06d      	b.n	8002f1a <UART_SetConfig+0x266>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e44:	e069      	b.n	8002f1a <UART_SetConfig+0x266>
 8002e46:	2304      	movs	r3, #4
 8002e48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e4c:	e065      	b.n	8002f1a <UART_SetConfig+0x266>
 8002e4e:	2308      	movs	r3, #8
 8002e50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e54:	e061      	b.n	8002f1a <UART_SetConfig+0x266>
 8002e56:	2310      	movs	r3, #16
 8002e58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e5c:	e05d      	b.n	8002f1a <UART_SetConfig+0x266>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a4b      	ldr	r2, [pc, #300]	@ (8002f90 <UART_SetConfig+0x2dc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d125      	bne.n	8002eb4 <UART_SetConfig+0x200>
 8002e68:	4b46      	ldr	r3, [pc, #280]	@ (8002f84 <UART_SetConfig+0x2d0>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002e72:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e74:	d016      	beq.n	8002ea4 <UART_SetConfig+0x1f0>
 8002e76:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e78:	d818      	bhi.n	8002eac <UART_SetConfig+0x1f8>
 8002e7a:	2b80      	cmp	r3, #128	@ 0x80
 8002e7c:	d00a      	beq.n	8002e94 <UART_SetConfig+0x1e0>
 8002e7e:	2b80      	cmp	r3, #128	@ 0x80
 8002e80:	d814      	bhi.n	8002eac <UART_SetConfig+0x1f8>
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <UART_SetConfig+0x1d8>
 8002e86:	2b40      	cmp	r3, #64	@ 0x40
 8002e88:	d008      	beq.n	8002e9c <UART_SetConfig+0x1e8>
 8002e8a:	e00f      	b.n	8002eac <UART_SetConfig+0x1f8>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e92:	e042      	b.n	8002f1a <UART_SetConfig+0x266>
 8002e94:	2302      	movs	r3, #2
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e9a:	e03e      	b.n	8002f1a <UART_SetConfig+0x266>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ea2:	e03a      	b.n	8002f1a <UART_SetConfig+0x266>
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eaa:	e036      	b.n	8002f1a <UART_SetConfig+0x266>
 8002eac:	2310      	movs	r3, #16
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb2:	e032      	b.n	8002f1a <UART_SetConfig+0x266>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a30      	ldr	r2, [pc, #192]	@ (8002f7c <UART_SetConfig+0x2c8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d12a      	bne.n	8002f14 <UART_SetConfig+0x260>
 8002ebe:	4b31      	ldr	r3, [pc, #196]	@ (8002f84 <UART_SetConfig+0x2d0>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ec8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ecc:	d01a      	beq.n	8002f04 <UART_SetConfig+0x250>
 8002ece:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ed2:	d81b      	bhi.n	8002f0c <UART_SetConfig+0x258>
 8002ed4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ed8:	d00c      	beq.n	8002ef4 <UART_SetConfig+0x240>
 8002eda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ede:	d815      	bhi.n	8002f0c <UART_SetConfig+0x258>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <UART_SetConfig+0x238>
 8002ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee8:	d008      	beq.n	8002efc <UART_SetConfig+0x248>
 8002eea:	e00f      	b.n	8002f0c <UART_SetConfig+0x258>
 8002eec:	2300      	movs	r3, #0
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ef2:	e012      	b.n	8002f1a <UART_SetConfig+0x266>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002efa:	e00e      	b.n	8002f1a <UART_SetConfig+0x266>
 8002efc:	2304      	movs	r3, #4
 8002efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f02:	e00a      	b.n	8002f1a <UART_SetConfig+0x266>
 8002f04:	2308      	movs	r3, #8
 8002f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f0a:	e006      	b.n	8002f1a <UART_SetConfig+0x266>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f12:	e002      	b.n	8002f1a <UART_SetConfig+0x266>
 8002f14:	2310      	movs	r3, #16
 8002f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a17      	ldr	r2, [pc, #92]	@ (8002f7c <UART_SetConfig+0x2c8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	f040 808b 	bne.w	800303c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d834      	bhi.n	8002f98 <UART_SetConfig+0x2e4>
 8002f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f34 <UART_SetConfig+0x280>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f59 	.word	0x08002f59
 8002f38:	08002f99 	.word	0x08002f99
 8002f3c:	08002f61 	.word	0x08002f61
 8002f40:	08002f99 	.word	0x08002f99
 8002f44:	08002f67 	.word	0x08002f67
 8002f48:	08002f99 	.word	0x08002f99
 8002f4c:	08002f99 	.word	0x08002f99
 8002f50:	08002f99 	.word	0x08002f99
 8002f54:	08002f6f 	.word	0x08002f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f58:	f7ff f9d0 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 8002f5c:	61f8      	str	r0, [r7, #28]
        break;
 8002f5e:	e021      	b.n	8002fa4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f60:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <UART_SetConfig+0x2e0>)
 8002f62:	61fb      	str	r3, [r7, #28]
        break;
 8002f64:	e01e      	b.n	8002fa4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f66:	f7ff f931 	bl	80021cc <HAL_RCC_GetSysClockFreq>
 8002f6a:	61f8      	str	r0, [r7, #28]
        break;
 8002f6c:	e01a      	b.n	8002fa4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f72:	61fb      	str	r3, [r7, #28]
        break;
 8002f74:	e016      	b.n	8002fa4 <UART_SetConfig+0x2f0>
 8002f76:	bf00      	nop
 8002f78:	efff69f3 	.word	0xefff69f3
 8002f7c:	40008000 	.word	0x40008000
 8002f80:	40013800 	.word	0x40013800
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40004400 	.word	0x40004400
 8002f8c:	40004800 	.word	0x40004800
 8002f90:	40004c00 	.word	0x40004c00
 8002f94:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002fa2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80fa 	beq.w	80031a0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d305      	bcc.n	8002fc8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d903      	bls.n	8002fd0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002fce:	e0e7      	b.n	80031a0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	461c      	mov	r4, r3
 8002fd6:	4615      	mov	r5, r2
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	022b      	lsls	r3, r5, #8
 8002fe2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002fe6:	0222      	lsls	r2, r4, #8
 8002fe8:	68f9      	ldr	r1, [r7, #12]
 8002fea:	6849      	ldr	r1, [r1, #4]
 8002fec:	0849      	lsrs	r1, r1, #1
 8002fee:	2000      	movs	r0, #0
 8002ff0:	4688      	mov	r8, r1
 8002ff2:	4681      	mov	r9, r0
 8002ff4:	eb12 0a08 	adds.w	sl, r2, r8
 8002ff8:	eb43 0b09 	adc.w	fp, r3, r9
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800300a:	4650      	mov	r0, sl
 800300c:	4659      	mov	r1, fp
 800300e:	f7fd f937 	bl	8000280 <__aeabi_uldivmod>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4613      	mov	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003020:	d308      	bcc.n	8003034 <UART_SetConfig+0x380>
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003028:	d204      	bcs.n	8003034 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	e0b5      	b.n	80031a0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800303a:	e0b1      	b.n	80031a0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003044:	d15d      	bne.n	8003102 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003046:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800304a:	2b08      	cmp	r3, #8
 800304c:	d827      	bhi.n	800309e <UART_SetConfig+0x3ea>
 800304e:	a201      	add	r2, pc, #4	@ (adr r2, 8003054 <UART_SetConfig+0x3a0>)
 8003050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003054:	08003079 	.word	0x08003079
 8003058:	08003081 	.word	0x08003081
 800305c:	08003089 	.word	0x08003089
 8003060:	0800309f 	.word	0x0800309f
 8003064:	0800308f 	.word	0x0800308f
 8003068:	0800309f 	.word	0x0800309f
 800306c:	0800309f 	.word	0x0800309f
 8003070:	0800309f 	.word	0x0800309f
 8003074:	08003097 	.word	0x08003097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003078:	f7ff f940 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 800307c:	61f8      	str	r0, [r7, #28]
        break;
 800307e:	e014      	b.n	80030aa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003080:	f7ff f952 	bl	8002328 <HAL_RCC_GetPCLK2Freq>
 8003084:	61f8      	str	r0, [r7, #28]
        break;
 8003086:	e010      	b.n	80030aa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003088:	4b4c      	ldr	r3, [pc, #304]	@ (80031bc <UART_SetConfig+0x508>)
 800308a:	61fb      	str	r3, [r7, #28]
        break;
 800308c:	e00d      	b.n	80030aa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800308e:	f7ff f89d 	bl	80021cc <HAL_RCC_GetSysClockFreq>
 8003092:	61f8      	str	r0, [r7, #28]
        break;
 8003094:	e009      	b.n	80030aa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800309a:	61fb      	str	r3, [r7, #28]
        break;
 800309c:	e005      	b.n	80030aa <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d077      	beq.n	80031a0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	005a      	lsls	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	441a      	add	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b0f      	cmp	r3, #15
 80030ca:	d916      	bls.n	80030fa <UART_SetConfig+0x446>
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d2:	d212      	bcs.n	80030fa <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f023 030f 	bic.w	r3, r3, #15
 80030dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	8afb      	ldrh	r3, [r7, #22]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	8afa      	ldrh	r2, [r7, #22]
 80030f6:	60da      	str	r2, [r3, #12]
 80030f8:	e052      	b.n	80031a0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003100:	e04e      	b.n	80031a0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003102:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003106:	2b08      	cmp	r3, #8
 8003108:	d827      	bhi.n	800315a <UART_SetConfig+0x4a6>
 800310a:	a201      	add	r2, pc, #4	@ (adr r2, 8003110 <UART_SetConfig+0x45c>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	08003135 	.word	0x08003135
 8003114:	0800313d 	.word	0x0800313d
 8003118:	08003145 	.word	0x08003145
 800311c:	0800315b 	.word	0x0800315b
 8003120:	0800314b 	.word	0x0800314b
 8003124:	0800315b 	.word	0x0800315b
 8003128:	0800315b 	.word	0x0800315b
 800312c:	0800315b 	.word	0x0800315b
 8003130:	08003153 	.word	0x08003153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003134:	f7ff f8e2 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 8003138:	61f8      	str	r0, [r7, #28]
        break;
 800313a:	e014      	b.n	8003166 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800313c:	f7ff f8f4 	bl	8002328 <HAL_RCC_GetPCLK2Freq>
 8003140:	61f8      	str	r0, [r7, #28]
        break;
 8003142:	e010      	b.n	8003166 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003144:	4b1d      	ldr	r3, [pc, #116]	@ (80031bc <UART_SetConfig+0x508>)
 8003146:	61fb      	str	r3, [r7, #28]
        break;
 8003148:	e00d      	b.n	8003166 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800314a:	f7ff f83f 	bl	80021cc <HAL_RCC_GetSysClockFreq>
 800314e:	61f8      	str	r0, [r7, #28]
        break;
 8003150:	e009      	b.n	8003166 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003156:	61fb      	str	r3, [r7, #28]
        break;
 8003158:	e005      	b.n	8003166 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003164:	bf00      	nop
    }

    if (pclk != 0U)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d019      	beq.n	80031a0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	085a      	lsrs	r2, r3, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	441a      	add	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b0f      	cmp	r3, #15
 8003184:	d909      	bls.n	800319a <UART_SetConfig+0x4e6>
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800318c:	d205      	bcs.n	800319a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60da      	str	r2, [r3, #12]
 8003198:	e002      	b.n	80031a0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80031ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3728      	adds	r7, #40	@ 0x28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ba:	bf00      	nop
 80031bc:	00f42400 	.word	0x00f42400

080031c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01a      	beq.n	80032d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032be:	d10a      	bne.n	80032d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  }
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b098      	sub	sp, #96	@ 0x60
 8003308:	af02      	add	r7, sp, #8
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003314:	f7fd ff22 	bl	800115c <HAL_GetTick>
 8003318:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b08      	cmp	r3, #8
 8003326:	d12e      	bne.n	8003386 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003328:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003330:	2200      	movs	r2, #0
 8003332:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f88c 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d021      	beq.n	8003386 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800334a:	e853 3f00 	ldrex	r3, [r3]
 800334e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003356:	653b      	str	r3, [r7, #80]	@ 0x50
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003360:	647b      	str	r3, [r7, #68]	@ 0x44
 8003362:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003364:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003368:	e841 2300 	strex	r3, r2, [r1]
 800336c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800336e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e6      	bne.n	8003342 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e062      	b.n	800344c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b04      	cmp	r3, #4
 8003392:	d149      	bne.n	8003428 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003394:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339c:	2200      	movs	r2, #0
 800339e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f856 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d03c      	beq.n	8003428 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	623b      	str	r3, [r7, #32]
   return(result);
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e6      	bne.n	80033ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3308      	adds	r3, #8
 80033e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3308      	adds	r3, #8
 80033fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003400:	61fa      	str	r2, [r7, #28]
 8003402:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	69b9      	ldr	r1, [r7, #24]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	617b      	str	r3, [r7, #20]
   return(result);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e5      	bne.n	80033e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e011      	b.n	800344c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3758      	adds	r7, #88	@ 0x58
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003464:	e04f      	b.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d04b      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346e:	f7fd fe75 	bl	800115c <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <UART_WaitOnFlagUntilTimeout+0x30>
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e04e      	b.n	8003526 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d037      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b80      	cmp	r3, #128	@ 0x80
 800349a:	d034      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb2>
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b40      	cmp	r3, #64	@ 0x40
 80034a0:	d031      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d110      	bne.n	80034d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2208      	movs	r2, #8
 80034b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f838 	bl	800352e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2208      	movs	r2, #8
 80034c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e029      	b.n	8003526 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034e0:	d111      	bne.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f81e 	bl	800352e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e00f      	b.n	8003526 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4013      	ands	r3, r2
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	429a      	cmp	r2, r3
 8003522:	d0a0      	beq.n	8003466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800352e:	b480      	push	{r7}
 8003530:	b095      	sub	sp, #84	@ 0x54
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003546:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800354a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003554:	643b      	str	r3, [r7, #64]	@ 0x40
 8003556:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800355a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e6      	bne.n	8003536 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3308      	adds	r3, #8
 800356e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	e853 3f00 	ldrex	r3, [r3]
 8003576:	61fb      	str	r3, [r7, #28]
   return(result);
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3308      	adds	r3, #8
 8003586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003588:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800358a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800358e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003590:	e841 2300 	strex	r3, r2, [r1]
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e5      	bne.n	8003568 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d118      	bne.n	80035d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f023 0310 	bic.w	r3, r3, #16
 80035b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	6979      	ldr	r1, [r7, #20]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	613b      	str	r3, [r7, #16]
   return(result);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e6      	bne.n	80035a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80035ea:	bf00      	nop
 80035ec:	3754      	adds	r7, #84	@ 0x54
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <srand>:
 80035f8:	b538      	push	{r3, r4, r5, lr}
 80035fa:	4b10      	ldr	r3, [pc, #64]	@ (800363c <srand+0x44>)
 80035fc:	681d      	ldr	r5, [r3, #0]
 80035fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003600:	4604      	mov	r4, r0
 8003602:	b9b3      	cbnz	r3, 8003632 <srand+0x3a>
 8003604:	2018      	movs	r0, #24
 8003606:	f000 fa5b 	bl	8003ac0 <malloc>
 800360a:	4602      	mov	r2, r0
 800360c:	6328      	str	r0, [r5, #48]	@ 0x30
 800360e:	b920      	cbnz	r0, 800361a <srand+0x22>
 8003610:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <srand+0x48>)
 8003612:	480c      	ldr	r0, [pc, #48]	@ (8003644 <srand+0x4c>)
 8003614:	2146      	movs	r1, #70	@ 0x46
 8003616:	f000 f9eb 	bl	80039f0 <__assert_func>
 800361a:	490b      	ldr	r1, [pc, #44]	@ (8003648 <srand+0x50>)
 800361c:	4b0b      	ldr	r3, [pc, #44]	@ (800364c <srand+0x54>)
 800361e:	e9c0 1300 	strd	r1, r3, [r0]
 8003622:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <srand+0x58>)
 8003624:	6083      	str	r3, [r0, #8]
 8003626:	230b      	movs	r3, #11
 8003628:	8183      	strh	r3, [r0, #12]
 800362a:	2100      	movs	r1, #0
 800362c:	2001      	movs	r0, #1
 800362e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003632:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003634:	2200      	movs	r2, #0
 8003636:	611c      	str	r4, [r3, #16]
 8003638:	615a      	str	r2, [r3, #20]
 800363a:	bd38      	pop	{r3, r4, r5, pc}
 800363c:	20000018 	.word	0x20000018
 8003640:	0800471c 	.word	0x0800471c
 8003644:	08004733 	.word	0x08004733
 8003648:	abcd330e 	.word	0xabcd330e
 800364c:	e66d1234 	.word	0xe66d1234
 8003650:	0005deec 	.word	0x0005deec

08003654 <rand>:
 8003654:	4b16      	ldr	r3, [pc, #88]	@ (80036b0 <rand+0x5c>)
 8003656:	b510      	push	{r4, lr}
 8003658:	681c      	ldr	r4, [r3, #0]
 800365a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800365c:	b9b3      	cbnz	r3, 800368c <rand+0x38>
 800365e:	2018      	movs	r0, #24
 8003660:	f000 fa2e 	bl	8003ac0 <malloc>
 8003664:	4602      	mov	r2, r0
 8003666:	6320      	str	r0, [r4, #48]	@ 0x30
 8003668:	b920      	cbnz	r0, 8003674 <rand+0x20>
 800366a:	4b12      	ldr	r3, [pc, #72]	@ (80036b4 <rand+0x60>)
 800366c:	4812      	ldr	r0, [pc, #72]	@ (80036b8 <rand+0x64>)
 800366e:	2152      	movs	r1, #82	@ 0x52
 8003670:	f000 f9be 	bl	80039f0 <__assert_func>
 8003674:	4911      	ldr	r1, [pc, #68]	@ (80036bc <rand+0x68>)
 8003676:	4b12      	ldr	r3, [pc, #72]	@ (80036c0 <rand+0x6c>)
 8003678:	e9c0 1300 	strd	r1, r3, [r0]
 800367c:	4b11      	ldr	r3, [pc, #68]	@ (80036c4 <rand+0x70>)
 800367e:	6083      	str	r3, [r0, #8]
 8003680:	230b      	movs	r3, #11
 8003682:	8183      	strh	r3, [r0, #12]
 8003684:	2100      	movs	r1, #0
 8003686:	2001      	movs	r0, #1
 8003688:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800368c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800368e:	480e      	ldr	r0, [pc, #56]	@ (80036c8 <rand+0x74>)
 8003690:	690b      	ldr	r3, [r1, #16]
 8003692:	694c      	ldr	r4, [r1, #20]
 8003694:	4a0d      	ldr	r2, [pc, #52]	@ (80036cc <rand+0x78>)
 8003696:	4358      	muls	r0, r3
 8003698:	fb02 0004 	mla	r0, r2, r4, r0
 800369c:	fba3 3202 	umull	r3, r2, r3, r2
 80036a0:	3301      	adds	r3, #1
 80036a2:	eb40 0002 	adc.w	r0, r0, r2
 80036a6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80036aa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80036ae:	bd10      	pop	{r4, pc}
 80036b0:	20000018 	.word	0x20000018
 80036b4:	0800471c 	.word	0x0800471c
 80036b8:	08004733 	.word	0x08004733
 80036bc:	abcd330e 	.word	0xabcd330e
 80036c0:	e66d1234 	.word	0xe66d1234
 80036c4:	0005deec 	.word	0x0005deec
 80036c8:	5851f42d 	.word	0x5851f42d
 80036cc:	4c957f2d 	.word	0x4c957f2d

080036d0 <std>:
 80036d0:	2300      	movs	r3, #0
 80036d2:	b510      	push	{r4, lr}
 80036d4:	4604      	mov	r4, r0
 80036d6:	e9c0 3300 	strd	r3, r3, [r0]
 80036da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036de:	6083      	str	r3, [r0, #8]
 80036e0:	8181      	strh	r1, [r0, #12]
 80036e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80036e4:	81c2      	strh	r2, [r0, #14]
 80036e6:	6183      	str	r3, [r0, #24]
 80036e8:	4619      	mov	r1, r3
 80036ea:	2208      	movs	r2, #8
 80036ec:	305c      	adds	r0, #92	@ 0x5c
 80036ee:	f000 f8f4 	bl	80038da <memset>
 80036f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003728 <std+0x58>)
 80036f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80036f6:	4b0d      	ldr	r3, [pc, #52]	@ (800372c <std+0x5c>)
 80036f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003730 <std+0x60>)
 80036fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003734 <std+0x64>)
 8003700:	6323      	str	r3, [r4, #48]	@ 0x30
 8003702:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <std+0x68>)
 8003704:	6224      	str	r4, [r4, #32]
 8003706:	429c      	cmp	r4, r3
 8003708:	d006      	beq.n	8003718 <std+0x48>
 800370a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800370e:	4294      	cmp	r4, r2
 8003710:	d002      	beq.n	8003718 <std+0x48>
 8003712:	33d0      	adds	r3, #208	@ 0xd0
 8003714:	429c      	cmp	r4, r3
 8003716:	d105      	bne.n	8003724 <std+0x54>
 8003718:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800371c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003720:	f000 b954 	b.w	80039cc <__retarget_lock_init_recursive>
 8003724:	bd10      	pop	{r4, pc}
 8003726:	bf00      	nop
 8003728:	08003855 	.word	0x08003855
 800372c:	08003877 	.word	0x08003877
 8003730:	080038af 	.word	0x080038af
 8003734:	080038d3 	.word	0x080038d3
 8003738:	20000190 	.word	0x20000190

0800373c <stdio_exit_handler>:
 800373c:	4a02      	ldr	r2, [pc, #8]	@ (8003748 <stdio_exit_handler+0xc>)
 800373e:	4903      	ldr	r1, [pc, #12]	@ (800374c <stdio_exit_handler+0x10>)
 8003740:	4803      	ldr	r0, [pc, #12]	@ (8003750 <stdio_exit_handler+0x14>)
 8003742:	f000 b869 	b.w	8003818 <_fwalk_sglue>
 8003746:	bf00      	nop
 8003748:	2000000c 	.word	0x2000000c
 800374c:	08003d35 	.word	0x08003d35
 8003750:	2000001c 	.word	0x2000001c

08003754 <cleanup_stdio>:
 8003754:	6841      	ldr	r1, [r0, #4]
 8003756:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <cleanup_stdio+0x34>)
 8003758:	4299      	cmp	r1, r3
 800375a:	b510      	push	{r4, lr}
 800375c:	4604      	mov	r4, r0
 800375e:	d001      	beq.n	8003764 <cleanup_stdio+0x10>
 8003760:	f000 fae8 	bl	8003d34 <_fflush_r>
 8003764:	68a1      	ldr	r1, [r4, #8]
 8003766:	4b09      	ldr	r3, [pc, #36]	@ (800378c <cleanup_stdio+0x38>)
 8003768:	4299      	cmp	r1, r3
 800376a:	d002      	beq.n	8003772 <cleanup_stdio+0x1e>
 800376c:	4620      	mov	r0, r4
 800376e:	f000 fae1 	bl	8003d34 <_fflush_r>
 8003772:	68e1      	ldr	r1, [r4, #12]
 8003774:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <cleanup_stdio+0x3c>)
 8003776:	4299      	cmp	r1, r3
 8003778:	d004      	beq.n	8003784 <cleanup_stdio+0x30>
 800377a:	4620      	mov	r0, r4
 800377c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003780:	f000 bad8 	b.w	8003d34 <_fflush_r>
 8003784:	bd10      	pop	{r4, pc}
 8003786:	bf00      	nop
 8003788:	20000190 	.word	0x20000190
 800378c:	200001f8 	.word	0x200001f8
 8003790:	20000260 	.word	0x20000260

08003794 <global_stdio_init.part.0>:
 8003794:	b510      	push	{r4, lr}
 8003796:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <global_stdio_init.part.0+0x30>)
 8003798:	4c0b      	ldr	r4, [pc, #44]	@ (80037c8 <global_stdio_init.part.0+0x34>)
 800379a:	4a0c      	ldr	r2, [pc, #48]	@ (80037cc <global_stdio_init.part.0+0x38>)
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	4620      	mov	r0, r4
 80037a0:	2200      	movs	r2, #0
 80037a2:	2104      	movs	r1, #4
 80037a4:	f7ff ff94 	bl	80036d0 <std>
 80037a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80037ac:	2201      	movs	r2, #1
 80037ae:	2109      	movs	r1, #9
 80037b0:	f7ff ff8e 	bl	80036d0 <std>
 80037b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80037b8:	2202      	movs	r2, #2
 80037ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037be:	2112      	movs	r1, #18
 80037c0:	f7ff bf86 	b.w	80036d0 <std>
 80037c4:	200002c8 	.word	0x200002c8
 80037c8:	20000190 	.word	0x20000190
 80037cc:	0800373d 	.word	0x0800373d

080037d0 <__sfp_lock_acquire>:
 80037d0:	4801      	ldr	r0, [pc, #4]	@ (80037d8 <__sfp_lock_acquire+0x8>)
 80037d2:	f000 b8fc 	b.w	80039ce <__retarget_lock_acquire_recursive>
 80037d6:	bf00      	nop
 80037d8:	200002d1 	.word	0x200002d1

080037dc <__sfp_lock_release>:
 80037dc:	4801      	ldr	r0, [pc, #4]	@ (80037e4 <__sfp_lock_release+0x8>)
 80037de:	f000 b8f7 	b.w	80039d0 <__retarget_lock_release_recursive>
 80037e2:	bf00      	nop
 80037e4:	200002d1 	.word	0x200002d1

080037e8 <__sinit>:
 80037e8:	b510      	push	{r4, lr}
 80037ea:	4604      	mov	r4, r0
 80037ec:	f7ff fff0 	bl	80037d0 <__sfp_lock_acquire>
 80037f0:	6a23      	ldr	r3, [r4, #32]
 80037f2:	b11b      	cbz	r3, 80037fc <__sinit+0x14>
 80037f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037f8:	f7ff bff0 	b.w	80037dc <__sfp_lock_release>
 80037fc:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <__sinit+0x28>)
 80037fe:	6223      	str	r3, [r4, #32]
 8003800:	4b04      	ldr	r3, [pc, #16]	@ (8003814 <__sinit+0x2c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f5      	bne.n	80037f4 <__sinit+0xc>
 8003808:	f7ff ffc4 	bl	8003794 <global_stdio_init.part.0>
 800380c:	e7f2      	b.n	80037f4 <__sinit+0xc>
 800380e:	bf00      	nop
 8003810:	08003755 	.word	0x08003755
 8003814:	200002c8 	.word	0x200002c8

08003818 <_fwalk_sglue>:
 8003818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800381c:	4607      	mov	r7, r0
 800381e:	4688      	mov	r8, r1
 8003820:	4614      	mov	r4, r2
 8003822:	2600      	movs	r6, #0
 8003824:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003828:	f1b9 0901 	subs.w	r9, r9, #1
 800382c:	d505      	bpl.n	800383a <_fwalk_sglue+0x22>
 800382e:	6824      	ldr	r4, [r4, #0]
 8003830:	2c00      	cmp	r4, #0
 8003832:	d1f7      	bne.n	8003824 <_fwalk_sglue+0xc>
 8003834:	4630      	mov	r0, r6
 8003836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800383a:	89ab      	ldrh	r3, [r5, #12]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d907      	bls.n	8003850 <_fwalk_sglue+0x38>
 8003840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003844:	3301      	adds	r3, #1
 8003846:	d003      	beq.n	8003850 <_fwalk_sglue+0x38>
 8003848:	4629      	mov	r1, r5
 800384a:	4638      	mov	r0, r7
 800384c:	47c0      	blx	r8
 800384e:	4306      	orrs	r6, r0
 8003850:	3568      	adds	r5, #104	@ 0x68
 8003852:	e7e9      	b.n	8003828 <_fwalk_sglue+0x10>

08003854 <__sread>:
 8003854:	b510      	push	{r4, lr}
 8003856:	460c      	mov	r4, r1
 8003858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800385c:	f000 f868 	bl	8003930 <_read_r>
 8003860:	2800      	cmp	r0, #0
 8003862:	bfab      	itete	ge
 8003864:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003866:	89a3      	ldrhlt	r3, [r4, #12]
 8003868:	181b      	addge	r3, r3, r0
 800386a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800386e:	bfac      	ite	ge
 8003870:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003872:	81a3      	strhlt	r3, [r4, #12]
 8003874:	bd10      	pop	{r4, pc}

08003876 <__swrite>:
 8003876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800387a:	461f      	mov	r7, r3
 800387c:	898b      	ldrh	r3, [r1, #12]
 800387e:	05db      	lsls	r3, r3, #23
 8003880:	4605      	mov	r5, r0
 8003882:	460c      	mov	r4, r1
 8003884:	4616      	mov	r6, r2
 8003886:	d505      	bpl.n	8003894 <__swrite+0x1e>
 8003888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800388c:	2302      	movs	r3, #2
 800388e:	2200      	movs	r2, #0
 8003890:	f000 f83c 	bl	800390c <_lseek_r>
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800389a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800389e:	81a3      	strh	r3, [r4, #12]
 80038a0:	4632      	mov	r2, r6
 80038a2:	463b      	mov	r3, r7
 80038a4:	4628      	mov	r0, r5
 80038a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038aa:	f000 b853 	b.w	8003954 <_write_r>

080038ae <__sseek>:
 80038ae:	b510      	push	{r4, lr}
 80038b0:	460c      	mov	r4, r1
 80038b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038b6:	f000 f829 	bl	800390c <_lseek_r>
 80038ba:	1c43      	adds	r3, r0, #1
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	bf15      	itete	ne
 80038c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80038c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80038c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80038ca:	81a3      	strheq	r3, [r4, #12]
 80038cc:	bf18      	it	ne
 80038ce:	81a3      	strhne	r3, [r4, #12]
 80038d0:	bd10      	pop	{r4, pc}

080038d2 <__sclose>:
 80038d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d6:	f000 b809 	b.w	80038ec <_close_r>

080038da <memset>:
 80038da:	4402      	add	r2, r0
 80038dc:	4603      	mov	r3, r0
 80038de:	4293      	cmp	r3, r2
 80038e0:	d100      	bne.n	80038e4 <memset+0xa>
 80038e2:	4770      	bx	lr
 80038e4:	f803 1b01 	strb.w	r1, [r3], #1
 80038e8:	e7f9      	b.n	80038de <memset+0x4>
	...

080038ec <_close_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	4d06      	ldr	r5, [pc, #24]	@ (8003908 <_close_r+0x1c>)
 80038f0:	2300      	movs	r3, #0
 80038f2:	4604      	mov	r4, r0
 80038f4:	4608      	mov	r0, r1
 80038f6:	602b      	str	r3, [r5, #0]
 80038f8:	f7fd fb19 	bl	8000f2e <_close>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d102      	bne.n	8003906 <_close_r+0x1a>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	b103      	cbz	r3, 8003906 <_close_r+0x1a>
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	bd38      	pop	{r3, r4, r5, pc}
 8003908:	200002cc 	.word	0x200002cc

0800390c <_lseek_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	4d07      	ldr	r5, [pc, #28]	@ (800392c <_lseek_r+0x20>)
 8003910:	4604      	mov	r4, r0
 8003912:	4608      	mov	r0, r1
 8003914:	4611      	mov	r1, r2
 8003916:	2200      	movs	r2, #0
 8003918:	602a      	str	r2, [r5, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	f7fd fb2e 	bl	8000f7c <_lseek>
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	d102      	bne.n	800392a <_lseek_r+0x1e>
 8003924:	682b      	ldr	r3, [r5, #0]
 8003926:	b103      	cbz	r3, 800392a <_lseek_r+0x1e>
 8003928:	6023      	str	r3, [r4, #0]
 800392a:	bd38      	pop	{r3, r4, r5, pc}
 800392c:	200002cc 	.word	0x200002cc

08003930 <_read_r>:
 8003930:	b538      	push	{r3, r4, r5, lr}
 8003932:	4d07      	ldr	r5, [pc, #28]	@ (8003950 <_read_r+0x20>)
 8003934:	4604      	mov	r4, r0
 8003936:	4608      	mov	r0, r1
 8003938:	4611      	mov	r1, r2
 800393a:	2200      	movs	r2, #0
 800393c:	602a      	str	r2, [r5, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	f7fd fabc 	bl	8000ebc <_read>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_read_r+0x1e>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b103      	cbz	r3, 800394e <_read_r+0x1e>
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	200002cc 	.word	0x200002cc

08003954 <_write_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4d07      	ldr	r5, [pc, #28]	@ (8003974 <_write_r+0x20>)
 8003958:	4604      	mov	r4, r0
 800395a:	4608      	mov	r0, r1
 800395c:	4611      	mov	r1, r2
 800395e:	2200      	movs	r2, #0
 8003960:	602a      	str	r2, [r5, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	f7fd fac7 	bl	8000ef6 <_write>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_write_r+0x1e>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	b103      	cbz	r3, 8003972 <_write_r+0x1e>
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	200002cc 	.word	0x200002cc

08003978 <__errno>:
 8003978:	4b01      	ldr	r3, [pc, #4]	@ (8003980 <__errno+0x8>)
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000018 	.word	0x20000018

08003984 <__libc_init_array>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4d0d      	ldr	r5, [pc, #52]	@ (80039bc <__libc_init_array+0x38>)
 8003988:	4c0d      	ldr	r4, [pc, #52]	@ (80039c0 <__libc_init_array+0x3c>)
 800398a:	1b64      	subs	r4, r4, r5
 800398c:	10a4      	asrs	r4, r4, #2
 800398e:	2600      	movs	r6, #0
 8003990:	42a6      	cmp	r6, r4
 8003992:	d109      	bne.n	80039a8 <__libc_init_array+0x24>
 8003994:	4d0b      	ldr	r5, [pc, #44]	@ (80039c4 <__libc_init_array+0x40>)
 8003996:	4c0c      	ldr	r4, [pc, #48]	@ (80039c8 <__libc_init_array+0x44>)
 8003998:	f000 fe48 	bl	800462c <_init>
 800399c:	1b64      	subs	r4, r4, r5
 800399e:	10a4      	asrs	r4, r4, #2
 80039a0:	2600      	movs	r6, #0
 80039a2:	42a6      	cmp	r6, r4
 80039a4:	d105      	bne.n	80039b2 <__libc_init_array+0x2e>
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ac:	4798      	blx	r3
 80039ae:	3601      	adds	r6, #1
 80039b0:	e7ee      	b.n	8003990 <__libc_init_array+0xc>
 80039b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b6:	4798      	blx	r3
 80039b8:	3601      	adds	r6, #1
 80039ba:	e7f2      	b.n	80039a2 <__libc_init_array+0x1e>
 80039bc:	08004804 	.word	0x08004804
 80039c0:	08004804 	.word	0x08004804
 80039c4:	08004804 	.word	0x08004804
 80039c8:	08004808 	.word	0x08004808

080039cc <__retarget_lock_init_recursive>:
 80039cc:	4770      	bx	lr

080039ce <__retarget_lock_acquire_recursive>:
 80039ce:	4770      	bx	lr

080039d0 <__retarget_lock_release_recursive>:
 80039d0:	4770      	bx	lr

080039d2 <memcpy>:
 80039d2:	440a      	add	r2, r1
 80039d4:	4291      	cmp	r1, r2
 80039d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80039da:	d100      	bne.n	80039de <memcpy+0xc>
 80039dc:	4770      	bx	lr
 80039de:	b510      	push	{r4, lr}
 80039e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039e8:	4291      	cmp	r1, r2
 80039ea:	d1f9      	bne.n	80039e0 <memcpy+0xe>
 80039ec:	bd10      	pop	{r4, pc}
	...

080039f0 <__assert_func>:
 80039f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80039f2:	4614      	mov	r4, r2
 80039f4:	461a      	mov	r2, r3
 80039f6:	4b09      	ldr	r3, [pc, #36]	@ (8003a1c <__assert_func+0x2c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4605      	mov	r5, r0
 80039fc:	68d8      	ldr	r0, [r3, #12]
 80039fe:	b954      	cbnz	r4, 8003a16 <__assert_func+0x26>
 8003a00:	4b07      	ldr	r3, [pc, #28]	@ (8003a20 <__assert_func+0x30>)
 8003a02:	461c      	mov	r4, r3
 8003a04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003a08:	9100      	str	r1, [sp, #0]
 8003a0a:	462b      	mov	r3, r5
 8003a0c:	4905      	ldr	r1, [pc, #20]	@ (8003a24 <__assert_func+0x34>)
 8003a0e:	f000 f9b9 	bl	8003d84 <fiprintf>
 8003a12:	f000 f9d9 	bl	8003dc8 <abort>
 8003a16:	4b04      	ldr	r3, [pc, #16]	@ (8003a28 <__assert_func+0x38>)
 8003a18:	e7f4      	b.n	8003a04 <__assert_func+0x14>
 8003a1a:	bf00      	nop
 8003a1c:	20000018 	.word	0x20000018
 8003a20:	080047c6 	.word	0x080047c6
 8003a24:	08004798 	.word	0x08004798
 8003a28:	0800478b 	.word	0x0800478b

08003a2c <_free_r>:
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	4605      	mov	r5, r0
 8003a30:	2900      	cmp	r1, #0
 8003a32:	d041      	beq.n	8003ab8 <_free_r+0x8c>
 8003a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a38:	1f0c      	subs	r4, r1, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bfb8      	it	lt
 8003a3e:	18e4      	addlt	r4, r4, r3
 8003a40:	f000 f8e8 	bl	8003c14 <__malloc_lock>
 8003a44:	4a1d      	ldr	r2, [pc, #116]	@ (8003abc <_free_r+0x90>)
 8003a46:	6813      	ldr	r3, [r2, #0]
 8003a48:	b933      	cbnz	r3, 8003a58 <_free_r+0x2c>
 8003a4a:	6063      	str	r3, [r4, #4]
 8003a4c:	6014      	str	r4, [r2, #0]
 8003a4e:	4628      	mov	r0, r5
 8003a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a54:	f000 b8e4 	b.w	8003c20 <__malloc_unlock>
 8003a58:	42a3      	cmp	r3, r4
 8003a5a:	d908      	bls.n	8003a6e <_free_r+0x42>
 8003a5c:	6820      	ldr	r0, [r4, #0]
 8003a5e:	1821      	adds	r1, r4, r0
 8003a60:	428b      	cmp	r3, r1
 8003a62:	bf01      	itttt	eq
 8003a64:	6819      	ldreq	r1, [r3, #0]
 8003a66:	685b      	ldreq	r3, [r3, #4]
 8003a68:	1809      	addeq	r1, r1, r0
 8003a6a:	6021      	streq	r1, [r4, #0]
 8003a6c:	e7ed      	b.n	8003a4a <_free_r+0x1e>
 8003a6e:	461a      	mov	r2, r3
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	b10b      	cbz	r3, 8003a78 <_free_r+0x4c>
 8003a74:	42a3      	cmp	r3, r4
 8003a76:	d9fa      	bls.n	8003a6e <_free_r+0x42>
 8003a78:	6811      	ldr	r1, [r2, #0]
 8003a7a:	1850      	adds	r0, r2, r1
 8003a7c:	42a0      	cmp	r0, r4
 8003a7e:	d10b      	bne.n	8003a98 <_free_r+0x6c>
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	4401      	add	r1, r0
 8003a84:	1850      	adds	r0, r2, r1
 8003a86:	4283      	cmp	r3, r0
 8003a88:	6011      	str	r1, [r2, #0]
 8003a8a:	d1e0      	bne.n	8003a4e <_free_r+0x22>
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	6053      	str	r3, [r2, #4]
 8003a92:	4408      	add	r0, r1
 8003a94:	6010      	str	r0, [r2, #0]
 8003a96:	e7da      	b.n	8003a4e <_free_r+0x22>
 8003a98:	d902      	bls.n	8003aa0 <_free_r+0x74>
 8003a9a:	230c      	movs	r3, #12
 8003a9c:	602b      	str	r3, [r5, #0]
 8003a9e:	e7d6      	b.n	8003a4e <_free_r+0x22>
 8003aa0:	6820      	ldr	r0, [r4, #0]
 8003aa2:	1821      	adds	r1, r4, r0
 8003aa4:	428b      	cmp	r3, r1
 8003aa6:	bf04      	itt	eq
 8003aa8:	6819      	ldreq	r1, [r3, #0]
 8003aaa:	685b      	ldreq	r3, [r3, #4]
 8003aac:	6063      	str	r3, [r4, #4]
 8003aae:	bf04      	itt	eq
 8003ab0:	1809      	addeq	r1, r1, r0
 8003ab2:	6021      	streq	r1, [r4, #0]
 8003ab4:	6054      	str	r4, [r2, #4]
 8003ab6:	e7ca      	b.n	8003a4e <_free_r+0x22>
 8003ab8:	bd38      	pop	{r3, r4, r5, pc}
 8003aba:	bf00      	nop
 8003abc:	200002d8 	.word	0x200002d8

08003ac0 <malloc>:
 8003ac0:	4b02      	ldr	r3, [pc, #8]	@ (8003acc <malloc+0xc>)
 8003ac2:	4601      	mov	r1, r0
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	f000 b825 	b.w	8003b14 <_malloc_r>
 8003aca:	bf00      	nop
 8003acc:	20000018 	.word	0x20000018

08003ad0 <sbrk_aligned>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	4e0f      	ldr	r6, [pc, #60]	@ (8003b10 <sbrk_aligned+0x40>)
 8003ad4:	460c      	mov	r4, r1
 8003ad6:	6831      	ldr	r1, [r6, #0]
 8003ad8:	4605      	mov	r5, r0
 8003ada:	b911      	cbnz	r1, 8003ae2 <sbrk_aligned+0x12>
 8003adc:	f000 f964 	bl	8003da8 <_sbrk_r>
 8003ae0:	6030      	str	r0, [r6, #0]
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	f000 f95f 	bl	8003da8 <_sbrk_r>
 8003aea:	1c43      	adds	r3, r0, #1
 8003aec:	d103      	bne.n	8003af6 <sbrk_aligned+0x26>
 8003aee:	f04f 34ff 	mov.w	r4, #4294967295
 8003af2:	4620      	mov	r0, r4
 8003af4:	bd70      	pop	{r4, r5, r6, pc}
 8003af6:	1cc4      	adds	r4, r0, #3
 8003af8:	f024 0403 	bic.w	r4, r4, #3
 8003afc:	42a0      	cmp	r0, r4
 8003afe:	d0f8      	beq.n	8003af2 <sbrk_aligned+0x22>
 8003b00:	1a21      	subs	r1, r4, r0
 8003b02:	4628      	mov	r0, r5
 8003b04:	f000 f950 	bl	8003da8 <_sbrk_r>
 8003b08:	3001      	adds	r0, #1
 8003b0a:	d1f2      	bne.n	8003af2 <sbrk_aligned+0x22>
 8003b0c:	e7ef      	b.n	8003aee <sbrk_aligned+0x1e>
 8003b0e:	bf00      	nop
 8003b10:	200002d4 	.word	0x200002d4

08003b14 <_malloc_r>:
 8003b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b18:	1ccd      	adds	r5, r1, #3
 8003b1a:	f025 0503 	bic.w	r5, r5, #3
 8003b1e:	3508      	adds	r5, #8
 8003b20:	2d0c      	cmp	r5, #12
 8003b22:	bf38      	it	cc
 8003b24:	250c      	movcc	r5, #12
 8003b26:	2d00      	cmp	r5, #0
 8003b28:	4606      	mov	r6, r0
 8003b2a:	db01      	blt.n	8003b30 <_malloc_r+0x1c>
 8003b2c:	42a9      	cmp	r1, r5
 8003b2e:	d904      	bls.n	8003b3a <_malloc_r+0x26>
 8003b30:	230c      	movs	r3, #12
 8003b32:	6033      	str	r3, [r6, #0]
 8003b34:	2000      	movs	r0, #0
 8003b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c10 <_malloc_r+0xfc>
 8003b3e:	f000 f869 	bl	8003c14 <__malloc_lock>
 8003b42:	f8d8 3000 	ldr.w	r3, [r8]
 8003b46:	461c      	mov	r4, r3
 8003b48:	bb44      	cbnz	r4, 8003b9c <_malloc_r+0x88>
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	f7ff ffbf 	bl	8003ad0 <sbrk_aligned>
 8003b52:	1c43      	adds	r3, r0, #1
 8003b54:	4604      	mov	r4, r0
 8003b56:	d158      	bne.n	8003c0a <_malloc_r+0xf6>
 8003b58:	f8d8 4000 	ldr.w	r4, [r8]
 8003b5c:	4627      	mov	r7, r4
 8003b5e:	2f00      	cmp	r7, #0
 8003b60:	d143      	bne.n	8003bea <_malloc_r+0xd6>
 8003b62:	2c00      	cmp	r4, #0
 8003b64:	d04b      	beq.n	8003bfe <_malloc_r+0xea>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	4639      	mov	r1, r7
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	eb04 0903 	add.w	r9, r4, r3
 8003b70:	f000 f91a 	bl	8003da8 <_sbrk_r>
 8003b74:	4581      	cmp	r9, r0
 8003b76:	d142      	bne.n	8003bfe <_malloc_r+0xea>
 8003b78:	6821      	ldr	r1, [r4, #0]
 8003b7a:	1a6d      	subs	r5, r5, r1
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	4630      	mov	r0, r6
 8003b80:	f7ff ffa6 	bl	8003ad0 <sbrk_aligned>
 8003b84:	3001      	adds	r0, #1
 8003b86:	d03a      	beq.n	8003bfe <_malloc_r+0xea>
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	442b      	add	r3, r5
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	f8d8 3000 	ldr.w	r3, [r8]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	bb62      	cbnz	r2, 8003bf0 <_malloc_r+0xdc>
 8003b96:	f8c8 7000 	str.w	r7, [r8]
 8003b9a:	e00f      	b.n	8003bbc <_malloc_r+0xa8>
 8003b9c:	6822      	ldr	r2, [r4, #0]
 8003b9e:	1b52      	subs	r2, r2, r5
 8003ba0:	d420      	bmi.n	8003be4 <_malloc_r+0xd0>
 8003ba2:	2a0b      	cmp	r2, #11
 8003ba4:	d917      	bls.n	8003bd6 <_malloc_r+0xc2>
 8003ba6:	1961      	adds	r1, r4, r5
 8003ba8:	42a3      	cmp	r3, r4
 8003baa:	6025      	str	r5, [r4, #0]
 8003bac:	bf18      	it	ne
 8003bae:	6059      	strne	r1, [r3, #4]
 8003bb0:	6863      	ldr	r3, [r4, #4]
 8003bb2:	bf08      	it	eq
 8003bb4:	f8c8 1000 	streq.w	r1, [r8]
 8003bb8:	5162      	str	r2, [r4, r5]
 8003bba:	604b      	str	r3, [r1, #4]
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	f000 f82f 	bl	8003c20 <__malloc_unlock>
 8003bc2:	f104 000b 	add.w	r0, r4, #11
 8003bc6:	1d23      	adds	r3, r4, #4
 8003bc8:	f020 0007 	bic.w	r0, r0, #7
 8003bcc:	1ac2      	subs	r2, r0, r3
 8003bce:	bf1c      	itt	ne
 8003bd0:	1a1b      	subne	r3, r3, r0
 8003bd2:	50a3      	strne	r3, [r4, r2]
 8003bd4:	e7af      	b.n	8003b36 <_malloc_r+0x22>
 8003bd6:	6862      	ldr	r2, [r4, #4]
 8003bd8:	42a3      	cmp	r3, r4
 8003bda:	bf0c      	ite	eq
 8003bdc:	f8c8 2000 	streq.w	r2, [r8]
 8003be0:	605a      	strne	r2, [r3, #4]
 8003be2:	e7eb      	b.n	8003bbc <_malloc_r+0xa8>
 8003be4:	4623      	mov	r3, r4
 8003be6:	6864      	ldr	r4, [r4, #4]
 8003be8:	e7ae      	b.n	8003b48 <_malloc_r+0x34>
 8003bea:	463c      	mov	r4, r7
 8003bec:	687f      	ldr	r7, [r7, #4]
 8003bee:	e7b6      	b.n	8003b5e <_malloc_r+0x4a>
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	42a3      	cmp	r3, r4
 8003bf6:	d1fb      	bne.n	8003bf0 <_malloc_r+0xdc>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	6053      	str	r3, [r2, #4]
 8003bfc:	e7de      	b.n	8003bbc <_malloc_r+0xa8>
 8003bfe:	230c      	movs	r3, #12
 8003c00:	6033      	str	r3, [r6, #0]
 8003c02:	4630      	mov	r0, r6
 8003c04:	f000 f80c 	bl	8003c20 <__malloc_unlock>
 8003c08:	e794      	b.n	8003b34 <_malloc_r+0x20>
 8003c0a:	6005      	str	r5, [r0, #0]
 8003c0c:	e7d6      	b.n	8003bbc <_malloc_r+0xa8>
 8003c0e:	bf00      	nop
 8003c10:	200002d8 	.word	0x200002d8

08003c14 <__malloc_lock>:
 8003c14:	4801      	ldr	r0, [pc, #4]	@ (8003c1c <__malloc_lock+0x8>)
 8003c16:	f7ff beda 	b.w	80039ce <__retarget_lock_acquire_recursive>
 8003c1a:	bf00      	nop
 8003c1c:	200002d0 	.word	0x200002d0

08003c20 <__malloc_unlock>:
 8003c20:	4801      	ldr	r0, [pc, #4]	@ (8003c28 <__malloc_unlock+0x8>)
 8003c22:	f7ff bed5 	b.w	80039d0 <__retarget_lock_release_recursive>
 8003c26:	bf00      	nop
 8003c28:	200002d0 	.word	0x200002d0

08003c2c <__sflush_r>:
 8003c2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c34:	0716      	lsls	r6, r2, #28
 8003c36:	4605      	mov	r5, r0
 8003c38:	460c      	mov	r4, r1
 8003c3a:	d454      	bmi.n	8003ce6 <__sflush_r+0xba>
 8003c3c:	684b      	ldr	r3, [r1, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	dc02      	bgt.n	8003c48 <__sflush_r+0x1c>
 8003c42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	dd48      	ble.n	8003cda <__sflush_r+0xae>
 8003c48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c4a:	2e00      	cmp	r6, #0
 8003c4c:	d045      	beq.n	8003cda <__sflush_r+0xae>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003c54:	682f      	ldr	r7, [r5, #0]
 8003c56:	6a21      	ldr	r1, [r4, #32]
 8003c58:	602b      	str	r3, [r5, #0]
 8003c5a:	d030      	beq.n	8003cbe <__sflush_r+0x92>
 8003c5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c5e:	89a3      	ldrh	r3, [r4, #12]
 8003c60:	0759      	lsls	r1, r3, #29
 8003c62:	d505      	bpl.n	8003c70 <__sflush_r+0x44>
 8003c64:	6863      	ldr	r3, [r4, #4]
 8003c66:	1ad2      	subs	r2, r2, r3
 8003c68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c6a:	b10b      	cbz	r3, 8003c70 <__sflush_r+0x44>
 8003c6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c6e:	1ad2      	subs	r2, r2, r3
 8003c70:	2300      	movs	r3, #0
 8003c72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c74:	6a21      	ldr	r1, [r4, #32]
 8003c76:	4628      	mov	r0, r5
 8003c78:	47b0      	blx	r6
 8003c7a:	1c43      	adds	r3, r0, #1
 8003c7c:	89a3      	ldrh	r3, [r4, #12]
 8003c7e:	d106      	bne.n	8003c8e <__sflush_r+0x62>
 8003c80:	6829      	ldr	r1, [r5, #0]
 8003c82:	291d      	cmp	r1, #29
 8003c84:	d82b      	bhi.n	8003cde <__sflush_r+0xb2>
 8003c86:	4a2a      	ldr	r2, [pc, #168]	@ (8003d30 <__sflush_r+0x104>)
 8003c88:	410a      	asrs	r2, r1
 8003c8a:	07d6      	lsls	r6, r2, #31
 8003c8c:	d427      	bmi.n	8003cde <__sflush_r+0xb2>
 8003c8e:	2200      	movs	r2, #0
 8003c90:	6062      	str	r2, [r4, #4]
 8003c92:	04d9      	lsls	r1, r3, #19
 8003c94:	6922      	ldr	r2, [r4, #16]
 8003c96:	6022      	str	r2, [r4, #0]
 8003c98:	d504      	bpl.n	8003ca4 <__sflush_r+0x78>
 8003c9a:	1c42      	adds	r2, r0, #1
 8003c9c:	d101      	bne.n	8003ca2 <__sflush_r+0x76>
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	b903      	cbnz	r3, 8003ca4 <__sflush_r+0x78>
 8003ca2:	6560      	str	r0, [r4, #84]	@ 0x54
 8003ca4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ca6:	602f      	str	r7, [r5, #0]
 8003ca8:	b1b9      	cbz	r1, 8003cda <__sflush_r+0xae>
 8003caa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003cae:	4299      	cmp	r1, r3
 8003cb0:	d002      	beq.n	8003cb8 <__sflush_r+0x8c>
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	f7ff feba 	bl	8003a2c <_free_r>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	6363      	str	r3, [r4, #52]	@ 0x34
 8003cbc:	e00d      	b.n	8003cda <__sflush_r+0xae>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	47b0      	blx	r6
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	1c50      	adds	r0, r2, #1
 8003cc8:	d1c9      	bne.n	8003c5e <__sflush_r+0x32>
 8003cca:	682b      	ldr	r3, [r5, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0c6      	beq.n	8003c5e <__sflush_r+0x32>
 8003cd0:	2b1d      	cmp	r3, #29
 8003cd2:	d001      	beq.n	8003cd8 <__sflush_r+0xac>
 8003cd4:	2b16      	cmp	r3, #22
 8003cd6:	d11e      	bne.n	8003d16 <__sflush_r+0xea>
 8003cd8:	602f      	str	r7, [r5, #0]
 8003cda:	2000      	movs	r0, #0
 8003cdc:	e022      	b.n	8003d24 <__sflush_r+0xf8>
 8003cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ce2:	b21b      	sxth	r3, r3
 8003ce4:	e01b      	b.n	8003d1e <__sflush_r+0xf2>
 8003ce6:	690f      	ldr	r7, [r1, #16]
 8003ce8:	2f00      	cmp	r7, #0
 8003cea:	d0f6      	beq.n	8003cda <__sflush_r+0xae>
 8003cec:	0793      	lsls	r3, r2, #30
 8003cee:	680e      	ldr	r6, [r1, #0]
 8003cf0:	bf08      	it	eq
 8003cf2:	694b      	ldreq	r3, [r1, #20]
 8003cf4:	600f      	str	r7, [r1, #0]
 8003cf6:	bf18      	it	ne
 8003cf8:	2300      	movne	r3, #0
 8003cfa:	eba6 0807 	sub.w	r8, r6, r7
 8003cfe:	608b      	str	r3, [r1, #8]
 8003d00:	f1b8 0f00 	cmp.w	r8, #0
 8003d04:	dde9      	ble.n	8003cda <__sflush_r+0xae>
 8003d06:	6a21      	ldr	r1, [r4, #32]
 8003d08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003d0a:	4643      	mov	r3, r8
 8003d0c:	463a      	mov	r2, r7
 8003d0e:	4628      	mov	r0, r5
 8003d10:	47b0      	blx	r6
 8003d12:	2800      	cmp	r0, #0
 8003d14:	dc08      	bgt.n	8003d28 <__sflush_r+0xfc>
 8003d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d1e:	81a3      	strh	r3, [r4, #12]
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295
 8003d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d28:	4407      	add	r7, r0
 8003d2a:	eba8 0800 	sub.w	r8, r8, r0
 8003d2e:	e7e7      	b.n	8003d00 <__sflush_r+0xd4>
 8003d30:	dfbffffe 	.word	0xdfbffffe

08003d34 <_fflush_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	690b      	ldr	r3, [r1, #16]
 8003d38:	4605      	mov	r5, r0
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	b913      	cbnz	r3, 8003d44 <_fflush_r+0x10>
 8003d3e:	2500      	movs	r5, #0
 8003d40:	4628      	mov	r0, r5
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
 8003d44:	b118      	cbz	r0, 8003d4e <_fflush_r+0x1a>
 8003d46:	6a03      	ldr	r3, [r0, #32]
 8003d48:	b90b      	cbnz	r3, 8003d4e <_fflush_r+0x1a>
 8003d4a:	f7ff fd4d 	bl	80037e8 <__sinit>
 8003d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f3      	beq.n	8003d3e <_fflush_r+0xa>
 8003d56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d58:	07d0      	lsls	r0, r2, #31
 8003d5a:	d404      	bmi.n	8003d66 <_fflush_r+0x32>
 8003d5c:	0599      	lsls	r1, r3, #22
 8003d5e:	d402      	bmi.n	8003d66 <_fflush_r+0x32>
 8003d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d62:	f7ff fe34 	bl	80039ce <__retarget_lock_acquire_recursive>
 8003d66:	4628      	mov	r0, r5
 8003d68:	4621      	mov	r1, r4
 8003d6a:	f7ff ff5f 	bl	8003c2c <__sflush_r>
 8003d6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d70:	07da      	lsls	r2, r3, #31
 8003d72:	4605      	mov	r5, r0
 8003d74:	d4e4      	bmi.n	8003d40 <_fflush_r+0xc>
 8003d76:	89a3      	ldrh	r3, [r4, #12]
 8003d78:	059b      	lsls	r3, r3, #22
 8003d7a:	d4e1      	bmi.n	8003d40 <_fflush_r+0xc>
 8003d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d7e:	f7ff fe27 	bl	80039d0 <__retarget_lock_release_recursive>
 8003d82:	e7dd      	b.n	8003d40 <_fflush_r+0xc>

08003d84 <fiprintf>:
 8003d84:	b40e      	push	{r1, r2, r3}
 8003d86:	b503      	push	{r0, r1, lr}
 8003d88:	4601      	mov	r1, r0
 8003d8a:	ab03      	add	r3, sp, #12
 8003d8c:	4805      	ldr	r0, [pc, #20]	@ (8003da4 <fiprintf+0x20>)
 8003d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d92:	6800      	ldr	r0, [r0, #0]
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	f000 f847 	bl	8003e28 <_vfiprintf_r>
 8003d9a:	b002      	add	sp, #8
 8003d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003da0:	b003      	add	sp, #12
 8003da2:	4770      	bx	lr
 8003da4:	20000018 	.word	0x20000018

08003da8 <_sbrk_r>:
 8003da8:	b538      	push	{r3, r4, r5, lr}
 8003daa:	4d06      	ldr	r5, [pc, #24]	@ (8003dc4 <_sbrk_r+0x1c>)
 8003dac:	2300      	movs	r3, #0
 8003dae:	4604      	mov	r4, r0
 8003db0:	4608      	mov	r0, r1
 8003db2:	602b      	str	r3, [r5, #0]
 8003db4:	f7fd f8f0 	bl	8000f98 <_sbrk>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d102      	bne.n	8003dc2 <_sbrk_r+0x1a>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	b103      	cbz	r3, 8003dc2 <_sbrk_r+0x1a>
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	bd38      	pop	{r3, r4, r5, pc}
 8003dc4:	200002cc 	.word	0x200002cc

08003dc8 <abort>:
 8003dc8:	b508      	push	{r3, lr}
 8003dca:	2006      	movs	r0, #6
 8003dcc:	f000 fb8e 	bl	80044ec <raise>
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	f7fd f868 	bl	8000ea6 <_exit>

08003dd6 <__sfputc_r>:
 8003dd6:	6893      	ldr	r3, [r2, #8]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	b410      	push	{r4}
 8003dde:	6093      	str	r3, [r2, #8]
 8003de0:	da08      	bge.n	8003df4 <__sfputc_r+0x1e>
 8003de2:	6994      	ldr	r4, [r2, #24]
 8003de4:	42a3      	cmp	r3, r4
 8003de6:	db01      	blt.n	8003dec <__sfputc_r+0x16>
 8003de8:	290a      	cmp	r1, #10
 8003dea:	d103      	bne.n	8003df4 <__sfputc_r+0x1e>
 8003dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003df0:	f000 bac0 	b.w	8004374 <__swbuf_r>
 8003df4:	6813      	ldr	r3, [r2, #0]
 8003df6:	1c58      	adds	r0, r3, #1
 8003df8:	6010      	str	r0, [r2, #0]
 8003dfa:	7019      	strb	r1, [r3, #0]
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <__sfputs_r>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	4606      	mov	r6, r0
 8003e08:	460f      	mov	r7, r1
 8003e0a:	4614      	mov	r4, r2
 8003e0c:	18d5      	adds	r5, r2, r3
 8003e0e:	42ac      	cmp	r4, r5
 8003e10:	d101      	bne.n	8003e16 <__sfputs_r+0x12>
 8003e12:	2000      	movs	r0, #0
 8003e14:	e007      	b.n	8003e26 <__sfputs_r+0x22>
 8003e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e1a:	463a      	mov	r2, r7
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f7ff ffda 	bl	8003dd6 <__sfputc_r>
 8003e22:	1c43      	adds	r3, r0, #1
 8003e24:	d1f3      	bne.n	8003e0e <__sfputs_r+0xa>
 8003e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e28 <_vfiprintf_r>:
 8003e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2c:	460d      	mov	r5, r1
 8003e2e:	b09d      	sub	sp, #116	@ 0x74
 8003e30:	4614      	mov	r4, r2
 8003e32:	4698      	mov	r8, r3
 8003e34:	4606      	mov	r6, r0
 8003e36:	b118      	cbz	r0, 8003e40 <_vfiprintf_r+0x18>
 8003e38:	6a03      	ldr	r3, [r0, #32]
 8003e3a:	b90b      	cbnz	r3, 8003e40 <_vfiprintf_r+0x18>
 8003e3c:	f7ff fcd4 	bl	80037e8 <__sinit>
 8003e40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e42:	07d9      	lsls	r1, r3, #31
 8003e44:	d405      	bmi.n	8003e52 <_vfiprintf_r+0x2a>
 8003e46:	89ab      	ldrh	r3, [r5, #12]
 8003e48:	059a      	lsls	r2, r3, #22
 8003e4a:	d402      	bmi.n	8003e52 <_vfiprintf_r+0x2a>
 8003e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e4e:	f7ff fdbe 	bl	80039ce <__retarget_lock_acquire_recursive>
 8003e52:	89ab      	ldrh	r3, [r5, #12]
 8003e54:	071b      	lsls	r3, r3, #28
 8003e56:	d501      	bpl.n	8003e5c <_vfiprintf_r+0x34>
 8003e58:	692b      	ldr	r3, [r5, #16]
 8003e5a:	b99b      	cbnz	r3, 8003e84 <_vfiprintf_r+0x5c>
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	4630      	mov	r0, r6
 8003e60:	f000 fac6 	bl	80043f0 <__swsetup_r>
 8003e64:	b170      	cbz	r0, 8003e84 <_vfiprintf_r+0x5c>
 8003e66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e68:	07dc      	lsls	r4, r3, #31
 8003e6a:	d504      	bpl.n	8003e76 <_vfiprintf_r+0x4e>
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e70:	b01d      	add	sp, #116	@ 0x74
 8003e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e76:	89ab      	ldrh	r3, [r5, #12]
 8003e78:	0598      	lsls	r0, r3, #22
 8003e7a:	d4f7      	bmi.n	8003e6c <_vfiprintf_r+0x44>
 8003e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e7e:	f7ff fda7 	bl	80039d0 <__retarget_lock_release_recursive>
 8003e82:	e7f3      	b.n	8003e6c <_vfiprintf_r+0x44>
 8003e84:	2300      	movs	r3, #0
 8003e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e88:	2320      	movs	r3, #32
 8003e8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e92:	2330      	movs	r3, #48	@ 0x30
 8003e94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004044 <_vfiprintf_r+0x21c>
 8003e98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e9c:	f04f 0901 	mov.w	r9, #1
 8003ea0:	4623      	mov	r3, r4
 8003ea2:	469a      	mov	sl, r3
 8003ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ea8:	b10a      	cbz	r2, 8003eae <_vfiprintf_r+0x86>
 8003eaa:	2a25      	cmp	r2, #37	@ 0x25
 8003eac:	d1f9      	bne.n	8003ea2 <_vfiprintf_r+0x7a>
 8003eae:	ebba 0b04 	subs.w	fp, sl, r4
 8003eb2:	d00b      	beq.n	8003ecc <_vfiprintf_r+0xa4>
 8003eb4:	465b      	mov	r3, fp
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	4629      	mov	r1, r5
 8003eba:	4630      	mov	r0, r6
 8003ebc:	f7ff ffa2 	bl	8003e04 <__sfputs_r>
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	f000 80a7 	beq.w	8004014 <_vfiprintf_r+0x1ec>
 8003ec6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ec8:	445a      	add	r2, fp
 8003eca:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 809f 	beq.w	8004014 <_vfiprintf_r+0x1ec>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8003edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ee0:	f10a 0a01 	add.w	sl, sl, #1
 8003ee4:	9304      	str	r3, [sp, #16]
 8003ee6:	9307      	str	r3, [sp, #28]
 8003ee8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003eec:	931a      	str	r3, [sp, #104]	@ 0x68
 8003eee:	4654      	mov	r4, sl
 8003ef0:	2205      	movs	r2, #5
 8003ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef6:	4853      	ldr	r0, [pc, #332]	@ (8004044 <_vfiprintf_r+0x21c>)
 8003ef8:	f7fc f972 	bl	80001e0 <memchr>
 8003efc:	9a04      	ldr	r2, [sp, #16]
 8003efe:	b9d8      	cbnz	r0, 8003f38 <_vfiprintf_r+0x110>
 8003f00:	06d1      	lsls	r1, r2, #27
 8003f02:	bf44      	itt	mi
 8003f04:	2320      	movmi	r3, #32
 8003f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f0a:	0713      	lsls	r3, r2, #28
 8003f0c:	bf44      	itt	mi
 8003f0e:	232b      	movmi	r3, #43	@ 0x2b
 8003f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f14:	f89a 3000 	ldrb.w	r3, [sl]
 8003f18:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f1a:	d015      	beq.n	8003f48 <_vfiprintf_r+0x120>
 8003f1c:	9a07      	ldr	r2, [sp, #28]
 8003f1e:	4654      	mov	r4, sl
 8003f20:	2000      	movs	r0, #0
 8003f22:	f04f 0c0a 	mov.w	ip, #10
 8003f26:	4621      	mov	r1, r4
 8003f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f2c:	3b30      	subs	r3, #48	@ 0x30
 8003f2e:	2b09      	cmp	r3, #9
 8003f30:	d94b      	bls.n	8003fca <_vfiprintf_r+0x1a2>
 8003f32:	b1b0      	cbz	r0, 8003f62 <_vfiprintf_r+0x13a>
 8003f34:	9207      	str	r2, [sp, #28]
 8003f36:	e014      	b.n	8003f62 <_vfiprintf_r+0x13a>
 8003f38:	eba0 0308 	sub.w	r3, r0, r8
 8003f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8003f40:	4313      	orrs	r3, r2
 8003f42:	9304      	str	r3, [sp, #16]
 8003f44:	46a2      	mov	sl, r4
 8003f46:	e7d2      	b.n	8003eee <_vfiprintf_r+0xc6>
 8003f48:	9b03      	ldr	r3, [sp, #12]
 8003f4a:	1d19      	adds	r1, r3, #4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	9103      	str	r1, [sp, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bfbb      	ittet	lt
 8003f54:	425b      	neglt	r3, r3
 8003f56:	f042 0202 	orrlt.w	r2, r2, #2
 8003f5a:	9307      	strge	r3, [sp, #28]
 8003f5c:	9307      	strlt	r3, [sp, #28]
 8003f5e:	bfb8      	it	lt
 8003f60:	9204      	strlt	r2, [sp, #16]
 8003f62:	7823      	ldrb	r3, [r4, #0]
 8003f64:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f66:	d10a      	bne.n	8003f7e <_vfiprintf_r+0x156>
 8003f68:	7863      	ldrb	r3, [r4, #1]
 8003f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f6c:	d132      	bne.n	8003fd4 <_vfiprintf_r+0x1ac>
 8003f6e:	9b03      	ldr	r3, [sp, #12]
 8003f70:	1d1a      	adds	r2, r3, #4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	9203      	str	r2, [sp, #12]
 8003f76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f7a:	3402      	adds	r4, #2
 8003f7c:	9305      	str	r3, [sp, #20]
 8003f7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004054 <_vfiprintf_r+0x22c>
 8003f82:	7821      	ldrb	r1, [r4, #0]
 8003f84:	2203      	movs	r2, #3
 8003f86:	4650      	mov	r0, sl
 8003f88:	f7fc f92a 	bl	80001e0 <memchr>
 8003f8c:	b138      	cbz	r0, 8003f9e <_vfiprintf_r+0x176>
 8003f8e:	9b04      	ldr	r3, [sp, #16]
 8003f90:	eba0 000a 	sub.w	r0, r0, sl
 8003f94:	2240      	movs	r2, #64	@ 0x40
 8003f96:	4082      	lsls	r2, r0
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	3401      	adds	r4, #1
 8003f9c:	9304      	str	r3, [sp, #16]
 8003f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa2:	4829      	ldr	r0, [pc, #164]	@ (8004048 <_vfiprintf_r+0x220>)
 8003fa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003fa8:	2206      	movs	r2, #6
 8003faa:	f7fc f919 	bl	80001e0 <memchr>
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	d03f      	beq.n	8004032 <_vfiprintf_r+0x20a>
 8003fb2:	4b26      	ldr	r3, [pc, #152]	@ (800404c <_vfiprintf_r+0x224>)
 8003fb4:	bb1b      	cbnz	r3, 8003ffe <_vfiprintf_r+0x1d6>
 8003fb6:	9b03      	ldr	r3, [sp, #12]
 8003fb8:	3307      	adds	r3, #7
 8003fba:	f023 0307 	bic.w	r3, r3, #7
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	9303      	str	r3, [sp, #12]
 8003fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fc4:	443b      	add	r3, r7
 8003fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fc8:	e76a      	b.n	8003ea0 <_vfiprintf_r+0x78>
 8003fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fce:	460c      	mov	r4, r1
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	e7a8      	b.n	8003f26 <_vfiprintf_r+0xfe>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	3401      	adds	r4, #1
 8003fd8:	9305      	str	r3, [sp, #20]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	f04f 0c0a 	mov.w	ip, #10
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fe6:	3a30      	subs	r2, #48	@ 0x30
 8003fe8:	2a09      	cmp	r2, #9
 8003fea:	d903      	bls.n	8003ff4 <_vfiprintf_r+0x1cc>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0c6      	beq.n	8003f7e <_vfiprintf_r+0x156>
 8003ff0:	9105      	str	r1, [sp, #20]
 8003ff2:	e7c4      	b.n	8003f7e <_vfiprintf_r+0x156>
 8003ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e7f0      	b.n	8003fe0 <_vfiprintf_r+0x1b8>
 8003ffe:	ab03      	add	r3, sp, #12
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	462a      	mov	r2, r5
 8004004:	4b12      	ldr	r3, [pc, #72]	@ (8004050 <_vfiprintf_r+0x228>)
 8004006:	a904      	add	r1, sp, #16
 8004008:	4630      	mov	r0, r6
 800400a:	f3af 8000 	nop.w
 800400e:	4607      	mov	r7, r0
 8004010:	1c78      	adds	r0, r7, #1
 8004012:	d1d6      	bne.n	8003fc2 <_vfiprintf_r+0x19a>
 8004014:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004016:	07d9      	lsls	r1, r3, #31
 8004018:	d405      	bmi.n	8004026 <_vfiprintf_r+0x1fe>
 800401a:	89ab      	ldrh	r3, [r5, #12]
 800401c:	059a      	lsls	r2, r3, #22
 800401e:	d402      	bmi.n	8004026 <_vfiprintf_r+0x1fe>
 8004020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004022:	f7ff fcd5 	bl	80039d0 <__retarget_lock_release_recursive>
 8004026:	89ab      	ldrh	r3, [r5, #12]
 8004028:	065b      	lsls	r3, r3, #25
 800402a:	f53f af1f 	bmi.w	8003e6c <_vfiprintf_r+0x44>
 800402e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004030:	e71e      	b.n	8003e70 <_vfiprintf_r+0x48>
 8004032:	ab03      	add	r3, sp, #12
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	462a      	mov	r2, r5
 8004038:	4b05      	ldr	r3, [pc, #20]	@ (8004050 <_vfiprintf_r+0x228>)
 800403a:	a904      	add	r1, sp, #16
 800403c:	4630      	mov	r0, r6
 800403e:	f000 f879 	bl	8004134 <_printf_i>
 8004042:	e7e4      	b.n	800400e <_vfiprintf_r+0x1e6>
 8004044:	080047c7 	.word	0x080047c7
 8004048:	080047d1 	.word	0x080047d1
 800404c:	00000000 	.word	0x00000000
 8004050:	08003e05 	.word	0x08003e05
 8004054:	080047cd 	.word	0x080047cd

08004058 <_printf_common>:
 8004058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800405c:	4616      	mov	r6, r2
 800405e:	4698      	mov	r8, r3
 8004060:	688a      	ldr	r2, [r1, #8]
 8004062:	690b      	ldr	r3, [r1, #16]
 8004064:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004068:	4293      	cmp	r3, r2
 800406a:	bfb8      	it	lt
 800406c:	4613      	movlt	r3, r2
 800406e:	6033      	str	r3, [r6, #0]
 8004070:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004074:	4607      	mov	r7, r0
 8004076:	460c      	mov	r4, r1
 8004078:	b10a      	cbz	r2, 800407e <_printf_common+0x26>
 800407a:	3301      	adds	r3, #1
 800407c:	6033      	str	r3, [r6, #0]
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	0699      	lsls	r1, r3, #26
 8004082:	bf42      	ittt	mi
 8004084:	6833      	ldrmi	r3, [r6, #0]
 8004086:	3302      	addmi	r3, #2
 8004088:	6033      	strmi	r3, [r6, #0]
 800408a:	6825      	ldr	r5, [r4, #0]
 800408c:	f015 0506 	ands.w	r5, r5, #6
 8004090:	d106      	bne.n	80040a0 <_printf_common+0x48>
 8004092:	f104 0a19 	add.w	sl, r4, #25
 8004096:	68e3      	ldr	r3, [r4, #12]
 8004098:	6832      	ldr	r2, [r6, #0]
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	42ab      	cmp	r3, r5
 800409e:	dc26      	bgt.n	80040ee <_printf_common+0x96>
 80040a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80040a4:	6822      	ldr	r2, [r4, #0]
 80040a6:	3b00      	subs	r3, #0
 80040a8:	bf18      	it	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	0692      	lsls	r2, r2, #26
 80040ae:	d42b      	bmi.n	8004108 <_printf_common+0xb0>
 80040b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040b4:	4641      	mov	r1, r8
 80040b6:	4638      	mov	r0, r7
 80040b8:	47c8      	blx	r9
 80040ba:	3001      	adds	r0, #1
 80040bc:	d01e      	beq.n	80040fc <_printf_common+0xa4>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	6922      	ldr	r2, [r4, #16]
 80040c2:	f003 0306 	and.w	r3, r3, #6
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	bf02      	ittt	eq
 80040ca:	68e5      	ldreq	r5, [r4, #12]
 80040cc:	6833      	ldreq	r3, [r6, #0]
 80040ce:	1aed      	subeq	r5, r5, r3
 80040d0:	68a3      	ldr	r3, [r4, #8]
 80040d2:	bf0c      	ite	eq
 80040d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040d8:	2500      	movne	r5, #0
 80040da:	4293      	cmp	r3, r2
 80040dc:	bfc4      	itt	gt
 80040de:	1a9b      	subgt	r3, r3, r2
 80040e0:	18ed      	addgt	r5, r5, r3
 80040e2:	2600      	movs	r6, #0
 80040e4:	341a      	adds	r4, #26
 80040e6:	42b5      	cmp	r5, r6
 80040e8:	d11a      	bne.n	8004120 <_printf_common+0xc8>
 80040ea:	2000      	movs	r0, #0
 80040ec:	e008      	b.n	8004100 <_printf_common+0xa8>
 80040ee:	2301      	movs	r3, #1
 80040f0:	4652      	mov	r2, sl
 80040f2:	4641      	mov	r1, r8
 80040f4:	4638      	mov	r0, r7
 80040f6:	47c8      	blx	r9
 80040f8:	3001      	adds	r0, #1
 80040fa:	d103      	bne.n	8004104 <_printf_common+0xac>
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004104:	3501      	adds	r5, #1
 8004106:	e7c6      	b.n	8004096 <_printf_common+0x3e>
 8004108:	18e1      	adds	r1, r4, r3
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	2030      	movs	r0, #48	@ 0x30
 800410e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004112:	4422      	add	r2, r4
 8004114:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004118:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800411c:	3302      	adds	r3, #2
 800411e:	e7c7      	b.n	80040b0 <_printf_common+0x58>
 8004120:	2301      	movs	r3, #1
 8004122:	4622      	mov	r2, r4
 8004124:	4641      	mov	r1, r8
 8004126:	4638      	mov	r0, r7
 8004128:	47c8      	blx	r9
 800412a:	3001      	adds	r0, #1
 800412c:	d0e6      	beq.n	80040fc <_printf_common+0xa4>
 800412e:	3601      	adds	r6, #1
 8004130:	e7d9      	b.n	80040e6 <_printf_common+0x8e>
	...

08004134 <_printf_i>:
 8004134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004138:	7e0f      	ldrb	r7, [r1, #24]
 800413a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800413c:	2f78      	cmp	r7, #120	@ 0x78
 800413e:	4691      	mov	r9, r2
 8004140:	4680      	mov	r8, r0
 8004142:	460c      	mov	r4, r1
 8004144:	469a      	mov	sl, r3
 8004146:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800414a:	d807      	bhi.n	800415c <_printf_i+0x28>
 800414c:	2f62      	cmp	r7, #98	@ 0x62
 800414e:	d80a      	bhi.n	8004166 <_printf_i+0x32>
 8004150:	2f00      	cmp	r7, #0
 8004152:	f000 80d2 	beq.w	80042fa <_printf_i+0x1c6>
 8004156:	2f58      	cmp	r7, #88	@ 0x58
 8004158:	f000 80b9 	beq.w	80042ce <_printf_i+0x19a>
 800415c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004160:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004164:	e03a      	b.n	80041dc <_printf_i+0xa8>
 8004166:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800416a:	2b15      	cmp	r3, #21
 800416c:	d8f6      	bhi.n	800415c <_printf_i+0x28>
 800416e:	a101      	add	r1, pc, #4	@ (adr r1, 8004174 <_printf_i+0x40>)
 8004170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004174:	080041cd 	.word	0x080041cd
 8004178:	080041e1 	.word	0x080041e1
 800417c:	0800415d 	.word	0x0800415d
 8004180:	0800415d 	.word	0x0800415d
 8004184:	0800415d 	.word	0x0800415d
 8004188:	0800415d 	.word	0x0800415d
 800418c:	080041e1 	.word	0x080041e1
 8004190:	0800415d 	.word	0x0800415d
 8004194:	0800415d 	.word	0x0800415d
 8004198:	0800415d 	.word	0x0800415d
 800419c:	0800415d 	.word	0x0800415d
 80041a0:	080042e1 	.word	0x080042e1
 80041a4:	0800420b 	.word	0x0800420b
 80041a8:	0800429b 	.word	0x0800429b
 80041ac:	0800415d 	.word	0x0800415d
 80041b0:	0800415d 	.word	0x0800415d
 80041b4:	08004303 	.word	0x08004303
 80041b8:	0800415d 	.word	0x0800415d
 80041bc:	0800420b 	.word	0x0800420b
 80041c0:	0800415d 	.word	0x0800415d
 80041c4:	0800415d 	.word	0x0800415d
 80041c8:	080042a3 	.word	0x080042a3
 80041cc:	6833      	ldr	r3, [r6, #0]
 80041ce:	1d1a      	adds	r2, r3, #4
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6032      	str	r2, [r6, #0]
 80041d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041dc:	2301      	movs	r3, #1
 80041de:	e09d      	b.n	800431c <_printf_i+0x1e8>
 80041e0:	6833      	ldr	r3, [r6, #0]
 80041e2:	6820      	ldr	r0, [r4, #0]
 80041e4:	1d19      	adds	r1, r3, #4
 80041e6:	6031      	str	r1, [r6, #0]
 80041e8:	0606      	lsls	r6, r0, #24
 80041ea:	d501      	bpl.n	80041f0 <_printf_i+0xbc>
 80041ec:	681d      	ldr	r5, [r3, #0]
 80041ee:	e003      	b.n	80041f8 <_printf_i+0xc4>
 80041f0:	0645      	lsls	r5, r0, #25
 80041f2:	d5fb      	bpl.n	80041ec <_printf_i+0xb8>
 80041f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041f8:	2d00      	cmp	r5, #0
 80041fa:	da03      	bge.n	8004204 <_printf_i+0xd0>
 80041fc:	232d      	movs	r3, #45	@ 0x2d
 80041fe:	426d      	negs	r5, r5
 8004200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004204:	4859      	ldr	r0, [pc, #356]	@ (800436c <_printf_i+0x238>)
 8004206:	230a      	movs	r3, #10
 8004208:	e011      	b.n	800422e <_printf_i+0xfa>
 800420a:	6821      	ldr	r1, [r4, #0]
 800420c:	6833      	ldr	r3, [r6, #0]
 800420e:	0608      	lsls	r0, r1, #24
 8004210:	f853 5b04 	ldr.w	r5, [r3], #4
 8004214:	d402      	bmi.n	800421c <_printf_i+0xe8>
 8004216:	0649      	lsls	r1, r1, #25
 8004218:	bf48      	it	mi
 800421a:	b2ad      	uxthmi	r5, r5
 800421c:	2f6f      	cmp	r7, #111	@ 0x6f
 800421e:	4853      	ldr	r0, [pc, #332]	@ (800436c <_printf_i+0x238>)
 8004220:	6033      	str	r3, [r6, #0]
 8004222:	bf14      	ite	ne
 8004224:	230a      	movne	r3, #10
 8004226:	2308      	moveq	r3, #8
 8004228:	2100      	movs	r1, #0
 800422a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800422e:	6866      	ldr	r6, [r4, #4]
 8004230:	60a6      	str	r6, [r4, #8]
 8004232:	2e00      	cmp	r6, #0
 8004234:	bfa2      	ittt	ge
 8004236:	6821      	ldrge	r1, [r4, #0]
 8004238:	f021 0104 	bicge.w	r1, r1, #4
 800423c:	6021      	strge	r1, [r4, #0]
 800423e:	b90d      	cbnz	r5, 8004244 <_printf_i+0x110>
 8004240:	2e00      	cmp	r6, #0
 8004242:	d04b      	beq.n	80042dc <_printf_i+0x1a8>
 8004244:	4616      	mov	r6, r2
 8004246:	fbb5 f1f3 	udiv	r1, r5, r3
 800424a:	fb03 5711 	mls	r7, r3, r1, r5
 800424e:	5dc7      	ldrb	r7, [r0, r7]
 8004250:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004254:	462f      	mov	r7, r5
 8004256:	42bb      	cmp	r3, r7
 8004258:	460d      	mov	r5, r1
 800425a:	d9f4      	bls.n	8004246 <_printf_i+0x112>
 800425c:	2b08      	cmp	r3, #8
 800425e:	d10b      	bne.n	8004278 <_printf_i+0x144>
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	07df      	lsls	r7, r3, #31
 8004264:	d508      	bpl.n	8004278 <_printf_i+0x144>
 8004266:	6923      	ldr	r3, [r4, #16]
 8004268:	6861      	ldr	r1, [r4, #4]
 800426a:	4299      	cmp	r1, r3
 800426c:	bfde      	ittt	le
 800426e:	2330      	movle	r3, #48	@ 0x30
 8004270:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004274:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004278:	1b92      	subs	r2, r2, r6
 800427a:	6122      	str	r2, [r4, #16]
 800427c:	f8cd a000 	str.w	sl, [sp]
 8004280:	464b      	mov	r3, r9
 8004282:	aa03      	add	r2, sp, #12
 8004284:	4621      	mov	r1, r4
 8004286:	4640      	mov	r0, r8
 8004288:	f7ff fee6 	bl	8004058 <_printf_common>
 800428c:	3001      	adds	r0, #1
 800428e:	d14a      	bne.n	8004326 <_printf_i+0x1f2>
 8004290:	f04f 30ff 	mov.w	r0, #4294967295
 8004294:	b004      	add	sp, #16
 8004296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	f043 0320 	orr.w	r3, r3, #32
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	4833      	ldr	r0, [pc, #204]	@ (8004370 <_printf_i+0x23c>)
 80042a4:	2778      	movs	r7, #120	@ 0x78
 80042a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	6831      	ldr	r1, [r6, #0]
 80042ae:	061f      	lsls	r7, r3, #24
 80042b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80042b4:	d402      	bmi.n	80042bc <_printf_i+0x188>
 80042b6:	065f      	lsls	r7, r3, #25
 80042b8:	bf48      	it	mi
 80042ba:	b2ad      	uxthmi	r5, r5
 80042bc:	6031      	str	r1, [r6, #0]
 80042be:	07d9      	lsls	r1, r3, #31
 80042c0:	bf44      	itt	mi
 80042c2:	f043 0320 	orrmi.w	r3, r3, #32
 80042c6:	6023      	strmi	r3, [r4, #0]
 80042c8:	b11d      	cbz	r5, 80042d2 <_printf_i+0x19e>
 80042ca:	2310      	movs	r3, #16
 80042cc:	e7ac      	b.n	8004228 <_printf_i+0xf4>
 80042ce:	4827      	ldr	r0, [pc, #156]	@ (800436c <_printf_i+0x238>)
 80042d0:	e7e9      	b.n	80042a6 <_printf_i+0x172>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	f023 0320 	bic.w	r3, r3, #32
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	e7f6      	b.n	80042ca <_printf_i+0x196>
 80042dc:	4616      	mov	r6, r2
 80042de:	e7bd      	b.n	800425c <_printf_i+0x128>
 80042e0:	6833      	ldr	r3, [r6, #0]
 80042e2:	6825      	ldr	r5, [r4, #0]
 80042e4:	6961      	ldr	r1, [r4, #20]
 80042e6:	1d18      	adds	r0, r3, #4
 80042e8:	6030      	str	r0, [r6, #0]
 80042ea:	062e      	lsls	r6, r5, #24
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	d501      	bpl.n	80042f4 <_printf_i+0x1c0>
 80042f0:	6019      	str	r1, [r3, #0]
 80042f2:	e002      	b.n	80042fa <_printf_i+0x1c6>
 80042f4:	0668      	lsls	r0, r5, #25
 80042f6:	d5fb      	bpl.n	80042f0 <_printf_i+0x1bc>
 80042f8:	8019      	strh	r1, [r3, #0]
 80042fa:	2300      	movs	r3, #0
 80042fc:	6123      	str	r3, [r4, #16]
 80042fe:	4616      	mov	r6, r2
 8004300:	e7bc      	b.n	800427c <_printf_i+0x148>
 8004302:	6833      	ldr	r3, [r6, #0]
 8004304:	1d1a      	adds	r2, r3, #4
 8004306:	6032      	str	r2, [r6, #0]
 8004308:	681e      	ldr	r6, [r3, #0]
 800430a:	6862      	ldr	r2, [r4, #4]
 800430c:	2100      	movs	r1, #0
 800430e:	4630      	mov	r0, r6
 8004310:	f7fb ff66 	bl	80001e0 <memchr>
 8004314:	b108      	cbz	r0, 800431a <_printf_i+0x1e6>
 8004316:	1b80      	subs	r0, r0, r6
 8004318:	6060      	str	r0, [r4, #4]
 800431a:	6863      	ldr	r3, [r4, #4]
 800431c:	6123      	str	r3, [r4, #16]
 800431e:	2300      	movs	r3, #0
 8004320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004324:	e7aa      	b.n	800427c <_printf_i+0x148>
 8004326:	6923      	ldr	r3, [r4, #16]
 8004328:	4632      	mov	r2, r6
 800432a:	4649      	mov	r1, r9
 800432c:	4640      	mov	r0, r8
 800432e:	47d0      	blx	sl
 8004330:	3001      	adds	r0, #1
 8004332:	d0ad      	beq.n	8004290 <_printf_i+0x15c>
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	079b      	lsls	r3, r3, #30
 8004338:	d413      	bmi.n	8004362 <_printf_i+0x22e>
 800433a:	68e0      	ldr	r0, [r4, #12]
 800433c:	9b03      	ldr	r3, [sp, #12]
 800433e:	4298      	cmp	r0, r3
 8004340:	bfb8      	it	lt
 8004342:	4618      	movlt	r0, r3
 8004344:	e7a6      	b.n	8004294 <_printf_i+0x160>
 8004346:	2301      	movs	r3, #1
 8004348:	4632      	mov	r2, r6
 800434a:	4649      	mov	r1, r9
 800434c:	4640      	mov	r0, r8
 800434e:	47d0      	blx	sl
 8004350:	3001      	adds	r0, #1
 8004352:	d09d      	beq.n	8004290 <_printf_i+0x15c>
 8004354:	3501      	adds	r5, #1
 8004356:	68e3      	ldr	r3, [r4, #12]
 8004358:	9903      	ldr	r1, [sp, #12]
 800435a:	1a5b      	subs	r3, r3, r1
 800435c:	42ab      	cmp	r3, r5
 800435e:	dcf2      	bgt.n	8004346 <_printf_i+0x212>
 8004360:	e7eb      	b.n	800433a <_printf_i+0x206>
 8004362:	2500      	movs	r5, #0
 8004364:	f104 0619 	add.w	r6, r4, #25
 8004368:	e7f5      	b.n	8004356 <_printf_i+0x222>
 800436a:	bf00      	nop
 800436c:	080047d8 	.word	0x080047d8
 8004370:	080047e9 	.word	0x080047e9

08004374 <__swbuf_r>:
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	460e      	mov	r6, r1
 8004378:	4614      	mov	r4, r2
 800437a:	4605      	mov	r5, r0
 800437c:	b118      	cbz	r0, 8004386 <__swbuf_r+0x12>
 800437e:	6a03      	ldr	r3, [r0, #32]
 8004380:	b90b      	cbnz	r3, 8004386 <__swbuf_r+0x12>
 8004382:	f7ff fa31 	bl	80037e8 <__sinit>
 8004386:	69a3      	ldr	r3, [r4, #24]
 8004388:	60a3      	str	r3, [r4, #8]
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	071a      	lsls	r2, r3, #28
 800438e:	d501      	bpl.n	8004394 <__swbuf_r+0x20>
 8004390:	6923      	ldr	r3, [r4, #16]
 8004392:	b943      	cbnz	r3, 80043a6 <__swbuf_r+0x32>
 8004394:	4621      	mov	r1, r4
 8004396:	4628      	mov	r0, r5
 8004398:	f000 f82a 	bl	80043f0 <__swsetup_r>
 800439c:	b118      	cbz	r0, 80043a6 <__swbuf_r+0x32>
 800439e:	f04f 37ff 	mov.w	r7, #4294967295
 80043a2:	4638      	mov	r0, r7
 80043a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	6922      	ldr	r2, [r4, #16]
 80043aa:	1a98      	subs	r0, r3, r2
 80043ac:	6963      	ldr	r3, [r4, #20]
 80043ae:	b2f6      	uxtb	r6, r6
 80043b0:	4283      	cmp	r3, r0
 80043b2:	4637      	mov	r7, r6
 80043b4:	dc05      	bgt.n	80043c2 <__swbuf_r+0x4e>
 80043b6:	4621      	mov	r1, r4
 80043b8:	4628      	mov	r0, r5
 80043ba:	f7ff fcbb 	bl	8003d34 <_fflush_r>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d1ed      	bne.n	800439e <__swbuf_r+0x2a>
 80043c2:	68a3      	ldr	r3, [r4, #8]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	60a3      	str	r3, [r4, #8]
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	6022      	str	r2, [r4, #0]
 80043ce:	701e      	strb	r6, [r3, #0]
 80043d0:	6962      	ldr	r2, [r4, #20]
 80043d2:	1c43      	adds	r3, r0, #1
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d004      	beq.n	80043e2 <__swbuf_r+0x6e>
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	07db      	lsls	r3, r3, #31
 80043dc:	d5e1      	bpl.n	80043a2 <__swbuf_r+0x2e>
 80043de:	2e0a      	cmp	r6, #10
 80043e0:	d1df      	bne.n	80043a2 <__swbuf_r+0x2e>
 80043e2:	4621      	mov	r1, r4
 80043e4:	4628      	mov	r0, r5
 80043e6:	f7ff fca5 	bl	8003d34 <_fflush_r>
 80043ea:	2800      	cmp	r0, #0
 80043ec:	d0d9      	beq.n	80043a2 <__swbuf_r+0x2e>
 80043ee:	e7d6      	b.n	800439e <__swbuf_r+0x2a>

080043f0 <__swsetup_r>:
 80043f0:	b538      	push	{r3, r4, r5, lr}
 80043f2:	4b29      	ldr	r3, [pc, #164]	@ (8004498 <__swsetup_r+0xa8>)
 80043f4:	4605      	mov	r5, r0
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	460c      	mov	r4, r1
 80043fa:	b118      	cbz	r0, 8004404 <__swsetup_r+0x14>
 80043fc:	6a03      	ldr	r3, [r0, #32]
 80043fe:	b90b      	cbnz	r3, 8004404 <__swsetup_r+0x14>
 8004400:	f7ff f9f2 	bl	80037e8 <__sinit>
 8004404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004408:	0719      	lsls	r1, r3, #28
 800440a:	d422      	bmi.n	8004452 <__swsetup_r+0x62>
 800440c:	06da      	lsls	r2, r3, #27
 800440e:	d407      	bmi.n	8004420 <__swsetup_r+0x30>
 8004410:	2209      	movs	r2, #9
 8004412:	602a      	str	r2, [r5, #0]
 8004414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004418:	81a3      	strh	r3, [r4, #12]
 800441a:	f04f 30ff 	mov.w	r0, #4294967295
 800441e:	e033      	b.n	8004488 <__swsetup_r+0x98>
 8004420:	0758      	lsls	r0, r3, #29
 8004422:	d512      	bpl.n	800444a <__swsetup_r+0x5a>
 8004424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004426:	b141      	cbz	r1, 800443a <__swsetup_r+0x4a>
 8004428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800442c:	4299      	cmp	r1, r3
 800442e:	d002      	beq.n	8004436 <__swsetup_r+0x46>
 8004430:	4628      	mov	r0, r5
 8004432:	f7ff fafb 	bl	8003a2c <_free_r>
 8004436:	2300      	movs	r3, #0
 8004438:	6363      	str	r3, [r4, #52]	@ 0x34
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004440:	81a3      	strh	r3, [r4, #12]
 8004442:	2300      	movs	r3, #0
 8004444:	6063      	str	r3, [r4, #4]
 8004446:	6923      	ldr	r3, [r4, #16]
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	f043 0308 	orr.w	r3, r3, #8
 8004450:	81a3      	strh	r3, [r4, #12]
 8004452:	6923      	ldr	r3, [r4, #16]
 8004454:	b94b      	cbnz	r3, 800446a <__swsetup_r+0x7a>
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800445c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004460:	d003      	beq.n	800446a <__swsetup_r+0x7a>
 8004462:	4621      	mov	r1, r4
 8004464:	4628      	mov	r0, r5
 8004466:	f000 f883 	bl	8004570 <__smakebuf_r>
 800446a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800446e:	f013 0201 	ands.w	r2, r3, #1
 8004472:	d00a      	beq.n	800448a <__swsetup_r+0x9a>
 8004474:	2200      	movs	r2, #0
 8004476:	60a2      	str	r2, [r4, #8]
 8004478:	6962      	ldr	r2, [r4, #20]
 800447a:	4252      	negs	r2, r2
 800447c:	61a2      	str	r2, [r4, #24]
 800447e:	6922      	ldr	r2, [r4, #16]
 8004480:	b942      	cbnz	r2, 8004494 <__swsetup_r+0xa4>
 8004482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004486:	d1c5      	bne.n	8004414 <__swsetup_r+0x24>
 8004488:	bd38      	pop	{r3, r4, r5, pc}
 800448a:	0799      	lsls	r1, r3, #30
 800448c:	bf58      	it	pl
 800448e:	6962      	ldrpl	r2, [r4, #20]
 8004490:	60a2      	str	r2, [r4, #8]
 8004492:	e7f4      	b.n	800447e <__swsetup_r+0x8e>
 8004494:	2000      	movs	r0, #0
 8004496:	e7f7      	b.n	8004488 <__swsetup_r+0x98>
 8004498:	20000018 	.word	0x20000018

0800449c <_raise_r>:
 800449c:	291f      	cmp	r1, #31
 800449e:	b538      	push	{r3, r4, r5, lr}
 80044a0:	4605      	mov	r5, r0
 80044a2:	460c      	mov	r4, r1
 80044a4:	d904      	bls.n	80044b0 <_raise_r+0x14>
 80044a6:	2316      	movs	r3, #22
 80044a8:	6003      	str	r3, [r0, #0]
 80044aa:	f04f 30ff 	mov.w	r0, #4294967295
 80044ae:	bd38      	pop	{r3, r4, r5, pc}
 80044b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80044b2:	b112      	cbz	r2, 80044ba <_raise_r+0x1e>
 80044b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80044b8:	b94b      	cbnz	r3, 80044ce <_raise_r+0x32>
 80044ba:	4628      	mov	r0, r5
 80044bc:	f000 f830 	bl	8004520 <_getpid_r>
 80044c0:	4622      	mov	r2, r4
 80044c2:	4601      	mov	r1, r0
 80044c4:	4628      	mov	r0, r5
 80044c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044ca:	f000 b817 	b.w	80044fc <_kill_r>
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d00a      	beq.n	80044e8 <_raise_r+0x4c>
 80044d2:	1c59      	adds	r1, r3, #1
 80044d4:	d103      	bne.n	80044de <_raise_r+0x42>
 80044d6:	2316      	movs	r3, #22
 80044d8:	6003      	str	r3, [r0, #0]
 80044da:	2001      	movs	r0, #1
 80044dc:	e7e7      	b.n	80044ae <_raise_r+0x12>
 80044de:	2100      	movs	r1, #0
 80044e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80044e4:	4620      	mov	r0, r4
 80044e6:	4798      	blx	r3
 80044e8:	2000      	movs	r0, #0
 80044ea:	e7e0      	b.n	80044ae <_raise_r+0x12>

080044ec <raise>:
 80044ec:	4b02      	ldr	r3, [pc, #8]	@ (80044f8 <raise+0xc>)
 80044ee:	4601      	mov	r1, r0
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	f7ff bfd3 	b.w	800449c <_raise_r>
 80044f6:	bf00      	nop
 80044f8:	20000018 	.word	0x20000018

080044fc <_kill_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	4d07      	ldr	r5, [pc, #28]	@ (800451c <_kill_r+0x20>)
 8004500:	2300      	movs	r3, #0
 8004502:	4604      	mov	r4, r0
 8004504:	4608      	mov	r0, r1
 8004506:	4611      	mov	r1, r2
 8004508:	602b      	str	r3, [r5, #0]
 800450a:	f7fc fcbc 	bl	8000e86 <_kill>
 800450e:	1c43      	adds	r3, r0, #1
 8004510:	d102      	bne.n	8004518 <_kill_r+0x1c>
 8004512:	682b      	ldr	r3, [r5, #0]
 8004514:	b103      	cbz	r3, 8004518 <_kill_r+0x1c>
 8004516:	6023      	str	r3, [r4, #0]
 8004518:	bd38      	pop	{r3, r4, r5, pc}
 800451a:	bf00      	nop
 800451c:	200002cc 	.word	0x200002cc

08004520 <_getpid_r>:
 8004520:	f7fc bca9 	b.w	8000e76 <_getpid>

08004524 <__swhatbuf_r>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	460c      	mov	r4, r1
 8004528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452c:	2900      	cmp	r1, #0
 800452e:	b096      	sub	sp, #88	@ 0x58
 8004530:	4615      	mov	r5, r2
 8004532:	461e      	mov	r6, r3
 8004534:	da0d      	bge.n	8004552 <__swhatbuf_r+0x2e>
 8004536:	89a3      	ldrh	r3, [r4, #12]
 8004538:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800453c:	f04f 0100 	mov.w	r1, #0
 8004540:	bf14      	ite	ne
 8004542:	2340      	movne	r3, #64	@ 0x40
 8004544:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004548:	2000      	movs	r0, #0
 800454a:	6031      	str	r1, [r6, #0]
 800454c:	602b      	str	r3, [r5, #0]
 800454e:	b016      	add	sp, #88	@ 0x58
 8004550:	bd70      	pop	{r4, r5, r6, pc}
 8004552:	466a      	mov	r2, sp
 8004554:	f000 f848 	bl	80045e8 <_fstat_r>
 8004558:	2800      	cmp	r0, #0
 800455a:	dbec      	blt.n	8004536 <__swhatbuf_r+0x12>
 800455c:	9901      	ldr	r1, [sp, #4]
 800455e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004562:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004566:	4259      	negs	r1, r3
 8004568:	4159      	adcs	r1, r3
 800456a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800456e:	e7eb      	b.n	8004548 <__swhatbuf_r+0x24>

08004570 <__smakebuf_r>:
 8004570:	898b      	ldrh	r3, [r1, #12]
 8004572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004574:	079d      	lsls	r5, r3, #30
 8004576:	4606      	mov	r6, r0
 8004578:	460c      	mov	r4, r1
 800457a:	d507      	bpl.n	800458c <__smakebuf_r+0x1c>
 800457c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	6123      	str	r3, [r4, #16]
 8004584:	2301      	movs	r3, #1
 8004586:	6163      	str	r3, [r4, #20]
 8004588:	b003      	add	sp, #12
 800458a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800458c:	ab01      	add	r3, sp, #4
 800458e:	466a      	mov	r2, sp
 8004590:	f7ff ffc8 	bl	8004524 <__swhatbuf_r>
 8004594:	9f00      	ldr	r7, [sp, #0]
 8004596:	4605      	mov	r5, r0
 8004598:	4639      	mov	r1, r7
 800459a:	4630      	mov	r0, r6
 800459c:	f7ff faba 	bl	8003b14 <_malloc_r>
 80045a0:	b948      	cbnz	r0, 80045b6 <__smakebuf_r+0x46>
 80045a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045a6:	059a      	lsls	r2, r3, #22
 80045a8:	d4ee      	bmi.n	8004588 <__smakebuf_r+0x18>
 80045aa:	f023 0303 	bic.w	r3, r3, #3
 80045ae:	f043 0302 	orr.w	r3, r3, #2
 80045b2:	81a3      	strh	r3, [r4, #12]
 80045b4:	e7e2      	b.n	800457c <__smakebuf_r+0xc>
 80045b6:	89a3      	ldrh	r3, [r4, #12]
 80045b8:	6020      	str	r0, [r4, #0]
 80045ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045be:	81a3      	strh	r3, [r4, #12]
 80045c0:	9b01      	ldr	r3, [sp, #4]
 80045c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80045c6:	b15b      	cbz	r3, 80045e0 <__smakebuf_r+0x70>
 80045c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045cc:	4630      	mov	r0, r6
 80045ce:	f000 f81d 	bl	800460c <_isatty_r>
 80045d2:	b128      	cbz	r0, 80045e0 <__smakebuf_r+0x70>
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	f023 0303 	bic.w	r3, r3, #3
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	81a3      	strh	r3, [r4, #12]
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	431d      	orrs	r5, r3
 80045e4:	81a5      	strh	r5, [r4, #12]
 80045e6:	e7cf      	b.n	8004588 <__smakebuf_r+0x18>

080045e8 <_fstat_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4d07      	ldr	r5, [pc, #28]	@ (8004608 <_fstat_r+0x20>)
 80045ec:	2300      	movs	r3, #0
 80045ee:	4604      	mov	r4, r0
 80045f0:	4608      	mov	r0, r1
 80045f2:	4611      	mov	r1, r2
 80045f4:	602b      	str	r3, [r5, #0]
 80045f6:	f7fc fca6 	bl	8000f46 <_fstat>
 80045fa:	1c43      	adds	r3, r0, #1
 80045fc:	d102      	bne.n	8004604 <_fstat_r+0x1c>
 80045fe:	682b      	ldr	r3, [r5, #0]
 8004600:	b103      	cbz	r3, 8004604 <_fstat_r+0x1c>
 8004602:	6023      	str	r3, [r4, #0]
 8004604:	bd38      	pop	{r3, r4, r5, pc}
 8004606:	bf00      	nop
 8004608:	200002cc 	.word	0x200002cc

0800460c <_isatty_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4d06      	ldr	r5, [pc, #24]	@ (8004628 <_isatty_r+0x1c>)
 8004610:	2300      	movs	r3, #0
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	f7fc fca5 	bl	8000f66 <_isatty>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d102      	bne.n	8004626 <_isatty_r+0x1a>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	b103      	cbz	r3, 8004626 <_isatty_r+0x1a>
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	200002cc 	.word	0x200002cc

0800462c <_init>:
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	bf00      	nop
 8004630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004632:	bc08      	pop	{r3}
 8004634:	469e      	mov	lr, r3
 8004636:	4770      	bx	lr

08004638 <_fini>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	bf00      	nop
 800463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463e:	bc08      	pop	{r3}
 8004640:	469e      	mov	lr, r3
 8004642:	4770      	bx	lr
