/*
 * RPattern.c
 *
 *  Created on: Mar 24, 2025
 *      Author: Thaweechock.M
 */
#include "RPattern.h"

uint8_t pattern_index = 0;  // ใช้ในการเลือก pattern จาก 12 patterns
int output[12][3];  // เก็บ patterns ที่สุ่ม

void Modrun(int state){
    static uint8_t pattern_index = 0;

    switch(state){
        case 0:
            // ถ้า hold_detected == 1 และ pattern_index == 0 ให้เริ่มการสุ่ม pattern
            if((pattern_index == 0) && (hold_detected == 1)){
                // สุ่ม pattern
                GeneratePattern(output);
                for(int cc = 0; cc < 3; cc++){
                    // ใช้ LPattern ในการกำหนดค่า LED
                    LPattern(output[pattern_index][cc]);
                }
            }
            break;
        case 1:
            // กรณีที่ใช้สำหรับ pattern อื่นๆ
            break;
    }
}

void Modeset(){
    static uint8_t hold_detected = 0;
    uint32_t current_time = HAL_GetTick();

    // เช็คการกดปุ่ม OP1 และ OP3 พร้อมกัน
    if (HAL_GPIO_ReadPin(GPIOC, OP1_Pin) && HAL_GPIO_ReadPin(GPIOC, OP3_Pin)) {
        if (hold_start_time == 0) {
            hold_start_time = current_time;
        }
        // ตรวจสอบเวลาที่กดปุ่มค้าง
        if (current_time - hold_start_time >= 5000 && !hold_detected) {
            pattern_index = rand() % 12;  // สุ่มเลือก pattern ระหว่าง 0-11
            hold_detected = 1;
        }
    } else {
        hold_start_time = 0;
        hold_detected = 0;
    }

    // ตรวจสอบการกดปุ่ม OP1, OP2, OP3
    if (HAL_GPIO_ReadPin(GPIOC, OP1_Pin)) ProcessButtonPress(1);
    if (HAL_GPIO_ReadPin(GPIOC, OP2_Pin)) ProcessButtonPress(2);
    if (HAL_GPIO_ReadPin(GPIOC, OP3_Pin)) ProcessButtonPress(3);
}

void LPattern(int Linput[3]) {
    // LED_Status จะทำการควบคุมสถานะ LED ตาม Linput
    LED_Status(Linput[0], Linput[1], Linput[2]);

    // ลูปตรวจสอบการกดปุ่ม
    for (int t = 0; t < 3; t++) {
        if ((Sensor[t] == 1) && (Linput[t] == 1)) {  // ถ้าปุ่มที่ i ถูกกด
            if (pressStartTime[t] == 0) {
                pressStartTime[t] = HAL_GetTick();
            }
            // ตรวจสอบเวลาที่ผ่านไปหลังจากการกด
            if (HAL_GetTick() - pressStartTime[t] >= debounceTime) {
                // หากเวลาผ่านไปครบที่กำหนด (1 วินาที)
                switch (t) {
                    case 0:
                        HAL_GPIO_WritePin(GPIOC, LED_1_Pin, GPIO_PIN_RESET);  // LED_1 ดับ
                        break;
                    case 1:
                        HAL_GPIO_WritePin(GPIOC, LED_2_Pin, GPIO_PIN_RESET);  // LED_2 ดับ
                        break;
                    case 2:
                        HAL_GPIO_WritePin(GPIOC, LED_3_Pin, GPIO_PIN_RESET);  // LED_3 ดับ
                        break;
                }
                pressStartTime[t] = 0;  // รีเซ็ตเวลา
            }
        } else {
            pressStartTime[t] = 0;  // รีเซ็ตเวลาเมื่อไม่ได้กดปุ่ม
        }
    }
}

