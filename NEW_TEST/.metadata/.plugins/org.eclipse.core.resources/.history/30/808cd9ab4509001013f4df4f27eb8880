/*
 * RPattern.c
 *
 *  Created on: Mar 24, 2025
 *      Author: Thaweechock.M
 */
#include "RPattern.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

uint8_t hold_detected = 0;
uint8_t pattern_index = 0;  // ใช้ในการเลือก pattern จาก 12 patterns
int output[3];  // เก็บ patterns ที่สุ่ม

void Modrun(int state){
    switch(state){
        case 0:
            if((pattern_index == 0) && (hold_detected == 1)){
                GeneratePattern(output); // สุ่ม Pattern ใหม่
                LPattern(output[pattern_index]); // ใช้ pattern แรก

            break;
        case 1:
            if (Sensor[0] == 1 || Sensor[1] == 1 || Sensor[2] == 1) {
                if (CheckLP(output, Sensor)) {
                    pattern_index = (pattern_index + 1) % 12; // เปลี่ยนเป็น pattern ถัดไป
                    LPattern(output[pattern_index]);
                }
            }
            break;
    }
}

void Modeset(){
    uint32_t current_time = HAL_GetTick();
    LED_Status(1,0,1);
    if (HAL_GPIO_ReadPin(GPIOC, OP1_Pin) && HAL_GPIO_ReadPin(GPIOC, OP3_Pin)) {
        if (hold_start_time == 0) {
            hold_start_time = current_time;
        }

        if (current_time - hold_start_time >= 5000 && !hold_detected) {

            hold_detected = 1;
        }
    } else {
        hold_start_time = 0;
        hold_detected = 0;
    }

    if (HAL_GPIO_ReadPin(GPIOC, OP1_Pin)) ProcessButtonPress(1);
    if (HAL_GPIO_ReadPin(GPIOC, OP2_Pin)) ProcessButtonPress(2);
    if (HAL_GPIO_ReadPin(GPIOC, OP3_Pin)) ProcessButtonPress(3);
}

void LPattern(int Linput[3]) {

    LED_Status(Linput[0], Linput[1], Linput[2]);

    for (int t = 0; t < 3; t++) {
        if ((Sensor[t] == 1) && (Linput[t] == 1)) {
            if (pressStartTime[t] == 0) {
                pressStartTime[t] = HAL_GetTick();
            }
            // ตรวจสอบเวลาที่ผ่านไปหลังจากการกด
            if (HAL_GetTick() - pressStartTime[t] >= debounceTime) {
                switch (t) {
                    case 0:
                        HAL_GPIO_WritePin(GPIOC, LED_1_Pin, GPIO_PIN_RESET);  // LED_1 ดับ
                        break;
                    case 1:
                        HAL_GPIO_WritePin(GPIOC, LED_2_Pin, GPIO_PIN_RESET);  // LED_2 ดับ
                        break;
                    case 2:
                        HAL_GPIO_WritePin(GPIOC, LED_3_Pin, GPIO_PIN_RESET);  // LED_3 ดับ
                        break;
                }
                pressStartTime[t] = 0;
            }
        } else {
            pressStartTime[t] = 0;
        }
    }
}

void GenerateAndPrintPattern() {
    int output[3];
    int patterns[12][3] = {
        {1, 2, 1}, {1, 2, 3}, {1, 3, 1}, {1, 3, 2},
        {2, 1, 2}, {2, 1, 3}, {2, 3, 1}, {2, 3, 2},
        {3, 1, 2}, {3, 1, 3}, {3, 2, 1}, {3, 2, 3}
    };

    srand(time(NULL));  // ตั้งค่า seed สำหรับสุ่มตัวเลข
    int index = rand() % 12;  // สุ่มค่า index (0-11)

    // คัดลอกค่า pattern ตาม index ที่สุ่มได้
    for (int j = 0; j < 3; j++) {
        output[j] = patterns[index][j];
    }

}

