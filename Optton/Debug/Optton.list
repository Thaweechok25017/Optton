
Optton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006388  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08006448  08006448  00007448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006698  08006698  0000806c  2**0
                  CONTENTS
  4 .ARM          00000000  08006698  08006698  0000806c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006698  08006698  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006698  08006698  00007698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800669c  0800669c  0000769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080066a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b9c  2000006c  0800670c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c08  0800670c  00008c08  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010993  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003064  00000000  00000000  00018a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0001ba90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb6  00000000  00000000  0001cb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bee  00000000  00000000  0001d80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001211f  00000000  00000000  000373fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ebd5  00000000  00000000  0004951b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e80f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044d4  00000000  00000000  000e8134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000ec608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006430 	.word	0x08006430

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08006430 	.word	0x08006430

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1824      	adds	r4, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	42a3      	cmp	r3, r4
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	@ 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0424      	lsls	r4, r4, #16
 8000456:	1960      	adds	r0, r4, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <WaitForStart>:
extern SPI_HandleTypeDef hspi1;  // SPI handle used for MCP23S17

/* "WaitForStart()"  																		# Control LED OPTTON
 * Is a First Setup "IDEL"Turn On LED1 and LED3 Waits for the user to press and hold OP1 and OP3 for 5 seconds
 * and When held long enough, Turn off LED sets started = 1 and calls GeneratePattern()and if not held long enough started = 0 .*/
void WaitForStart() {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
    uint32_t start_time = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, LED_on_Pin, GPIO_PIN_RESET);
 800046e:	4b30      	ldr	r3, [pc, #192]	@ (8000530 <WaitForStart+0xcc>)
 8000470:	2200      	movs	r2, #0
 8000472:	2180      	movs	r1, #128	@ 0x80
 8000474:	0018      	movs	r0, r3
 8000476:	f001 fb4e 	bl	8001b16 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_onB8_Pin, GPIO_PIN_RESET);
 800047a:	2380      	movs	r3, #128	@ 0x80
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	482c      	ldr	r0, [pc, #176]	@ (8000530 <WaitForStart+0xcc>)
 8000480:	2200      	movs	r2, #0
 8000482:	0019      	movs	r1, r3
 8000484:	f001 fb47 	bl	8001b16 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, LED_off_Pin, GPIO_PIN_SET);
 8000488:	2380      	movs	r3, #128	@ 0x80
 800048a:	01db      	lsls	r3, r3, #7
 800048c:	4829      	ldr	r0, [pc, #164]	@ (8000534 <WaitForStart+0xd0>)
 800048e:	2201      	movs	r2, #1
 8000490:	0019      	movs	r1, r3
 8000492:	f001 fb40 	bl	8001b16 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, LED_offC15_Pin, GPIO_PIN_SET);
 8000496:	2380      	movs	r3, #128	@ 0x80
 8000498:	021b      	lsls	r3, r3, #8
 800049a:	4826      	ldr	r0, [pc, #152]	@ (8000534 <WaitForStart+0xd0>)
 800049c:	2201      	movs	r2, #1
 800049e:	0019      	movs	r1, r3
 80004a0:	f001 fb39 	bl	8001b16 <HAL_GPIO_WritePin>

    LED_Status(1, 1);
 80004a4:	2101      	movs	r1, #1
 80004a6:	2001      	movs	r0, #1
 80004a8:	f000 f894 	bl	80005d4 <LED_Status>
    LED_Status(3, 1);
 80004ac:	2101      	movs	r1, #1
 80004ae:	2003      	movs	r0, #3
 80004b0:	f000 f890 	bl	80005d4 <LED_Status>

    while (!started) {
 80004b4:	e032      	b.n	800051c <WaitForStart+0xb8>
        if (HAL_GPIO_ReadPin(GPIOA, OP1_Pin) && HAL_GPIO_ReadPin(GPIOA, OP3_Pin)) {
 80004b6:	2380      	movs	r3, #128	@ 0x80
 80004b8:	005a      	lsls	r2, r3, #1
 80004ba:	23a0      	movs	r3, #160	@ 0xa0
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	0011      	movs	r1, r2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f001 fb0b 	bl	8001adc <HAL_GPIO_ReadPin>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d026      	beq.n	8000518 <WaitForStart+0xb4>
 80004ca:	2380      	movs	r3, #128	@ 0x80
 80004cc:	015a      	lsls	r2, r3, #5
 80004ce:	23a0      	movs	r3, #160	@ 0xa0
 80004d0:	05db      	lsls	r3, r3, #23
 80004d2:	0011      	movs	r1, r2
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 fb01 	bl	8001adc <HAL_GPIO_ReadPin>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d01c      	beq.n	8000518 <WaitForStart+0xb4>
            if (start_time == 0) {
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d103      	bne.n	80004ec <WaitForStart+0x88>
                start_time = HAL_GetTick();
 80004e4:	f000 fe94 	bl	8001210 <HAL_GetTick>
 80004e8:	0003      	movs	r3, r0
 80004ea:	607b      	str	r3, [r7, #4]
            }
            if (HAL_GetTick() - start_time >= 5000) {
 80004ec:	f000 fe90 	bl	8001210 <HAL_GetTick>
 80004f0:	0002      	movs	r2, r0
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	1ad3      	subs	r3, r2, r3
 80004f6:	4a10      	ldr	r2, [pc, #64]	@ (8000538 <WaitForStart+0xd4>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d90f      	bls.n	800051c <WaitForStart+0xb8>
                started = 1;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <WaitForStart+0xd8>)
 80004fe:	2201      	movs	r2, #1
 8000500:	601a      	str	r2, [r3, #0]
                LED_Status(1, 0);
 8000502:	2100      	movs	r1, #0
 8000504:	2001      	movs	r0, #1
 8000506:	f000 f865 	bl	80005d4 <LED_Status>
                LED_Status(3, 0);
 800050a:	2100      	movs	r1, #0
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f861 	bl	80005d4 <LED_Status>
                GeneratePattern();
 8000512:	f000 f815 	bl	8000540 <GeneratePattern>
            if (HAL_GetTick() - start_time >= 5000) {
 8000516:	e001      	b.n	800051c <WaitForStart+0xb8>
            }
        } else {
            start_time = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
    while (!started) {
 800051c:	4b07      	ldr	r3, [pc, #28]	@ (800053c <WaitForStart+0xd8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0c8      	beq.n	80004b6 <WaitForStart+0x52>
        }
    }
}
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b002      	add	sp, #8
 800052c:	bd80      	pop	{r7, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	50000400 	.word	0x50000400
 8000534:	50000800 	.word	0x50000800
 8000538:	00001387 	.word	0x00001387
 800053c:	2000009c 	.word	0x2000009c

08000540 <GeneratePattern>:
/* "GeneratePattern()" Randomly selects one of 12 predefined button sequences.
 * The pattern is stored in the pattern[3] array.*/
void GeneratePattern() {
 8000540:	b580      	push	{r7, lr}
 8000542:	b0a6      	sub	sp, #152	@ 0x98
 8000544:	af00      	add	r7, sp, #0
    int patterns[12][3] = {
 8000546:	003a      	movs	r2, r7
 8000548:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <GeneratePattern+0x88>)
 800054a:	0010      	movs	r0, r2
 800054c:	0019      	movs	r1, r3
 800054e:	2390      	movs	r3, #144	@ 0x90
 8000550:	001a      	movs	r2, r3
 8000552:	f005 f91e 	bl	8005792 <memcpy>
        {1, 2, 1}, {1, 2, 3}, {1, 3, 1}, {1, 3, 2},
        {2, 1, 2}, {2, 1, 3}, {2, 3, 1}, {2, 3, 2},
        {3, 1, 2}, {3, 1, 3}, {3, 2, 1}, {3, 2, 3}
    };
    srand(HAL_GetTick());
 8000556:	f000 fe5b 	bl	8001210 <HAL_GetTick>
 800055a:	0003      	movs	r3, r0
 800055c:	0018      	movs	r0, r3
 800055e:	f004 ff17 	bl	8005390 <srand>
    int index = rand() % 12;
 8000562:	f004 ff45 	bl	80053f0 <rand>
 8000566:	0003      	movs	r3, r0
 8000568:	210c      	movs	r1, #12
 800056a:	0018      	movs	r0, r3
 800056c:	f7ff ff46 	bl	80003fc <__aeabi_idivmod>
 8000570:	000b      	movs	r3, r1
 8000572:	2290      	movs	r2, #144	@ 0x90
 8000574:	18ba      	adds	r2, r7, r2
 8000576:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 3; i++) {
 8000578:	2300      	movs	r3, #0
 800057a:	2294      	movs	r2, #148	@ 0x94
 800057c:	18ba      	adds	r2, r7, r2
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	e016      	b.n	80005b0 <GeneratePattern+0x70>
        pattern[i] = patterns[index][i];
 8000582:	0039      	movs	r1, r7
 8000584:	2390      	movs	r3, #144	@ 0x90
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	0013      	movs	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	189b      	adds	r3, r3, r2
 8000590:	2094      	movs	r0, #148	@ 0x94
 8000592:	183a      	adds	r2, r7, r0
 8000594:	6812      	ldr	r2, [r2, #0]
 8000596:	189b      	adds	r3, r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	5859      	ldr	r1, [r3, r1]
 800059c:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <GeneratePattern+0x8c>)
 800059e:	183a      	adds	r2, r7, r0
 80005a0:	6812      	ldr	r2, [r2, #0]
 80005a2:	0092      	lsls	r2, r2, #2
 80005a4:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < 3; i++) {
 80005a6:	183b      	adds	r3, r7, r0
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	183a      	adds	r2, r7, r0
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	2394      	movs	r3, #148	@ 0x94
 80005b2:	18fb      	adds	r3, r7, r3
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	dde3      	ble.n	8000582 <GeneratePattern+0x42>
    }
    step = 0;
 80005ba:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <GeneratePattern+0x90>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
}
 80005c0:	46c0      	nop			@ (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b026      	add	sp, #152	@ 0x98
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	08006448 	.word	0x08006448
 80005cc:	2000008c 	.word	0x2000008c
 80005d0:	20000098 	.word	0x20000098

080005d4 <LED_Status>:
/* " LED_Status (int index, int state) " 													# Control LED OPTTON
 * Use Turn ON or OFF a Specific LED by index (1-3)
 * and State (on = 1 , Off = 0) to Control LED Generate
 */
void LED_Status(int index, int state) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
    GPIO_TypeDef *port;
    uint16_t pin;
    uint16_t pin1;

    switch (index) {
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d01f      	beq.n	8000624 <LED_Status+0x50>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	dc40      	bgt.n	800066c <LED_Status+0x98>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d003      	beq.n	80005f8 <LED_Status+0x24>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d00b      	beq.n	800060e <LED_Status+0x3a>
        case 1: port = GPIOB; pin = LED_1B1_Pin; pin1 = LED_1_Pin; break;
        case 2: port = GPIOB; pin = LED_2B6_Pin; pin1 = LED_2_Pin;break;
        case 3: port = GPIOB; pin = LED_3B4_Pin; pin1 = LED_3_Pin;break;
        default: return;
 80005f6:	e039      	b.n	800066c <LED_Status+0x98>
        case 1: port = GPIOB; pin = LED_1B1_Pin; pin1 = LED_1_Pin; break;
 80005f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <LED_Status+0xa0>)
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	230a      	movs	r3, #10
 80005fe:	18fb      	adds	r3, r7, r3
 8000600:	2202      	movs	r2, #2
 8000602:	801a      	strh	r2, [r3, #0]
 8000604:	2308      	movs	r3, #8
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	2201      	movs	r2, #1
 800060a:	801a      	strh	r2, [r3, #0]
 800060c:	e015      	b.n	800063a <LED_Status+0x66>
        case 2: port = GPIOB; pin = LED_2B6_Pin; pin1 = LED_2_Pin;break;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <LED_Status+0xa0>)
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	230a      	movs	r3, #10
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	2240      	movs	r2, #64	@ 0x40
 8000618:	801a      	strh	r2, [r3, #0]
 800061a:	2308      	movs	r3, #8
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	2220      	movs	r2, #32
 8000620:	801a      	strh	r2, [r3, #0]
 8000622:	e00a      	b.n	800063a <LED_Status+0x66>
        case 3: port = GPIOB; pin = LED_3B4_Pin; pin1 = LED_3_Pin;break;
 8000624:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <LED_Status+0xa0>)
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	230a      	movs	r3, #10
 800062a:	18fb      	adds	r3, r7, r3
 800062c:	2210      	movs	r2, #16
 800062e:	801a      	strh	r2, [r3, #0]
 8000630:	2308      	movs	r3, #8
 8000632:	18fb      	adds	r3, r7, r3
 8000634:	2208      	movs	r2, #8
 8000636:	801a      	strh	r2, [r3, #0]
 8000638:	46c0      	nop			@ (mov r8, r8)
    }
    HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	4193      	sbcs	r3, r2
 8000640:	b2db      	uxtb	r3, r3
 8000642:	001a      	movs	r2, r3
 8000644:	230a      	movs	r3, #10
 8000646:	18fb      	adds	r3, r7, r3
 8000648:	8819      	ldrh	r1, [r3, #0]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	0018      	movs	r0, r3
 800064e:	f001 fa62 	bl	8001b16 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(port, pin1, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	1e5a      	subs	r2, r3, #1
 8000656:	4193      	sbcs	r3, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	001a      	movs	r2, r3
 800065c:	2308      	movs	r3, #8
 800065e:	18fb      	adds	r3, r7, r3
 8000660:	8819      	ldrh	r1, [r3, #0]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fa56 	bl	8001b16 <HAL_GPIO_WritePin>
 800066a:	e000      	b.n	800066e <LED_Status+0x9a>
        default: return;
 800066c:	46c0      	nop			@ (mov r8, r8)
}
 800066e:	46bd      	mov	sp, r7
 8000670:	b004      	add	sp, #16
 8000672:	bd80      	pop	{r7, pc}
 8000674:	50000400 	.word	0x50000400

08000678 <TurnOffAllLEDs>:

/* "TurnOffAllLEDs(int delay)" 																# Control LED OPTTON
 * Use function LED_Status() To Turns off all LEDs and waits for the specified delay.  */

void TurnOffAllLEDs(int delay) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    LED_Status(1, 0);
 8000680:	2100      	movs	r1, #0
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ffa6 	bl	80005d4 <LED_Status>
    LED_Status(2, 0);
 8000688:	2100      	movs	r1, #0
 800068a:	2002      	movs	r0, #2
 800068c:	f7ff ffa2 	bl	80005d4 <LED_Status>
    LED_Status(3, 0);
 8000690:	2100      	movs	r1, #0
 8000692:	2003      	movs	r0, #3
 8000694:	f7ff ff9e 	bl	80005d4 <LED_Status>
    HAL_Delay(delay);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fdc2 	bl	8001224 <HAL_Delay>
}
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b002      	add	sp, #8
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <ProcessPattern>:
 * after that Set LED On From GeneratePattern() and data Keep data in pattern[i] and Show LED From Pattern
 * wait for the user to press correct buttons one by one to Step Control "IDEL" To "OPEN" and Change data pattern_count = 1
 * and Turn LED Show Open or Close Status do the same in "CLOSE" but will Change data pattern_count = 0
 * and set started = 0 Return to WaitForStart() to Start New Loop.## Pattern Will New Generate When pattern "OPEN" and "CLOSE" Done */

void ProcessPattern() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

    if (started == 1) {
 80006ae:	4b66      	ldr	r3, [pc, #408]	@ (8000848 <ProcessPattern+0x1a0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d000      	beq.n	80006b8 <ProcessPattern+0x10>
 80006b6:	e0c0      	b.n	800083a <ProcessPattern+0x192>
        TurnOffAllLEDs(1000);
 80006b8:	23fa      	movs	r3, #250	@ 0xfa
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff ffdb 	bl	8000678 <TurnOffAllLEDs>

        for (int i = 0; i < 3; i++) {
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	e02f      	b.n	8000728 <ProcessPattern+0x80>
            LED_Status(pattern[i], 1);
 80006c8:	4b60      	ldr	r3, [pc, #384]	@ (800084c <ProcessPattern+0x1a4>)
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	0092      	lsls	r2, r2, #2
 80006ce:	58d3      	ldr	r3, [r2, r3]
 80006d0:	2101      	movs	r1, #1
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff ff7e 	bl	80005d4 <LED_Status>
            while (!ReadButton(GPIOA, (pattern[i] == 1 ? OP1_Pin : pattern[i] == 2 ? OP2_Pin : OP3_Pin)));
 80006d8:	46c0      	nop			@ (mov r8, r8)
 80006da:	4b5c      	ldr	r3, [pc, #368]	@ (800084c <ProcessPattern+0x1a4>)
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	0092      	lsls	r2, r2, #2
 80006e0:	58d3      	ldr	r3, [r2, r3]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d00b      	beq.n	80006fe <ProcessPattern+0x56>
 80006e6:	4b59      	ldr	r3, [pc, #356]	@ (800084c <ProcessPattern+0x1a4>)
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	0092      	lsls	r2, r2, #2
 80006ec:	58d3      	ldr	r3, [r2, r3]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d102      	bne.n	80006f8 <ProcessPattern+0x50>
 80006f2:	2380      	movs	r3, #128	@ 0x80
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	e004      	b.n	8000702 <ProcessPattern+0x5a>
 80006f8:	2380      	movs	r3, #128	@ 0x80
 80006fa:	015b      	lsls	r3, r3, #5
 80006fc:	e001      	b.n	8000702 <ProcessPattern+0x5a>
 80006fe:	2380      	movs	r3, #128	@ 0x80
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	22a0      	movs	r2, #160	@ 0xa0
 8000704:	05d2      	lsls	r2, r2, #23
 8000706:	0019      	movs	r1, r3
 8000708:	0010      	movs	r0, r2
 800070a:	f000 f8a9 	bl	8000860 <ReadButton>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d0e3      	beq.n	80006da <ProcessPattern+0x32>
            LED_Status(pattern[i], 0);
 8000712:	4b4e      	ldr	r3, [pc, #312]	@ (800084c <ProcessPattern+0x1a4>)
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	58d3      	ldr	r3, [r2, r3]
 800071a:	2100      	movs	r1, #0
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff ff59 	bl	80005d4 <LED_Status>
        for (int i = 0; i < 3; i++) {
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3301      	adds	r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b02      	cmp	r3, #2
 800072c:	ddcc      	ble.n	80006c8 <ProcessPattern+0x20>
        }
        pattern_count = 1;
 800072e:	4b48      	ldr	r3, [pc, #288]	@ (8000850 <ProcessPattern+0x1a8>)
 8000730:	2201      	movs	r2, #1
 8000732:	601a      	str	r2, [r3, #0]

        HAL_GPIO_WritePin(GPIOB, LED_on_Pin, GPIO_PIN_SET);
 8000734:	4b47      	ldr	r3, [pc, #284]	@ (8000854 <ProcessPattern+0x1ac>)
 8000736:	2201      	movs	r2, #1
 8000738:	2180      	movs	r1, #128	@ 0x80
 800073a:	0018      	movs	r0, r3
 800073c:	f001 f9eb 	bl	8001b16 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_onB8_Pin, GPIO_PIN_SET);
 8000740:	2380      	movs	r3, #128	@ 0x80
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4843      	ldr	r0, [pc, #268]	@ (8000854 <ProcessPattern+0x1ac>)
 8000746:	2201      	movs	r2, #1
 8000748:	0019      	movs	r1, r3
 800074a:	f001 f9e4 	bl	8001b16 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, LED_off_Pin, GPIO_PIN_RESET);
 800074e:	2380      	movs	r3, #128	@ 0x80
 8000750:	01db      	lsls	r3, r3, #7
 8000752:	4841      	ldr	r0, [pc, #260]	@ (8000858 <ProcessPattern+0x1b0>)
 8000754:	2200      	movs	r2, #0
 8000756:	0019      	movs	r1, r3
 8000758:	f001 f9dd 	bl	8001b16 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, LED_offC15_Pin, GPIO_PIN_RESET);
 800075c:	2380      	movs	r3, #128	@ 0x80
 800075e:	021b      	lsls	r3, r3, #8
 8000760:	483d      	ldr	r0, [pc, #244]	@ (8000858 <ProcessPattern+0x1b0>)
 8000762:	2200      	movs	r2, #0
 8000764:	0019      	movs	r1, r3
 8000766:	f001 f9d6 	bl	8001b16 <HAL_GPIO_WritePin>

        TurnOffAllLEDs(1500);
 800076a:	4b3c      	ldr	r3, [pc, #240]	@ (800085c <ProcessPattern+0x1b4>)
 800076c:	0018      	movs	r0, r3
 800076e:	f7ff ff83 	bl	8000678 <TurnOffAllLEDs>

        for (int i = 0; i < 3; i++) {
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	e02f      	b.n	80007d8 <ProcessPattern+0x130>
            LED_Status(pattern[i], 1);
 8000778:	4b34      	ldr	r3, [pc, #208]	@ (800084c <ProcessPattern+0x1a4>)
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	0092      	lsls	r2, r2, #2
 800077e:	58d3      	ldr	r3, [r2, r3]
 8000780:	2101      	movs	r1, #1
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff ff26 	bl	80005d4 <LED_Status>
            while (!ReadButton(GPIOA, (pattern[i] == 1 ? OP1_Pin : pattern[i] == 2 ? OP2_Pin : OP3_Pin)));
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	4b30      	ldr	r3, [pc, #192]	@ (800084c <ProcessPattern+0x1a4>)
 800078c:	683a      	ldr	r2, [r7, #0]
 800078e:	0092      	lsls	r2, r2, #2
 8000790:	58d3      	ldr	r3, [r2, r3]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d00b      	beq.n	80007ae <ProcessPattern+0x106>
 8000796:	4b2d      	ldr	r3, [pc, #180]	@ (800084c <ProcessPattern+0x1a4>)
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	0092      	lsls	r2, r2, #2
 800079c:	58d3      	ldr	r3, [r2, r3]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d102      	bne.n	80007a8 <ProcessPattern+0x100>
 80007a2:	2380      	movs	r3, #128	@ 0x80
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	e004      	b.n	80007b2 <ProcessPattern+0x10a>
 80007a8:	2380      	movs	r3, #128	@ 0x80
 80007aa:	015b      	lsls	r3, r3, #5
 80007ac:	e001      	b.n	80007b2 <ProcessPattern+0x10a>
 80007ae:	2380      	movs	r3, #128	@ 0x80
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	22a0      	movs	r2, #160	@ 0xa0
 80007b4:	05d2      	lsls	r2, r2, #23
 80007b6:	0019      	movs	r1, r3
 80007b8:	0010      	movs	r0, r2
 80007ba:	f000 f851 	bl	8000860 <ReadButton>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d0e3      	beq.n	800078a <ProcessPattern+0xe2>
            LED_Status(pattern[i], 0);
 80007c2:	4b22      	ldr	r3, [pc, #136]	@ (800084c <ProcessPattern+0x1a4>)
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	0092      	lsls	r2, r2, #2
 80007c8:	58d3      	ldr	r3, [r2, r3]
 80007ca:	2100      	movs	r1, #0
 80007cc:	0018      	movs	r0, r3
 80007ce:	f7ff ff01 	bl	80005d4 <LED_Status>
        for (int i = 0; i < 3; i++) {
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2b02      	cmp	r3, #2
 80007dc:	ddcc      	ble.n	8000778 <ProcessPattern+0xd0>
        }
        pattern_count = 0;
 80007de:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <ProcessPattern+0x1a8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, LED_on_Pin, GPIO_PIN_RESET);
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <ProcessPattern+0x1ac>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	2180      	movs	r1, #128	@ 0x80
 80007ea:	0018      	movs	r0, r3
 80007ec:	f001 f993 	bl	8001b16 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_onB8_Pin, GPIO_PIN_RESET);
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	4817      	ldr	r0, [pc, #92]	@ (8000854 <ProcessPattern+0x1ac>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	0019      	movs	r1, r3
 80007fa:	f001 f98c 	bl	8001b16 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, LED_off_Pin, GPIO_PIN_SET);
 80007fe:	2380      	movs	r3, #128	@ 0x80
 8000800:	01db      	lsls	r3, r3, #7
 8000802:	4815      	ldr	r0, [pc, #84]	@ (8000858 <ProcessPattern+0x1b0>)
 8000804:	2201      	movs	r2, #1
 8000806:	0019      	movs	r1, r3
 8000808:	f001 f985 	bl	8001b16 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, LED_offC15_Pin, GPIO_PIN_SET);
 800080c:	2380      	movs	r3, #128	@ 0x80
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	4811      	ldr	r0, [pc, #68]	@ (8000858 <ProcessPattern+0x1b0>)
 8000812:	2201      	movs	r2, #1
 8000814:	0019      	movs	r1, r3
 8000816:	f001 f97e 	bl	8001b16 <HAL_GPIO_WritePin>

        TurnOffAllLEDs(1500);
 800081a:	4b10      	ldr	r3, [pc, #64]	@ (800085c <ProcessPattern+0x1b4>)
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff ff2b 	bl	8000678 <TurnOffAllLEDs>

        started = 0;
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <ProcessPattern+0x1a0>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
        WaitForStart();
 8000828:	f7ff fe1c 	bl	8000464 <WaitForStart>

        if (pattern_count == 0) {
 800082c:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <ProcessPattern+0x1a8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d104      	bne.n	800083e <ProcessPattern+0x196>
            WaitForStart();
 8000834:	f7ff fe16 	bl	8000464 <WaitForStart>
        }
    } else {
        WaitForStart();
    }
}
 8000838:	e001      	b.n	800083e <ProcessPattern+0x196>
        WaitForStart();
 800083a:	f7ff fe13 	bl	8000464 <WaitForStart>
}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b002      	add	sp, #8
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	2000009c 	.word	0x2000009c
 800084c:	2000008c 	.word	0x2000008c
 8000850:	200000a0 	.word	0x200000a0
 8000854:	50000400 	.word	0x50000400
 8000858:	50000800 	.word	0x50000800
 800085c:	000005dc 	.word	0x000005dc

08000860 <ReadButton>:

/* "ReadButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)"
 * Use For Debounce to Protect press wrong and
 * Checks for a button press that is held for at least 500ms and then released.*/

uint8_t ReadButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	000a      	movs	r2, r1
 800086a:	1cbb      	adds	r3, r7, #2
 800086c:	801a      	strh	r2, [r3, #0]
    uint32_t start_time = HAL_GetTick();
 800086e:	f000 fccf 	bl	8001210 <HAL_GetTick>
 8000872:	0003      	movs	r3, r0
 8000874:	60fb      	str	r3, [r7, #12]
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 8000876:	e015      	b.n	80008a4 <ReadButton+0x44>
        if (HAL_GetTick() - start_time >= 500) {
 8000878:	f000 fcca 	bl	8001210 <HAL_GetTick>
 800087c:	0002      	movs	r2, r0
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	1ad2      	subs	r2, r2, r3
 8000882:	23fa      	movs	r3, #250	@ 0xfa
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	429a      	cmp	r2, r3
 8000888:	d30c      	bcc.n	80008a4 <ReadButton+0x44>
            while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET);
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	1cbb      	adds	r3, r7, #2
 800088e:	881a      	ldrh	r2, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f001 f921 	bl	8001adc <HAL_GPIO_ReadPin>
 800089a:	0003      	movs	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d0f5      	beq.n	800088c <ReadButton+0x2c>
            return 1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e00a      	b.n	80008ba <ReadButton+0x5a>
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 80008a4:	1cbb      	adds	r3, r7, #2
 80008a6:	881a      	ldrh	r2, [r3, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	0011      	movs	r1, r2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 f915 	bl	8001adc <HAL_GPIO_ReadPin>
 80008b2:	0003      	movs	r3, r0
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d0df      	beq.n	8000878 <ReadButton+0x18>
        }
    }
    return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	0018      	movs	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	b004      	add	sp, #16
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <MCP23S17_Write>:
 * 1 = 0x00 R/W #this Write 0x00 / Read 0x01
 * 2 = Register Data what Send or Set data To MCP
 * 3 = Value data want to trigger to MCP
 * after that Reset pin CS to Start Send Data and Set on CS Pin When Data Finish Transmit SPI */

void MCP23S17_Write(uint8_t reg, uint8_t value) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	0002      	movs	r2, r0
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	1dbb      	adds	r3, r7, #6
 80008d2:	1c0a      	adds	r2, r1, #0
 80008d4:	701a      	strb	r2, [r3, #0]

    data[0] = MCP23S17_ADDR;
 80008d6:	4b13      	ldr	r3, [pc, #76]	@ (8000924 <MCP23S17_Write+0x60>)
 80008d8:	2248      	movs	r2, #72	@ 0x48
 80008da:	701a      	strb	r2, [r3, #0]
    data[1] = 0x00;
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <MCP23S17_Write+0x60>)
 80008de:	2200      	movs	r2, #0
 80008e0:	705a      	strb	r2, [r3, #1]
    data[2] = reg;
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <MCP23S17_Write+0x60>)
 80008e4:	1dfa      	adds	r2, r7, #7
 80008e6:	7812      	ldrb	r2, [r2, #0]
 80008e8:	709a      	strb	r2, [r3, #2]
    data[3] = value;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <MCP23S17_Write+0x60>)
 80008ec:	1dba      	adds	r2, r7, #6
 80008ee:	7812      	ldrb	r2, [r2, #0]
 80008f0:	70da      	strb	r2, [r3, #3]

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80008f2:	23a0      	movs	r3, #160	@ 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	2200      	movs	r2, #0
 80008f8:	2180      	movs	r1, #128	@ 0x80
 80008fa:	0018      	movs	r0, r3
 80008fc:	f001 f90b 	bl	8001b16 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, 4, HAL_MAX_DELAY);
 8000900:	2301      	movs	r3, #1
 8000902:	425b      	negs	r3, r3
 8000904:	4907      	ldr	r1, [pc, #28]	@ (8000924 <MCP23S17_Write+0x60>)
 8000906:	4808      	ldr	r0, [pc, #32]	@ (8000928 <MCP23S17_Write+0x64>)
 8000908:	2204      	movs	r2, #4
 800090a:	f001 febd 	bl	8002688 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800090e:	23a0      	movs	r3, #160	@ 0xa0
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	2201      	movs	r2, #1
 8000914:	2180      	movs	r1, #128	@ 0x80
 8000916:	0018      	movs	r0, r3
 8000918:	f001 f8fd 	bl	8001b16 <HAL_GPIO_WritePin>
}
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b002      	add	sp, #8
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000088 	.word	0x20000088
 8000928:	200000a4 	.word	0x200000a4

0800092c <MCP23S17_Init>:

/* "MCP23S17_Init()"
 * Use function MCP23S17_Write(uint8_t reg, uint8_t value) for Start Trigger Pin
 * and Set Input = 1 or Output = 0 to MCP and Port GPIO Set HIGH or LOW*/

void MCP23S17_Init() {
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000930:	23a0      	movs	r3, #160	@ 0xa0
 8000932:	05db      	lsls	r3, r3, #23
 8000934:	2201      	movs	r2, #1
 8000936:	2180      	movs	r1, #128	@ 0x80
 8000938:	0018      	movs	r0, r3
 800093a:	f001 f8ec 	bl	8001b16 <HAL_GPIO_WritePin>
    MCP23S17_Write(IODIRA, 0b11110000);
 800093e:	21f0      	movs	r1, #240	@ 0xf0
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff ffbf 	bl	80008c4 <MCP23S17_Write>
    MCP23S17_Write(IODIRB, 0b11110000);
 8000946:	21f0      	movs	r1, #240	@ 0xf0
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff ffbb 	bl	80008c4 <MCP23S17_Write>
    MCP23S17_Write(GPIOMCPA, 0b11111111);
 800094e:	21ff      	movs	r1, #255	@ 0xff
 8000950:	2012      	movs	r0, #18
 8000952:	f7ff ffb7 	bl	80008c4 <MCP23S17_Write>
    MCP23S17_Write(GPIOMCPB, 0b11111111);
 8000956:	21ff      	movs	r1, #255	@ 0xff
 8000958:	2013      	movs	r0, #19
 800095a:	f7ff ffb3 	bl	80008c4 <MCP23S17_Write>
}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <Send_data>:
/* "Send_data()"
 * Use for Link from ProcessPattern()
 * When "OPEN" pattern press Done Send_dataB or "OPEN" pattern press Done Send_dataA this will
 * Use FreeRTOS To 2 Task Send_data() and ProcessPattern() */

void Send_data(){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
if(pattern_count == 1){
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <Send_data+0x1c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d102      	bne.n	8000976 <Send_data+0x12>
		Send_dataB();
 8000970:	f000 f815 	bl	800099e <Send_dataB>
}
else{
		Send_dataA();
	}
}
 8000974:	e001      	b.n	800097a <Send_data+0x16>
		Send_dataA();
 8000976:	f000 f805 	bl	8000984 <Send_dataA>
}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000a0 	.word	0x200000a0

08000984 <Send_dataA>:
 * value 0 = Trigger Port MCP23s17 active LOW
 * value 1 = Trigger Port MCP23s17 active HIGH
 * 1111 1100
 */

void Send_dataA() {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
		MCP23S17_Write(OLATB, 0b11111100);
 8000988:	21fc      	movs	r1, #252	@ 0xfc
 800098a:	2015      	movs	r0, #21
 800098c:	f7ff ff9a 	bl	80008c4 <MCP23S17_Write>
		MCP23S17_Write(OLATA, 0b11111100);
 8000990:	21fc      	movs	r1, #252	@ 0xfc
 8000992:	2014      	movs	r0, #20
 8000994:	f7ff ff96 	bl	80008c4 <MCP23S17_Write>
    }
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <Send_dataB>:
 * value 0 = Trigger Port MCP23s17 active LOW
 * value 1 = Trigger Port MCP23s17 active HIGH
 * 1111 0011
 */

void Send_dataB(){
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0

		MCP23S17_Write(OLATB, 0b11110011);
 80009a2:	21f3      	movs	r1, #243	@ 0xf3
 80009a4:	2015      	movs	r0, #21
 80009a6:	f7ff ff8d 	bl	80008c4 <MCP23S17_Write>
		MCP23S17_Write(OLATA, 0b11110011);
 80009aa:	21f3      	movs	r1, #243	@ 0xf3
 80009ac:	2014      	movs	r0, #20
 80009ae:	f7ff ff89 	bl	80008c4 <MCP23S17_Write>

}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f000 fbac 	bl	8001118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f82c 	bl	8000a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f000 f904 	bl	8000bd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c8:	f000 f8e4 	bl	8000b94 <MX_DMA_Init>
  MX_SPI1_Init();
 80009cc:	f000 f884 	bl	8000ad8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MCP23S17_Init();
 80009d0:	f7ff ffac 	bl	800092c <MCP23S17_Init>
  //WaitForStart();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009d4:	f002 fab0 	bl	8002f38 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <main+0x4c>)
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <main+0x50>)
 80009dc:	2100      	movs	r1, #0
 80009de:	0018      	movs	r0, r3
 80009e0:	f002 faf2 	bl	8002fc8 <osThreadNew>
 80009e4:	0002      	movs	r2, r0
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <main+0x54>)
 80009e8:	601a      	str	r2, [r3, #0]

  /* creation of MCP23Task */
  MCP23TaskHandle = osThreadNew(StartTask02, NULL, &MCP23Task_attributes);
 80009ea:	4a09      	ldr	r2, [pc, #36]	@ (8000a10 <main+0x58>)
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <main+0x5c>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 fae9 	bl	8002fc8 <osThreadNew>
 80009f6:	0002      	movs	r2, r0
 80009f8:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <main+0x60>)
 80009fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009fc:	f002 fabe 	bl	8002f7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	e7fd      	b.n	8000a00 <main+0x48>
 8000a04:	08006508 	.word	0x08006508
 8000a08:	08000d65 	.word	0x08000d65
 8000a0c:	20000164 	.word	0x20000164
 8000a10:	0800652c 	.word	0x0800652c
 8000a14:	08000d73 	.word	0x08000d73
 8000a18:	20000168 	.word	0x20000168

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b093      	sub	sp, #76	@ 0x4c
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	2410      	movs	r4, #16
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	0018      	movs	r0, r3
 8000a28:	2338      	movs	r3, #56	@ 0x38
 8000a2a:	001a      	movs	r2, r3
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	f004 fe2d 	bl	800568c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a32:	003b      	movs	r3, r7
 8000a34:	0018      	movs	r0, r3
 8000a36:	2310      	movs	r3, #16
 8000a38:	001a      	movs	r2, r3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f004 fe26 	bl	800568c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a40:	2380      	movs	r3, #128	@ 0x80
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f001 f883 	bl	8001b50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2280      	movs	r2, #128	@ 0x80
 8000a54:	0052      	lsls	r2, r2, #1
 8000a56:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a58:	0021      	movs	r1, r4
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2240      	movs	r2, #64	@ 0x40
 8000a64:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2202      	movs	r2, #2
 8000a6a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2202      	movs	r2, #2
 8000a70:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2280      	movs	r2, #128	@ 0x80
 8000a82:	0292      	lsls	r2, r2, #10
 8000a84:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2280      	movs	r2, #128	@ 0x80
 8000a8a:	0492      	lsls	r2, r2, #18
 8000a8c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2280      	movs	r2, #128	@ 0x80
 8000a92:	0592      	lsls	r2, r2, #22
 8000a94:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f001 f899 	bl	8001bd0 <HAL_RCC_OscConfig>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000aa2:	f000 f96d 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa6:	003b      	movs	r3, r7
 8000aa8:	2207      	movs	r2, #7
 8000aaa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aac:	003b      	movs	r3, r7
 8000aae:	2202      	movs	r2, #2
 8000ab0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab8:	003b      	movs	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000abe:	003b      	movs	r3, r7
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f001 fb9e 	bl	8002204 <HAL_RCC_ClockConfig>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000acc:	f000 f958 	bl	8000d80 <Error_Handler>
  }
}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b013      	add	sp, #76	@ 0x4c
 8000ad6:	bd90      	pop	{r4, r7, pc}

08000ad8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */
	__HAL_RCC_SPI1_CLK_ENABLE(); // เ�?ิด Clock �?ห�? SPI1
 8000ade:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <MX_SPI1_Init+0xb0>)
 8000ae0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ae2:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <MX_SPI1_Init+0xb0>)
 8000ae4:	2180      	movs	r1, #128	@ 0x80
 8000ae6:	0149      	lsls	r1, r1, #5
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	641a      	str	r2, [r3, #64]	@ 0x40
 8000aec:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <MX_SPI1_Init+0xb0>)
 8000aee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	015b      	lsls	r3, r3, #5
 8000af4:	4013      	ands	r3, r2
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b23      	ldr	r3, [pc, #140]	@ (8000b88 <MX_SPI1_Init+0xb0>)
 8000afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000afe:	4b22      	ldr	r3, [pc, #136]	@ (8000b88 <MX_SPI1_Init+0xb0>)
 8000b00:	2101      	movs	r1, #1
 8000b02:	430a      	orrs	r2, r1
 8000b04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b06:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <MX_SPI1_Init+0xb0>)
 8000b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b12:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b14:	4a1e      	ldr	r2, [pc, #120]	@ (8000b90 <MX_SPI1_Init+0xb8>)
 8000b16:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b1a:	2282      	movs	r2, #130	@ 0x82
 8000b1c:	0052      	lsls	r2, r2, #1
 8000b1e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b22:	2280      	movs	r2, #128	@ 0x80
 8000b24:	0212      	lsls	r2, r2, #8
 8000b26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b28:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b2a:	22e0      	movs	r2, #224	@ 0xe0
 8000b2c:	00d2      	lsls	r2, r2, #3
 8000b2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b30:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b3e:	2280      	movs	r2, #128	@ 0x80
 8000b40:	0092      	lsls	r2, r2, #2
 8000b42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b44:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b46:	2218      	movs	r2, #24
 8000b48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b56:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b5e:	2207      	movs	r2, #7
 8000b60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b6e:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <MX_SPI1_Init+0xb4>)
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 fcd1 	bl	8002518 <HAL_SPI_Init>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 8000b7a:	f000 f901 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b002      	add	sp, #8
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	200000a4 	.word	0x200000a4
 8000b90:	40013000 	.word	0x40013000

08000b94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <MX_DMA_Init+0x38>)
 8000b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <MX_DMA_Init+0x38>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <MX_DMA_Init+0x38>)
 8000ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000baa:	2201      	movs	r2, #1
 8000bac:	4013      	ands	r3, r2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2103      	movs	r1, #3
 8000bb6:	2009      	movs	r0, #9
 8000bb8:	f000 fc04 	bl	80013c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bbc:	2009      	movs	r0, #9
 8000bbe:	f000 fc16 	bl	80013ee <HAL_NVIC_EnableIRQ>

}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b002      	add	sp, #8
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b08b      	sub	sp, #44	@ 0x2c
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	2414      	movs	r4, #20
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	0018      	movs	r0, r3
 8000bdc:	2314      	movs	r3, #20
 8000bde:	001a      	movs	r2, r3
 8000be0:	2100      	movs	r1, #0
 8000be2:	f004 fd53 	bl	800568c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4b5b      	ldr	r3, [pc, #364]	@ (8000d54 <MX_GPIO_Init+0x184>)
 8000be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bea:	4b5a      	ldr	r3, [pc, #360]	@ (8000d54 <MX_GPIO_Init+0x184>)
 8000bec:	2104      	movs	r1, #4
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bf2:	4b58      	ldr	r3, [pc, #352]	@ (8000d54 <MX_GPIO_Init+0x184>)
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfe:	4b55      	ldr	r3, [pc, #340]	@ (8000d54 <MX_GPIO_Init+0x184>)
 8000c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c02:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <MX_GPIO_Init+0x184>)
 8000c04:	2120      	movs	r1, #32
 8000c06:	430a      	orrs	r2, r1
 8000c08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c0a:	4b52      	ldr	r3, [pc, #328]	@ (8000d54 <MX_GPIO_Init+0x184>)
 8000c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c0e:	2220      	movs	r2, #32
 8000c10:	4013      	ands	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b4f      	ldr	r3, [pc, #316]	@ (8000d54 <MX_GPIO_Init+0x184>)
 8000c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c1a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d54 <MX_GPIO_Init+0x184>)
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c22:	4b4c      	ldr	r3, [pc, #304]	@ (8000d54 <MX_GPIO_Init+0x184>)
 8000c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c26:	2201      	movs	r2, #1
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b49      	ldr	r3, [pc, #292]	@ (8000d54 <MX_GPIO_Init+0x184>)
 8000c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c32:	4b48      	ldr	r3, [pc, #288]	@ (8000d54 <MX_GPIO_Init+0x184>)
 8000c34:	2102      	movs	r1, #2
 8000c36:	430a      	orrs	r2, r1
 8000c38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c3a:	4b46      	ldr	r3, [pc, #280]	@ (8000d54 <MX_GPIO_Init+0x184>)
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c3e:	2202      	movs	r2, #2
 8000c40:	4013      	ands	r3, r2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_off_Pin|LED_offC15_Pin, GPIO_PIN_RESET);
 8000c46:	23c0      	movs	r3, #192	@ 0xc0
 8000c48:	021b      	lsls	r3, r3, #8
 8000c4a:	4843      	ldr	r0, [pc, #268]	@ (8000d58 <MX_GPIO_Init+0x188>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	0019      	movs	r1, r3
 8000c50:	f000 ff61 	bl	8001b16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000c54:	23a0      	movs	r3, #160	@ 0xa0
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2180      	movs	r1, #128	@ 0x80
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f000 ff5a 	bl	8001b16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_1B1_Pin|LED_3_Pin|LED_3B4_Pin
 8000c62:	23fc      	movs	r3, #252	@ 0xfc
 8000c64:	33ff      	adds	r3, #255	@ 0xff
 8000c66:	483d      	ldr	r0, [pc, #244]	@ (8000d5c <MX_GPIO_Init+0x18c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	f000 ff53 	bl	8001b16 <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_2B6_Pin|LED_on_Pin|LED_onB8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_off_Pin LED_offC15_Pin */
  GPIO_InitStruct.Pin = LED_off_Pin|LED_offC15_Pin;
 8000c70:	193b      	adds	r3, r7, r4
 8000c72:	22c0      	movs	r2, #192	@ 0xc0
 8000c74:	0212      	lsls	r2, r2, #8
 8000c76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	4a32      	ldr	r2, [pc, #200]	@ (8000d58 <MX_GPIO_Init+0x188>)
 8000c8e:	0019      	movs	r1, r3
 8000c90:	0010      	movs	r0, r2
 8000c92:	f000 fdbf 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2204      	movs	r2, #4
 8000c9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	4a2d      	ldr	r2, [pc, #180]	@ (8000d60 <MX_GPIO_Init+0x190>)
 8000cac:	0019      	movs	r1, r3
 8000cae:	0010      	movs	r0, r2
 8000cb0:	f000 fdb0 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	2280      	movs	r2, #128	@ 0x80
 8000cb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	193a      	adds	r2, r7, r4
 8000cce:	23a0      	movs	r3, #160	@ 0xa0
 8000cd0:	05db      	lsls	r3, r3, #23
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 fd9d 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_1B1_Pin LED_3_Pin LED_3B4_Pin
                           LED_2_Pin LED_2B6_Pin LED_on_Pin LED_onB8_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_1B1_Pin|LED_3_Pin|LED_3B4_Pin
 8000cda:	0021      	movs	r1, r4
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	22fc      	movs	r2, #252	@ 0xfc
 8000ce0:	32ff      	adds	r2, #255	@ 0xff
 8000ce2:	601a      	str	r2, [r3, #0]
                          |LED_2_Pin|LED_2B6_Pin|LED_on_Pin|LED_onB8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	000c      	movs	r4, r1
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	2201      	movs	r2, #1
 8000cea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	4a18      	ldr	r2, [pc, #96]	@ (8000d5c <MX_GPIO_Init+0x18c>)
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	0010      	movs	r0, r2
 8000d00:	f000 fd88 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : OP1_Pin OP3_Pin OP2_Pin */
  GPIO_InitStruct.Pin = OP1_Pin|OP3_Pin|OP2_Pin;
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	2291      	movs	r2, #145	@ 0x91
 8000d08:	0212      	lsls	r2, r2, #8
 8000d0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	193a      	adds	r2, r7, r4
 8000d1a:	23a0      	movs	r3, #160	@ 0xa0
 8000d1c:	05db      	lsls	r3, r3, #23
 8000d1e:	0011      	movs	r1, r2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f000 fd77 	bl	8001814 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000d26:	0021      	movs	r1, r4
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	22a0      	movs	r2, #160	@ 0xa0
 8000d2c:	0152      	lsls	r2, r2, #5
 8000d2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	187a      	adds	r2, r7, r1
 8000d3e:	23a0      	movs	r3, #160	@ 0xa0
 8000d40:	05db      	lsls	r3, r3, #23
 8000d42:	0011      	movs	r1, r2
 8000d44:	0018      	movs	r0, r3
 8000d46:	f000 fd65 	bl	8001814 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b00b      	add	sp, #44	@ 0x2c
 8000d50:	bd90      	pop	{r4, r7, pc}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	40021000 	.word	0x40021000
 8000d58:	50000800 	.word	0x50000800
 8000d5c:	50000400 	.word	0x50000400
 8000d60:	50001400 	.word	0x50001400

08000d64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	ProcessPattern(); //#### PATTERN LOOP ####
 8000d6c:	f7ff fc9c 	bl	80006a8 <ProcessPattern>
 8000d70:	e7fc      	b.n	8000d6c <StartDefaultTask+0x8>

08000d72 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  while(1)
  {
	Send_data(); //#### SEND Data SPI LOOP ####
 8000d7a:	f7ff fdf3 	bl	8000964 <Send_data>
 8000d7e:	e7fc      	b.n	8000d7a <StartTask02+0x8>

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	46c0      	nop			@ (mov r8, r8)
 8000d8a:	e7fd      	b.n	8000d88 <Error_Handler+0x8>

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_MspInit+0x50>)
 8000d94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <HAL_MspInit+0x50>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <HAL_MspInit+0x50>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	2201      	movs	r2, #1
 8000da4:	4013      	ands	r3, r2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <HAL_MspInit+0x50>)
 8000dac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dae:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <HAL_MspInit+0x50>)
 8000db0:	2180      	movs	r1, #128	@ 0x80
 8000db2:	0549      	lsls	r1, r1, #21
 8000db4:	430a      	orrs	r2, r1
 8000db6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <HAL_MspInit+0x50>)
 8000dba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dbc:	2380      	movs	r3, #128	@ 0x80
 8000dbe:	055b      	lsls	r3, r3, #21
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	425b      	negs	r3, r3
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2103      	movs	r1, #3
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f000 faf8 	bl	80013c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd4:	46c0      	nop			@ (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b08b      	sub	sp, #44	@ 0x2c
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	2414      	movs	r4, #20
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	0018      	movs	r0, r3
 8000dee:	2314      	movs	r3, #20
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f004 fc4a 	bl	800568c <memset>
  if(hspi->Instance==SPI1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a34      	ldr	r2, [pc, #208]	@ (8000ed0 <HAL_SPI_MspInit+0xf0>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d161      	bne.n	8000ec6 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e02:	4b34      	ldr	r3, [pc, #208]	@ (8000ed4 <HAL_SPI_MspInit+0xf4>)
 8000e04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e06:	4b33      	ldr	r3, [pc, #204]	@ (8000ed4 <HAL_SPI_MspInit+0xf4>)
 8000e08:	2180      	movs	r1, #128	@ 0x80
 8000e0a:	0149      	lsls	r1, r1, #5
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e10:	4b30      	ldr	r3, [pc, #192]	@ (8000ed4 <HAL_SPI_MspInit+0xf4>)
 8000e12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e14:	2380      	movs	r3, #128	@ 0x80
 8000e16:	015b      	lsls	r3, r3, #5
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed4 <HAL_SPI_MspInit+0xf4>)
 8000e20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e22:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed4 <HAL_SPI_MspInit+0xf4>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	430a      	orrs	r2, r1
 8000e28:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed4 <HAL_SPI_MspInit+0xf4>)
 8000e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000e36:	0021      	movs	r1, r4
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2206      	movs	r2, #6
 8000e3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2202      	movs	r2, #2
 8000e42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	187a      	adds	r2, r7, r1
 8000e58:	23a0      	movs	r3, #160	@ 0xa0
 8000e5a:	05db      	lsls	r3, r3, #23
 8000e5c:	0011      	movs	r1, r2
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 fcd8 	bl	8001814 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <HAL_SPI_MspInit+0xf8>)
 8000e66:	4a1d      	ldr	r2, [pc, #116]	@ (8000edc <HAL_SPI_MspInit+0xfc>)
 8000e68:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <HAL_SPI_MspInit+0xf8>)
 8000e6c:	2211      	movs	r2, #17
 8000e6e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <HAL_SPI_MspInit+0xf8>)
 8000e72:	2210      	movs	r2, #16
 8000e74:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e76:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <HAL_SPI_MspInit+0xf8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <HAL_SPI_MspInit+0xf8>)
 8000e7e:	2280      	movs	r2, #128	@ 0x80
 8000e80:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <HAL_SPI_MspInit+0xf8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e88:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <HAL_SPI_MspInit+0xf8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <HAL_SPI_MspInit+0xf8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e94:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <HAL_SPI_MspInit+0xf8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <HAL_SPI_MspInit+0xf8>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f000 fac3 	bl	8001428 <HAL_DMA_Init>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000ea6:	f7ff ff6b 	bl	8000d80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <HAL_SPI_MspInit+0xf8>)
 8000eae:	655a      	str	r2, [r3, #84]	@ 0x54
 8000eb0:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <HAL_SPI_MspInit+0xf8>)
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2103      	movs	r1, #3
 8000eba:	2019      	movs	r0, #25
 8000ebc:	f000 fa82 	bl	80013c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ec0:	2019      	movs	r0, #25
 8000ec2:	f000 fa94 	bl	80013ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b00b      	add	sp, #44	@ 0x2c
 8000ecc:	bd90      	pop	{r4, r7, pc}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	40013000 	.word	0x40013000
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	20000108 	.word	0x20000108
 8000edc:	40020008 	.word	0x40020008

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee4:	46c0      	nop			@ (mov r8, r8)
 8000ee6:	e7fd      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eec:	46c0      	nop			@ (mov r8, r8)
 8000eee:	e7fd      	b.n	8000eec <HardFault_Handler+0x4>

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f97a 	bl	80011ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ef8:	f003 fb74 	bl	80045e4 <xTaskGetSchedulerState>
 8000efc:	0003      	movs	r3, r0
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d001      	beq.n	8000f06 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f02:	f004 f851 	bl	8004fa8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <DMA1_Channel1_IRQHandler+0x14>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 fb7c 	bl	8001610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	20000108 	.word	0x20000108

08000f24 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <SPI1_IRQHandler+0x14>)
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f001 fd0c 	bl	8002948 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f30:	46c0      	nop			@ (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	200000a4 	.word	0x200000a4

08000f3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  return 1;
 8000f40:	2301      	movs	r3, #1
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_kill>:

int _kill(int pid, int sig)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f52:	f004 fbf1 	bl	8005738 <__errno>
 8000f56:	0003      	movs	r3, r0
 8000f58:	2216      	movs	r2, #22
 8000f5a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	425b      	negs	r3, r3
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_exit>:

void _exit (int status)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f70:	2301      	movs	r3, #1
 8000f72:	425a      	negs	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	0011      	movs	r1, r2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff ffe5 	bl	8000f48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	e7fd      	b.n	8000f7e <_exit+0x16>

08000f82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e00a      	b.n	8000faa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f94:	e000      	b.n	8000f98 <_read+0x16>
 8000f96:	bf00      	nop
 8000f98:	0001      	movs	r1, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	60ba      	str	r2, [r7, #8]
 8000fa0:	b2ca      	uxtb	r2, r1
 8000fa2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dbf0      	blt.n	8000f94 <_read+0x12>
  }

  return len;
 8000fb2:	687b      	ldr	r3, [r7, #4]
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b006      	add	sp, #24
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	e009      	b.n	8000fe2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	60ba      	str	r2, [r7, #8]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	e000      	b.n	8000fdc <_write+0x20>
 8000fda:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	dbf1      	blt.n	8000fce <_write+0x12>
  }
  return len;
 8000fea:	687b      	ldr	r3, [r7, #4]
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b006      	add	sp, #24
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_close>:

int _close(int file)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	425b      	negs	r3, r3
}
 8001000:	0018      	movs	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}

08001008 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2280      	movs	r2, #128	@ 0x80
 8001016:	0192      	lsls	r2, r2, #6
 8001018:	605a      	str	r2, [r3, #4]
  return 0;
 800101a:	2300      	movs	r3, #0
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b002      	add	sp, #8
 8001022:	bd80      	pop	{r7, pc}

08001024 <_isatty>:

int _isatty(int file)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800102c:	2301      	movs	r3, #1
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}

08001036 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001042:	2300      	movs	r3, #0
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	b004      	add	sp, #16
 800104a:	bd80      	pop	{r7, pc}

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	@ (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	18d3      	adds	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f004 fb5c 	bl	8005738 <__errno>
 8001080:	0003      	movs	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	2301      	movs	r3, #1
 8001088:	425b      	negs	r3, r3
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	18d2      	adds	r2, r2, r3
 800109a:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <_sbrk+0x64>)
 800109c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b006      	add	sp, #24
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20009000 	.word	0x20009000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	2000016c 	.word	0x2000016c
 80010b4:	20001c08 	.word	0x20001c08

080010b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	46c0      	nop			@ (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c4:	480d      	ldr	r0, [pc, #52]	@ (80010fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c8:	f7ff fff6 	bl	80010b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010cc:	480c      	ldr	r0, [pc, #48]	@ (8001100 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ce:	490d      	ldr	r1, [pc, #52]	@ (8001104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001108 <LoopForever+0xe>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001110 <LoopForever+0x16>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010f2:	f004 fb27 	bl	8005744 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010f6:	f7ff fc5f 	bl	80009b8 <main>

080010fa <LoopForever>:

LoopForever:
  b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   r0, =_estack
 80010fc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001108:	080066a0 	.word	0x080066a0
  ldr r2, =_sbss
 800110c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001110:	20001c08 	.word	0x20001c08

08001114 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_COMP_IRQHandler>
	...

08001118 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <HAL_Init+0x3c>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <HAL_Init+0x3c>)
 800112a:	2180      	movs	r1, #128	@ 0x80
 800112c:	0049      	lsls	r1, r1, #1
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001132:	2003      	movs	r0, #3
 8001134:	f000 f810 	bl	8001158 <HAL_InitTick>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d003      	beq.n	8001144 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	e001      	b.n	8001148 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001144:	f7ff fe22 	bl	8000d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	781b      	ldrb	r3, [r3, #0]
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40022000 	.word	0x40022000

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001160:	230f      	movs	r3, #15
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001168:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <HAL_InitTick+0x88>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d02b      	beq.n	80011c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001170:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <HAL_InitTick+0x8c>)
 8001172:	681c      	ldr	r4, [r3, #0]
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <HAL_InitTick+0x88>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	0019      	movs	r1, r3
 800117a:	23fa      	movs	r3, #250	@ 0xfa
 800117c:	0098      	lsls	r0, r3, #2
 800117e:	f7fe ffcd 	bl	800011c <__udivsi3>
 8001182:	0003      	movs	r3, r0
 8001184:	0019      	movs	r1, r3
 8001186:	0020      	movs	r0, r4
 8001188:	f7fe ffc8 	bl	800011c <__udivsi3>
 800118c:	0003      	movs	r3, r0
 800118e:	0018      	movs	r0, r3
 8001190:	f000 f93d 	bl	800140e <HAL_SYSTICK_Config>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d112      	bne.n	80011be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d80a      	bhi.n	80011b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	2301      	movs	r3, #1
 80011a2:	425b      	negs	r3, r3
 80011a4:	2200      	movs	r2, #0
 80011a6:	0018      	movs	r0, r3
 80011a8:	f000 f90c 	bl	80013c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ac:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <HAL_InitTick+0x90>)
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	e00d      	b.n	80011d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011b4:	230f      	movs	r3, #15
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	e008      	b.n	80011d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011be:	230f      	movs	r3, #15
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	e003      	b.n	80011d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c8:	230f      	movs	r3, #15
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011d0:	230f      	movs	r3, #15
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	781b      	ldrb	r3, [r3, #0]
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b005      	add	sp, #20
 80011dc:	bd90      	pop	{r4, r7, pc}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000004 	.word	0x20000004

080011ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <HAL_IncTick+0x1c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	001a      	movs	r2, r3
 80011f6:	4b05      	ldr	r3, [pc, #20]	@ (800120c <HAL_IncTick+0x20>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	18d2      	adds	r2, r2, r3
 80011fc:	4b03      	ldr	r3, [pc, #12]	@ (800120c <HAL_IncTick+0x20>)
 80011fe:	601a      	str	r2, [r3, #0]
}
 8001200:	46c0      	nop			@ (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	20000008 	.word	0x20000008
 800120c:	20000170 	.word	0x20000170

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b02      	ldr	r3, [pc, #8]	@ (8001220 <HAL_GetTick+0x10>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	20000170 	.word	0x20000170

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff fff0 	bl	8001210 <HAL_GetTick>
 8001230:	0003      	movs	r3, r0
 8001232:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3301      	adds	r3, #1
 800123c:	d005      	beq.n	800124a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <HAL_Delay+0x44>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	001a      	movs	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	189b      	adds	r3, r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	f7ff ffe0 	bl	8001210 <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	d8f7      	bhi.n	800124c <HAL_Delay+0x28>
  {
  }
}
 800125c:	46c0      	nop			@ (mov r8, r8)
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	b004      	add	sp, #16
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	20000008 	.word	0x20000008

0800126c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	0002      	movs	r2, r0
 8001274:	1dfb      	adds	r3, r7, #7
 8001276:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001278:	1dfb      	adds	r3, r7, #7
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b7f      	cmp	r3, #127	@ 0x7f
 800127e:	d809      	bhi.n	8001294 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001280:	1dfb      	adds	r3, r7, #7
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	001a      	movs	r2, r3
 8001286:	231f      	movs	r3, #31
 8001288:	401a      	ands	r2, r3
 800128a:	4b04      	ldr	r3, [pc, #16]	@ (800129c <__NVIC_EnableIRQ+0x30>)
 800128c:	2101      	movs	r1, #1
 800128e:	4091      	lsls	r1, r2
 8001290:	000a      	movs	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	0002      	movs	r2, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80012b4:	d828      	bhi.n	8001308 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001374 <__NVIC_SetPriority+0xd4>)
 80012b8:	1dfb      	adds	r3, r7, #7
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	33c0      	adds	r3, #192	@ 0xc0
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	589b      	ldr	r3, [r3, r2]
 80012c6:	1dfa      	adds	r2, r7, #7
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	0011      	movs	r1, r2
 80012cc:	2203      	movs	r2, #3
 80012ce:	400a      	ands	r2, r1
 80012d0:	00d2      	lsls	r2, r2, #3
 80012d2:	21ff      	movs	r1, #255	@ 0xff
 80012d4:	4091      	lsls	r1, r2
 80012d6:	000a      	movs	r2, r1
 80012d8:	43d2      	mvns	r2, r2
 80012da:	401a      	ands	r2, r3
 80012dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	019b      	lsls	r3, r3, #6
 80012e2:	22ff      	movs	r2, #255	@ 0xff
 80012e4:	401a      	ands	r2, r3
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	0018      	movs	r0, r3
 80012ec:	2303      	movs	r3, #3
 80012ee:	4003      	ands	r3, r0
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f4:	481f      	ldr	r0, [pc, #124]	@ (8001374 <__NVIC_SetPriority+0xd4>)
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	430a      	orrs	r2, r1
 8001300:	33c0      	adds	r3, #192	@ 0xc0
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001306:	e031      	b.n	800136c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001308:	4a1b      	ldr	r2, [pc, #108]	@ (8001378 <__NVIC_SetPriority+0xd8>)
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	0019      	movs	r1, r3
 8001310:	230f      	movs	r3, #15
 8001312:	400b      	ands	r3, r1
 8001314:	3b08      	subs	r3, #8
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3306      	adds	r3, #6
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	18d3      	adds	r3, r2, r3
 800131e:	3304      	adds	r3, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1dfa      	adds	r2, r7, #7
 8001324:	7812      	ldrb	r2, [r2, #0]
 8001326:	0011      	movs	r1, r2
 8001328:	2203      	movs	r2, #3
 800132a:	400a      	ands	r2, r1
 800132c:	00d2      	lsls	r2, r2, #3
 800132e:	21ff      	movs	r1, #255	@ 0xff
 8001330:	4091      	lsls	r1, r2
 8001332:	000a      	movs	r2, r1
 8001334:	43d2      	mvns	r2, r2
 8001336:	401a      	ands	r2, r3
 8001338:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	019b      	lsls	r3, r3, #6
 800133e:	22ff      	movs	r2, #255	@ 0xff
 8001340:	401a      	ands	r2, r3
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	0018      	movs	r0, r3
 8001348:	2303      	movs	r3, #3
 800134a:	4003      	ands	r3, r0
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001350:	4809      	ldr	r0, [pc, #36]	@ (8001378 <__NVIC_SetPriority+0xd8>)
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	001c      	movs	r4, r3
 8001358:	230f      	movs	r3, #15
 800135a:	4023      	ands	r3, r4
 800135c:	3b08      	subs	r3, #8
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	430a      	orrs	r2, r1
 8001362:	3306      	adds	r3, #6
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	18c3      	adds	r3, r0, r3
 8001368:	3304      	adds	r3, #4
 800136a:	601a      	str	r2, [r3, #0]
}
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b003      	add	sp, #12
 8001372:	bd90      	pop	{r4, r7, pc}
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	1e5a      	subs	r2, r3, #1
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	045b      	lsls	r3, r3, #17
 800138c:	429a      	cmp	r2, r3
 800138e:	d301      	bcc.n	8001394 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001390:	2301      	movs	r3, #1
 8001392:	e010      	b.n	80013b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <SysTick_Config+0x44>)
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	3a01      	subs	r2, #1
 800139a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139c:	2301      	movs	r3, #1
 800139e:	425b      	negs	r3, r3
 80013a0:	2103      	movs	r1, #3
 80013a2:	0018      	movs	r0, r3
 80013a4:	f7ff ff7c 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a8:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <SysTick_Config+0x44>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ae:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <SysTick_Config+0x44>)
 80013b0:	2207      	movs	r2, #7
 80013b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	e000e010 	.word	0xe000e010

080013c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	210f      	movs	r1, #15
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	1c02      	adds	r2, r0, #0
 80013d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	0011      	movs	r1, r2
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7ff ff5d 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b004      	add	sp, #16
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	0002      	movs	r2, r0
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	0018      	movs	r0, r3
 8001402:	f7ff ff33 	bl	800126c <__NVIC_EnableIRQ>
}
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff ffaf 	bl	800137c <SysTick_Config>
 800141e:	0003      	movs	r3, r0
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e077      	b.n	800152a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a3d      	ldr	r2, [pc, #244]	@ (8001534 <HAL_DMA_Init+0x10c>)
 8001440:	4694      	mov	ip, r2
 8001442:	4463      	add	r3, ip
 8001444:	2114      	movs	r1, #20
 8001446:	0018      	movs	r0, r3
 8001448:	f7fe fe68 	bl	800011c <__udivsi3>
 800144c:	0003      	movs	r3, r0
 800144e:	009a      	lsls	r2, r3, #2
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2225      	movs	r2, #37	@ 0x25
 8001458:	2102      	movs	r1, #2
 800145a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4934      	ldr	r1, [pc, #208]	@ (8001538 <HAL_DMA_Init+0x110>)
 8001468:	400a      	ands	r2, r1
 800146a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6819      	ldr	r1, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f000 f965 	bl	8001774 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	2380      	movs	r3, #128	@ 0x80
 80014b0:	01db      	lsls	r3, r3, #7
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d102      	bne.n	80014bc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c4:	213f      	movs	r1, #63	@ 0x3f
 80014c6:	400a      	ands	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80014d2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d011      	beq.n	8001500 <HAL_DMA_Init+0xd8>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d80d      	bhi.n	8001500 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 f970 	bl	80017cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	e008      	b.n	8001512 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2225      	movs	r2, #37	@ 0x25
 800151c:	2101      	movs	r1, #1
 800151e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2224      	movs	r2, #36	@ 0x24
 8001524:	2100      	movs	r1, #0
 8001526:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	b002      	add	sp, #8
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	bffdfff8 	.word	0xbffdfff8
 8001538:	ffff800f 	.word	0xffff800f

0800153c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001544:	210f      	movs	r1, #15
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2225      	movs	r2, #37	@ 0x25
 8001550:	5c9b      	ldrb	r3, [r3, r2]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d006      	beq.n	8001566 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2204      	movs	r2, #4
 800155c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	e049      	b.n	80015fa <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	210e      	movs	r1, #14
 8001572:	438a      	bics	r2, r1
 8001574:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2101      	movs	r1, #1
 8001582:	438a      	bics	r2, r1
 8001584:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001590:	491d      	ldr	r1, [pc, #116]	@ (8001608 <HAL_DMA_Abort_IT+0xcc>)
 8001592:	400a      	ands	r2, r1
 8001594:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001596:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <HAL_DMA_Abort_IT+0xd0>)
 8001598:	6859      	ldr	r1, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	221c      	movs	r2, #28
 80015a0:	4013      	ands	r3, r2
 80015a2:	2201      	movs	r2, #1
 80015a4:	409a      	lsls	r2, r3
 80015a6:	4b19      	ldr	r3, [pc, #100]	@ (800160c <HAL_DMA_Abort_IT+0xd0>)
 80015a8:	430a      	orrs	r2, r1
 80015aa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80015b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00c      	beq.n	80015d8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c8:	490f      	ldr	r1, [pc, #60]	@ (8001608 <HAL_DMA_Abort_IT+0xcc>)
 80015ca:	400a      	ands	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80015d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2225      	movs	r2, #37	@ 0x25
 80015dc:	2101      	movs	r1, #1
 80015de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2224      	movs	r2, #36	@ 0x24
 80015e4:	2100      	movs	r1, #0
 80015e6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d004      	beq.n	80015fa <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	0010      	movs	r0, r2
 80015f8:	4798      	blx	r3
    }
  }
  return status;
 80015fa:	230f      	movs	r3, #15
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	781b      	ldrb	r3, [r3, #0]
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b004      	add	sp, #16
 8001606:	bd80      	pop	{r7, pc}
 8001608:	fffffeff 	.word	0xfffffeff
 800160c:	40020000 	.word	0x40020000

08001610 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001618:	4b55      	ldr	r3, [pc, #340]	@ (8001770 <HAL_DMA_IRQHandler+0x160>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	221c      	movs	r2, #28
 800162c:	4013      	ands	r3, r2
 800162e:	2204      	movs	r2, #4
 8001630:	409a      	lsls	r2, r3
 8001632:	0013      	movs	r3, r2
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4013      	ands	r3, r2
 8001638:	d027      	beq.n	800168a <HAL_DMA_IRQHandler+0x7a>
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2204      	movs	r2, #4
 800163e:	4013      	ands	r3, r2
 8001640:	d023      	beq.n	800168a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2220      	movs	r2, #32
 800164a:	4013      	ands	r3, r2
 800164c:	d107      	bne.n	800165e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2104      	movs	r1, #4
 800165a:	438a      	bics	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800165e:	4b44      	ldr	r3, [pc, #272]	@ (8001770 <HAL_DMA_IRQHandler+0x160>)
 8001660:	6859      	ldr	r1, [r3, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	221c      	movs	r2, #28
 8001668:	4013      	ands	r3, r2
 800166a:	2204      	movs	r2, #4
 800166c:	409a      	lsls	r2, r3
 800166e:	4b40      	ldr	r3, [pc, #256]	@ (8001770 <HAL_DMA_IRQHandler+0x160>)
 8001670:	430a      	orrs	r2, r1
 8001672:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001678:	2b00      	cmp	r3, #0
 800167a:	d100      	bne.n	800167e <HAL_DMA_IRQHandler+0x6e>
 800167c:	e073      	b.n	8001766 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	0010      	movs	r0, r2
 8001686:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001688:	e06d      	b.n	8001766 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	221c      	movs	r2, #28
 8001690:	4013      	ands	r3, r2
 8001692:	2202      	movs	r2, #2
 8001694:	409a      	lsls	r2, r3
 8001696:	0013      	movs	r3, r2
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	4013      	ands	r3, r2
 800169c:	d02e      	beq.n	80016fc <HAL_DMA_IRQHandler+0xec>
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2202      	movs	r2, #2
 80016a2:	4013      	ands	r3, r2
 80016a4:	d02a      	beq.n	80016fc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2220      	movs	r2, #32
 80016ae:	4013      	ands	r3, r2
 80016b0:	d10b      	bne.n	80016ca <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	210a      	movs	r1, #10
 80016be:	438a      	bics	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2225      	movs	r2, #37	@ 0x25
 80016c6:	2101      	movs	r1, #1
 80016c8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80016ca:	4b29      	ldr	r3, [pc, #164]	@ (8001770 <HAL_DMA_IRQHandler+0x160>)
 80016cc:	6859      	ldr	r1, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	221c      	movs	r2, #28
 80016d4:	4013      	ands	r3, r2
 80016d6:	2202      	movs	r2, #2
 80016d8:	409a      	lsls	r2, r3
 80016da:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <HAL_DMA_IRQHandler+0x160>)
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2224      	movs	r2, #36	@ 0x24
 80016e4:	2100      	movs	r1, #0
 80016e6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d03a      	beq.n	8001766 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	0010      	movs	r0, r2
 80016f8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80016fa:	e034      	b.n	8001766 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	221c      	movs	r2, #28
 8001702:	4013      	ands	r3, r2
 8001704:	2208      	movs	r2, #8
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	d02b      	beq.n	8001768 <HAL_DMA_IRQHandler+0x158>
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2208      	movs	r2, #8
 8001714:	4013      	ands	r3, r2
 8001716:	d027      	beq.n	8001768 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	210e      	movs	r1, #14
 8001724:	438a      	bics	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001728:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <HAL_DMA_IRQHandler+0x160>)
 800172a:	6859      	ldr	r1, [r3, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	221c      	movs	r2, #28
 8001732:	4013      	ands	r3, r2
 8001734:	2201      	movs	r2, #1
 8001736:	409a      	lsls	r2, r3
 8001738:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <HAL_DMA_IRQHandler+0x160>)
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2225      	movs	r2, #37	@ 0x25
 8001748:	2101      	movs	r1, #1
 800174a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2224      	movs	r2, #36	@ 0x24
 8001750:	2100      	movs	r1, #0
 8001752:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	0010      	movs	r0, r2
 8001764:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	46c0      	nop			@ (mov r8, r8)
}
 800176a:	46bd      	mov	sp, r7
 800176c:	b004      	add	sp, #16
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40020000 	.word	0x40020000

08001774 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	4a10      	ldr	r2, [pc, #64]	@ (80017c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001784:	4694      	mov	ip, r2
 8001786:	4463      	add	r3, ip
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	001a      	movs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	001a      	movs	r2, r3
 8001796:	23ff      	movs	r3, #255	@ 0xff
 8001798:	4013      	ands	r3, r2
 800179a:	3b08      	subs	r3, #8
 800179c:	2114      	movs	r1, #20
 800179e:	0018      	movs	r0, r3
 80017a0:	f7fe fcbc 	bl	800011c <__udivsi3>
 80017a4:	0003      	movs	r3, r0
 80017a6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a07      	ldr	r2, [pc, #28]	@ (80017c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80017ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	221f      	movs	r2, #31
 80017b2:	4013      	ands	r3, r2
 80017b4:	2201      	movs	r2, #1
 80017b6:	409a      	lsls	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80017bc:	46c0      	nop			@ (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b004      	add	sp, #16
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	10008200 	.word	0x10008200
 80017c8:	40020880 	.word	0x40020880

080017cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	223f      	movs	r2, #63	@ 0x3f
 80017da:	4013      	ands	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017e2:	4694      	mov	ip, r2
 80017e4:	4463      	add	r3, ip
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	001a      	movs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a07      	ldr	r2, [pc, #28]	@ (8001810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	4013      	ands	r3, r2
 80017fc:	2201      	movs	r2, #1
 80017fe:	409a      	lsls	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001804:	46c0      	nop			@ (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b004      	add	sp, #16
 800180a:	bd80      	pop	{r7, pc}
 800180c:	1000823f 	.word	0x1000823f
 8001810:	40020940 	.word	0x40020940

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001822:	e147      	b.n	8001ab4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4091      	lsls	r1, r2
 800182e:	000a      	movs	r2, r1
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d100      	bne.n	800183c <HAL_GPIO_Init+0x28>
 800183a:	e138      	b.n	8001aae <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2203      	movs	r2, #3
 8001842:	4013      	ands	r3, r2
 8001844:	2b01      	cmp	r3, #1
 8001846:	d005      	beq.n	8001854 <HAL_GPIO_Init+0x40>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2203      	movs	r2, #3
 800184e:	4013      	ands	r3, r2
 8001850:	2b02      	cmp	r3, #2
 8001852:	d130      	bne.n	80018b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	409a      	lsls	r2, r3
 8001862:	0013      	movs	r3, r2
 8001864:	43da      	mvns	r2, r3
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	409a      	lsls	r2, r3
 8001876:	0013      	movs	r3, r2
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800188a:	2201      	movs	r2, #1
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
 8001890:	0013      	movs	r3, r2
 8001892:	43da      	mvns	r2, r3
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	2201      	movs	r2, #1
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2203      	movs	r2, #3
 80018bc:	4013      	ands	r3, r2
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d017      	beq.n	80018f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	43da      	mvns	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	409a      	lsls	r2, r3
 80018e4:	0013      	movs	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2203      	movs	r2, #3
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d123      	bne.n	8001946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	58d3      	ldr	r3, [r2, r3]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2207      	movs	r2, #7
 8001910:	4013      	ands	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	409a      	lsls	r2, r3
 8001918:	0013      	movs	r3, r2
 800191a:	43da      	mvns	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2107      	movs	r1, #7
 800192a:	400b      	ands	r3, r1
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	409a      	lsls	r2, r3
 8001930:	0013      	movs	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	6939      	ldr	r1, [r7, #16]
 8001944:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	43da      	mvns	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2203      	movs	r2, #3
 8001964:	401a      	ands	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	23c0      	movs	r3, #192	@ 0xc0
 8001980:	029b      	lsls	r3, r3, #10
 8001982:	4013      	ands	r3, r2
 8001984:	d100      	bne.n	8001988 <HAL_GPIO_Init+0x174>
 8001986:	e092      	b.n	8001aae <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001988:	4a50      	ldr	r2, [pc, #320]	@ (8001acc <HAL_GPIO_Init+0x2b8>)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3318      	adds	r3, #24
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	589b      	ldr	r3, [r3, r2]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2203      	movs	r2, #3
 800199a:	4013      	ands	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	220f      	movs	r2, #15
 80019a0:	409a      	lsls	r2, r3
 80019a2:	0013      	movs	r3, r2
 80019a4:	43da      	mvns	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	23a0      	movs	r3, #160	@ 0xa0
 80019b0:	05db      	lsls	r3, r3, #23
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0x1ca>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a45      	ldr	r2, [pc, #276]	@ (8001ad0 <HAL_GPIO_Init+0x2bc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00d      	beq.n	80019da <HAL_GPIO_Init+0x1c6>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a44      	ldr	r2, [pc, #272]	@ (8001ad4 <HAL_GPIO_Init+0x2c0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x1c2>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a43      	ldr	r2, [pc, #268]	@ (8001ad8 <HAL_GPIO_Init+0x2c4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_GPIO_Init+0x1be>
 80019ce:	2303      	movs	r3, #3
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x1cc>
 80019d2:	2305      	movs	r3, #5
 80019d4:	e004      	b.n	80019e0 <HAL_GPIO_Init+0x1cc>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e002      	b.n	80019e0 <HAL_GPIO_Init+0x1cc>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_GPIO_Init+0x1cc>
 80019de:	2300      	movs	r3, #0
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	2103      	movs	r1, #3
 80019e4:	400a      	ands	r2, r1
 80019e6:	00d2      	lsls	r2, r2, #3
 80019e8:	4093      	lsls	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80019f0:	4936      	ldr	r1, [pc, #216]	@ (8001acc <HAL_GPIO_Init+0x2b8>)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3318      	adds	r3, #24
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019fe:	4b33      	ldr	r3, [pc, #204]	@ (8001acc <HAL_GPIO_Init+0x2b8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	43da      	mvns	r2, r3
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	2380      	movs	r3, #128	@ 0x80
 8001a14:	035b      	lsls	r3, r3, #13
 8001a16:	4013      	ands	r3, r2
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a22:	4b2a      	ldr	r3, [pc, #168]	@ (8001acc <HAL_GPIO_Init+0x2b8>)
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001a28:	4b28      	ldr	r3, [pc, #160]	@ (8001acc <HAL_GPIO_Init+0x2b8>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43da      	mvns	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	2380      	movs	r3, #128	@ 0x80
 8001a3e:	039b      	lsls	r3, r3, #14
 8001a40:	4013      	ands	r3, r2
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <HAL_GPIO_Init+0x2b8>)
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a52:	4a1e      	ldr	r2, [pc, #120]	@ (8001acc <HAL_GPIO_Init+0x2b8>)
 8001a54:	2384      	movs	r3, #132	@ 0x84
 8001a56:	58d3      	ldr	r3, [r2, r3]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	2380      	movs	r3, #128	@ 0x80
 8001a6a:	029b      	lsls	r3, r3, #10
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a78:	4914      	ldr	r1, [pc, #80]	@ (8001acc <HAL_GPIO_Init+0x2b8>)
 8001a7a:	2284      	movs	r2, #132	@ 0x84
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001a80:	4a12      	ldr	r2, [pc, #72]	@ (8001acc <HAL_GPIO_Init+0x2b8>)
 8001a82:	2380      	movs	r3, #128	@ 0x80
 8001a84:	58d3      	ldr	r3, [r2, r3]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	2380      	movs	r3, #128	@ 0x80
 8001a98:	025b      	lsls	r3, r3, #9
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aa6:	4909      	ldr	r1, [pc, #36]	@ (8001acc <HAL_GPIO_Init+0x2b8>)
 8001aa8:	2280      	movs	r2, #128	@ 0x80
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	40da      	lsrs	r2, r3
 8001abc:	1e13      	subs	r3, r2, #0
 8001abe:	d000      	beq.n	8001ac2 <HAL_GPIO_Init+0x2ae>
 8001ac0:	e6b0      	b.n	8001824 <HAL_GPIO_Init+0x10>
  }
}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	46c0      	nop			@ (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b006      	add	sp, #24
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021800 	.word	0x40021800
 8001ad0:	50000400 	.word	0x50000400
 8001ad4:	50000800 	.word	0x50000800
 8001ad8:	50000c00 	.word	0x50000c00

08001adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	000a      	movs	r2, r1
 8001ae6:	1cbb      	adds	r3, r7, #2
 8001ae8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	1cba      	adds	r2, r7, #2
 8001af0:	8812      	ldrh	r2, [r2, #0]
 8001af2:	4013      	ands	r3, r2
 8001af4:	d004      	beq.n	8001b00 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001af6:	230f      	movs	r3, #15
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
 8001afe:	e003      	b.n	8001b08 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b00:	230f      	movs	r3, #15
 8001b02:	18fb      	adds	r3, r7, r3
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b08:	230f      	movs	r3, #15
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	781b      	ldrb	r3, [r3, #0]
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b004      	add	sp, #16
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	0008      	movs	r0, r1
 8001b20:	0011      	movs	r1, r2
 8001b22:	1cbb      	adds	r3, r7, #2
 8001b24:	1c02      	adds	r2, r0, #0
 8001b26:	801a      	strh	r2, [r3, #0]
 8001b28:	1c7b      	adds	r3, r7, #1
 8001b2a:	1c0a      	adds	r2, r1, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b2e:	1c7b      	adds	r3, r7, #1
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b36:	1cbb      	adds	r3, r7, #2
 8001b38:	881a      	ldrh	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b3e:	e003      	b.n	8001b48 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b40:	1cbb      	adds	r3, r7, #2
 8001b42:	881a      	ldrh	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b48:	46c0      	nop			@ (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b002      	add	sp, #8
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b58:	4b19      	ldr	r3, [pc, #100]	@ (8001bc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	0019      	movs	r1, r3
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d11f      	bne.n	8001bb4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b74:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	0013      	movs	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	189b      	adds	r3, r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4912      	ldr	r1, [pc, #72]	@ (8001bcc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7fe faca 	bl	800011c <__udivsi3>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b8e:	e008      	b.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	e001      	b.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e009      	b.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	2380      	movs	r3, #128	@ 0x80
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	401a      	ands	r2, r3
 8001bac:	2380      	movs	r3, #128	@ 0x80
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d0ed      	beq.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b004      	add	sp, #16
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			@ (mov r8, r8)
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	fffff9ff 	.word	0xfffff9ff
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	000f4240 	.word	0x000f4240

08001bd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e2fe      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4013      	ands	r3, r2
 8001bea:	d100      	bne.n	8001bee <HAL_RCC_OscConfig+0x1e>
 8001bec:	e07c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bee:	4bc3      	ldr	r3, [pc, #780]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2238      	movs	r2, #56	@ 0x38
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf8:	4bc0      	ldr	r3, [pc, #768]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	4013      	ands	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b10      	cmp	r3, #16
 8001c06:	d102      	bne.n	8001c0e <HAL_RCC_OscConfig+0x3e>
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d002      	beq.n	8001c14 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d10b      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	4bb9      	ldr	r3, [pc, #740]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	029b      	lsls	r3, r3, #10
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d062      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x116>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d15e      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e2d9      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	025b      	lsls	r3, r3, #9
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_OscConfig+0x78>
 8001c38:	4bb0      	ldr	r3, [pc, #704]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4baf      	ldr	r3, [pc, #700]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	2180      	movs	r1, #128	@ 0x80
 8001c40:	0249      	lsls	r1, r1, #9
 8001c42:	430a      	orrs	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	e020      	b.n	8001c8a <HAL_RCC_OscConfig+0xba>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	23a0      	movs	r3, #160	@ 0xa0
 8001c4e:	02db      	lsls	r3, r3, #11
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d10e      	bne.n	8001c72 <HAL_RCC_OscConfig+0xa2>
 8001c54:	4ba9      	ldr	r3, [pc, #676]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4ba8      	ldr	r3, [pc, #672]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c5a:	2180      	movs	r1, #128	@ 0x80
 8001c5c:	02c9      	lsls	r1, r1, #11
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	4ba6      	ldr	r3, [pc, #664]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4ba5      	ldr	r3, [pc, #660]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c68:	2180      	movs	r1, #128	@ 0x80
 8001c6a:	0249      	lsls	r1, r1, #9
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e00b      	b.n	8001c8a <HAL_RCC_OscConfig+0xba>
 8001c72:	4ba2      	ldr	r3, [pc, #648]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4ba1      	ldr	r3, [pc, #644]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c78:	49a1      	ldr	r1, [pc, #644]	@ (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	4b9f      	ldr	r3, [pc, #636]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4b9e      	ldr	r3, [pc, #632]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c84:	499f      	ldr	r1, [pc, #636]	@ (8001f04 <HAL_RCC_OscConfig+0x334>)
 8001c86:	400a      	ands	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d014      	beq.n	8001cbc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7ff fabd 	bl	8001210 <HAL_GetTick>
 8001c96:	0003      	movs	r3, r0
 8001c98:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fab8 	bl	8001210 <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	@ 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e298      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cae:	4b93      	ldr	r3, [pc, #588]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	2380      	movs	r3, #128	@ 0x80
 8001cb4:	029b      	lsls	r3, r3, #10
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0xcc>
 8001cba:	e015      	b.n	8001ce8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff faa8 	bl	8001210 <HAL_GetTick>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc6:	f7ff faa3 	bl	8001210 <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b64      	cmp	r3, #100	@ 0x64
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e283      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd8:	4b88      	ldr	r3, [pc, #544]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	2380      	movs	r3, #128	@ 0x80
 8001cde:	029b      	lsls	r3, r3, #10
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d1f0      	bne.n	8001cc6 <HAL_RCC_OscConfig+0xf6>
 8001ce4:	e000      	b.n	8001ce8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2202      	movs	r2, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d100      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x124>
 8001cf2:	e099      	b.n	8001e28 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf4:	4b81      	ldr	r3, [pc, #516]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2238      	movs	r2, #56	@ 0x38
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cfe:	4b7f      	ldr	r3, [pc, #508]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2203      	movs	r2, #3
 8001d04:	4013      	ands	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d102      	bne.n	8001d14 <HAL_RCC_OscConfig+0x144>
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d002      	beq.n	8001d1a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d135      	bne.n	8001d86 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d1a:	4b78      	ldr	r3, [pc, #480]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4013      	ands	r3, r2
 8001d24:	d005      	beq.n	8001d32 <HAL_RCC_OscConfig+0x162>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e256      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b72      	ldr	r3, [pc, #456]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4a74      	ldr	r2, [pc, #464]	@ (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	021a      	lsls	r2, r3, #8
 8001d42:	4b6e      	ldr	r3, [pc, #440]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d44:	430a      	orrs	r2, r1
 8001d46:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d112      	bne.n	8001d74 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d4e:	4b6b      	ldr	r3, [pc, #428]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a6e      	ldr	r2, [pc, #440]	@ (8001f0c <HAL_RCC_OscConfig+0x33c>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	4b67      	ldr	r3, [pc, #412]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d62:	4b66      	ldr	r3, [pc, #408]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0adb      	lsrs	r3, r3, #11
 8001d68:	2207      	movs	r2, #7
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	4a68      	ldr	r2, [pc, #416]	@ (8001f10 <HAL_RCC_OscConfig+0x340>)
 8001d6e:	40da      	lsrs	r2, r3
 8001d70:	4b68      	ldr	r3, [pc, #416]	@ (8001f14 <HAL_RCC_OscConfig+0x344>)
 8001d72:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d74:	4b68      	ldr	r3, [pc, #416]	@ (8001f18 <HAL_RCC_OscConfig+0x348>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff f9ed 	bl	8001158 <HAL_InitTick>
 8001d7e:	1e03      	subs	r3, r0, #0
 8001d80:	d051      	beq.n	8001e26 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e22c      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d030      	beq.n	8001df0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a5e      	ldr	r2, [pc, #376]	@ (8001f0c <HAL_RCC_OscConfig+0x33c>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	0019      	movs	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	4b57      	ldr	r3, [pc, #348]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001da2:	4b56      	ldr	r3, [pc, #344]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4b55      	ldr	r3, [pc, #340]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001da8:	2180      	movs	r1, #128	@ 0x80
 8001daa:	0049      	lsls	r1, r1, #1
 8001dac:	430a      	orrs	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff fa2e 	bl	8001210 <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff fa29 	bl	8001210 <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e209      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dcc:	4b4b      	ldr	r3, [pc, #300]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2380      	movs	r3, #128	@ 0x80
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b48      	ldr	r3, [pc, #288]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a4a      	ldr	r2, [pc, #296]	@ (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	021a      	lsls	r2, r3, #8
 8001de8:	4b44      	ldr	r3, [pc, #272]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001dea:	430a      	orrs	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	e01b      	b.n	8001e28 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001df0:	4b42      	ldr	r3, [pc, #264]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b41      	ldr	r3, [pc, #260]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001df6:	4949      	ldr	r1, [pc, #292]	@ (8001f1c <HAL_RCC_OscConfig+0x34c>)
 8001df8:	400a      	ands	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fa08 	bl	8001210 <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e06:	f7ff fa03 	bl	8001210 <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e1e3      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e18:	4b38      	ldr	r3, [pc, #224]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4013      	ands	r3, r2
 8001e22:	d1f0      	bne.n	8001e06 <HAL_RCC_OscConfig+0x236>
 8001e24:	e000      	b.n	8001e28 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e26:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d047      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e32:	4b32      	ldr	r3, [pc, #200]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2238      	movs	r2, #56	@ 0x38
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b18      	cmp	r3, #24
 8001e3c:	d10a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e42:	2202      	movs	r2, #2
 8001e44:	4013      	ands	r3, r2
 8001e46:	d03c      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x2f2>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d138      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e1c5      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d019      	beq.n	8001e90 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e5c:	4b27      	ldr	r3, [pc, #156]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e60:	4b26      	ldr	r3, [pc, #152]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e62:	2101      	movs	r1, #1
 8001e64:	430a      	orrs	r2, r1
 8001e66:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7ff f9d2 	bl	8001210 <HAL_GetTick>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e72:	f7ff f9cd 	bl	8001210 <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e1ad      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e84:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e88:	2202      	movs	r2, #2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d0f1      	beq.n	8001e72 <HAL_RCC_OscConfig+0x2a2>
 8001e8e:	e018      	b.n	8001ec2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e90:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e94:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e96:	2101      	movs	r1, #1
 8001e98:	438a      	bics	r2, r1
 8001e9a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f9b8 	bl	8001210 <HAL_GetTick>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea6:	f7ff f9b3 	bl	8001210 <HAL_GetTick>
 8001eaa:	0002      	movs	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e193      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb8:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d1f1      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d100      	bne.n	8001ece <HAL_RCC_OscConfig+0x2fe>
 8001ecc:	e0c6      	b.n	800205c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ece:	231f      	movs	r3, #31
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2238      	movs	r2, #56	@ 0x38
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b20      	cmp	r3, #32
 8001ee0:	d11e      	bne.n	8001f20 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d100      	bne.n	8001eee <HAL_RCC_OscConfig+0x31e>
 8001eec:	e0b6      	b.n	800205c <HAL_RCC_OscConfig+0x48c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d000      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x328>
 8001ef6:	e0b1      	b.n	800205c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e171      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
 8001efc:	40021000 	.word	0x40021000
 8001f00:	fffeffff 	.word	0xfffeffff
 8001f04:	fffbffff 	.word	0xfffbffff
 8001f08:	ffff80ff 	.word	0xffff80ff
 8001f0c:	ffffc7ff 	.word	0xffffc7ff
 8001f10:	00f42400 	.word	0x00f42400
 8001f14:	20000000 	.word	0x20000000
 8001f18:	20000004 	.word	0x20000004
 8001f1c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f20:	4bb1      	ldr	r3, [pc, #708]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8001f22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f24:	2380      	movs	r3, #128	@ 0x80
 8001f26:	055b      	lsls	r3, r3, #21
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_OscConfig+0x360>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x362>
 8001f30:	2300      	movs	r3, #0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d011      	beq.n	8001f5a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	4bac      	ldr	r3, [pc, #688]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8001f38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f3a:	4bab      	ldr	r3, [pc, #684]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8001f3c:	2180      	movs	r1, #128	@ 0x80
 8001f3e:	0549      	lsls	r1, r1, #21
 8001f40:	430a      	orrs	r2, r1
 8001f42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f44:	4ba8      	ldr	r3, [pc, #672]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8001f46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	055b      	lsls	r3, r3, #21
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001f52:	231f      	movs	r3, #31
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5a:	4ba4      	ldr	r3, [pc, #656]	@ (80021ec <HAL_RCC_OscConfig+0x61c>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	2380      	movs	r3, #128	@ 0x80
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4013      	ands	r3, r2
 8001f64:	d11a      	bne.n	8001f9c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f66:	4ba1      	ldr	r3, [pc, #644]	@ (80021ec <HAL_RCC_OscConfig+0x61c>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4ba0      	ldr	r3, [pc, #640]	@ (80021ec <HAL_RCC_OscConfig+0x61c>)
 8001f6c:	2180      	movs	r1, #128	@ 0x80
 8001f6e:	0049      	lsls	r1, r1, #1
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f74:	f7ff f94c 	bl	8001210 <HAL_GetTick>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7e:	f7ff f947 	bl	8001210 <HAL_GetTick>
 8001f82:	0002      	movs	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e127      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f90:	4b96      	ldr	r3, [pc, #600]	@ (80021ec <HAL_RCC_OscConfig+0x61c>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3e2>
 8001fa4:	4b90      	ldr	r3, [pc, #576]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8001fa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fa8:	4b8f      	ldr	r3, [pc, #572]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8001faa:	2101      	movs	r1, #1
 8001fac:	430a      	orrs	r2, r1
 8001fae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fb0:	e01c      	b.n	8001fec <HAL_RCC_OscConfig+0x41c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x404>
 8001fba:	4b8b      	ldr	r3, [pc, #556]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8001fbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fbe:	4b8a      	ldr	r3, [pc, #552]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fc6:	4b88      	ldr	r3, [pc, #544]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8001fc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fca:	4b87      	ldr	r3, [pc, #540]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8001fcc:	2101      	movs	r1, #1
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0x41c>
 8001fd4:	4b84      	ldr	r3, [pc, #528]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8001fd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fd8:	4b83      	ldr	r3, [pc, #524]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8001fda:	2101      	movs	r1, #1
 8001fdc:	438a      	bics	r2, r1
 8001fde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fe0:	4b81      	ldr	r3, [pc, #516]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8001fe2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fe4:	4b80      	ldr	r3, [pc, #512]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8001fe6:	2104      	movs	r1, #4
 8001fe8:	438a      	bics	r2, r1
 8001fea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d014      	beq.n	800201e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f90c 	bl	8001210 <HAL_GetTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffc:	e009      	b.n	8002012 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7ff f907 	bl	8001210 <HAL_GetTick>
 8002002:	0002      	movs	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	4a79      	ldr	r2, [pc, #484]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e0e6      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002012:	4b75      	ldr	r3, [pc, #468]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8002014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002016:	2202      	movs	r2, #2
 8002018:	4013      	ands	r3, r2
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x42e>
 800201c:	e013      	b.n	8002046 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff f8f7 	bl	8001210 <HAL_GetTick>
 8002022:	0003      	movs	r3, r0
 8002024:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002026:	e009      	b.n	800203c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7ff f8f2 	bl	8001210 <HAL_GetTick>
 800202c:	0002      	movs	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	4a6f      	ldr	r2, [pc, #444]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e0d1      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800203c:	4b6a      	ldr	r3, [pc, #424]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 800203e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002040:	2202      	movs	r2, #2
 8002042:	4013      	ands	r3, r2
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002046:	231f      	movs	r3, #31
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002050:	4b65      	ldr	r3, [pc, #404]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8002052:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002054:	4b64      	ldr	r3, [pc, #400]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8002056:	4967      	ldr	r1, [pc, #412]	@ (80021f4 <HAL_RCC_OscConfig+0x624>)
 8002058:	400a      	ands	r2, r1
 800205a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d100      	bne.n	8002066 <HAL_RCC_OscConfig+0x496>
 8002064:	e0bb      	b.n	80021de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002066:	4b60      	ldr	r3, [pc, #384]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2238      	movs	r2, #56	@ 0x38
 800206c:	4013      	ands	r3, r2
 800206e:	2b10      	cmp	r3, #16
 8002070:	d100      	bne.n	8002074 <HAL_RCC_OscConfig+0x4a4>
 8002072:	e07b      	b.n	800216c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d156      	bne.n	800212a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207c:	4b5a      	ldr	r3, [pc, #360]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b59      	ldr	r3, [pc, #356]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8002082:	495d      	ldr	r1, [pc, #372]	@ (80021f8 <HAL_RCC_OscConfig+0x628>)
 8002084:	400a      	ands	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f8c2 	bl	8001210 <HAL_GetTick>
 800208c:	0003      	movs	r3, r0
 800208e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff f8bd 	bl	8001210 <HAL_GetTick>
 8002096:	0002      	movs	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e09d      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a4:	4b50      	ldr	r3, [pc, #320]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2380      	movs	r3, #128	@ 0x80
 80020aa:	049b      	lsls	r3, r3, #18
 80020ac:	4013      	ands	r3, r2
 80020ae:	d1f0      	bne.n	8002092 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b0:	4b4d      	ldr	r3, [pc, #308]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a51      	ldr	r2, [pc, #324]	@ (80021fc <HAL_RCC_OscConfig+0x62c>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1a      	ldr	r2, [r3, #32]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020dc:	431a      	orrs	r2, r3
 80020de:	4b42      	ldr	r3, [pc, #264]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 80020e0:	430a      	orrs	r2, r1
 80020e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e4:	4b40      	ldr	r3, [pc, #256]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b3f      	ldr	r3, [pc, #252]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 80020ea:	2180      	movs	r1, #128	@ 0x80
 80020ec:	0449      	lsls	r1, r1, #17
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80020f2:	4b3d      	ldr	r3, [pc, #244]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	4b3c      	ldr	r3, [pc, #240]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 80020f8:	2180      	movs	r1, #128	@ 0x80
 80020fa:	0549      	lsls	r1, r1, #21
 80020fc:	430a      	orrs	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7ff f886 	bl	8001210 <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210a:	f7ff f881 	bl	8001210 <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e061      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211c:	4b32      	ldr	r3, [pc, #200]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	@ 0x80
 8002122:	049b      	lsls	r3, r3, #18
 8002124:	4013      	ands	r3, r2
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x53a>
 8002128:	e059      	b.n	80021de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b2f      	ldr	r3, [pc, #188]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b2e      	ldr	r3, [pc, #184]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8002130:	4931      	ldr	r1, [pc, #196]	@ (80021f8 <HAL_RCC_OscConfig+0x628>)
 8002132:	400a      	ands	r2, r1
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7ff f86b 	bl	8001210 <HAL_GetTick>
 800213a:	0003      	movs	r3, r0
 800213c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002140:	f7ff f866 	bl	8001210 <HAL_GetTick>
 8002144:	0002      	movs	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e046      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002152:	4b25      	ldr	r3, [pc, #148]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	2380      	movs	r3, #128	@ 0x80
 8002158:	049b      	lsls	r3, r3, #18
 800215a:	4013      	ands	r3, r2
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800215e:	4b22      	ldr	r3, [pc, #136]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	4b21      	ldr	r3, [pc, #132]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 8002164:	4926      	ldr	r1, [pc, #152]	@ (8002200 <HAL_RCC_OscConfig+0x630>)
 8002166:	400a      	ands	r2, r1
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	e038      	b.n	80021de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e033      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002178:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <HAL_RCC_OscConfig+0x618>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2203      	movs	r2, #3
 8002182:	401a      	ands	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	429a      	cmp	r2, r3
 800218a:	d126      	bne.n	80021da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2270      	movs	r2, #112	@ 0x70
 8002190:	401a      	ands	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d11f      	bne.n	80021da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	23fe      	movs	r3, #254	@ 0xfe
 800219e:	01db      	lsls	r3, r3, #7
 80021a0:	401a      	ands	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d116      	bne.n	80021da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	23f8      	movs	r3, #248	@ 0xf8
 80021b0:	039b      	lsls	r3, r3, #14
 80021b2:	401a      	ands	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d10e      	bne.n	80021da <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	23e0      	movs	r3, #224	@ 0xe0
 80021c0:	051b      	lsls	r3, r3, #20
 80021c2:	401a      	ands	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	0f5b      	lsrs	r3, r3, #29
 80021d0:	075a      	lsls	r2, r3, #29
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b008      	add	sp, #32
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
 80021f0:	00001388 	.word	0x00001388
 80021f4:	efffffff 	.word	0xefffffff
 80021f8:	feffffff 	.word	0xfeffffff
 80021fc:	11c1808c 	.word	0x11c1808c
 8002200:	eefefffc 	.word	0xeefefffc

08002204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0e9      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002218:	4b76      	ldr	r3, [pc, #472]	@ (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2207      	movs	r2, #7
 800221e:	4013      	ands	r3, r2
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d91e      	bls.n	8002264 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b73      	ldr	r3, [pc, #460]	@ (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2207      	movs	r2, #7
 800222c:	4393      	bics	r3, r2
 800222e:	0019      	movs	r1, r3
 8002230:	4b70      	ldr	r3, [pc, #448]	@ (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002238:	f7fe ffea 	bl	8001210 <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002240:	e009      	b.n	8002256 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002242:	f7fe ffe5 	bl	8001210 <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	4a6a      	ldr	r2, [pc, #424]	@ (80023f8 <HAL_RCC_ClockConfig+0x1f4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e0ca      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002256:	4b67      	ldr	r3, [pc, #412]	@ (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2207      	movs	r2, #7
 800225c:	4013      	ands	r3, r2
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d1ee      	bne.n	8002242 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2202      	movs	r2, #2
 800226a:	4013      	ands	r3, r2
 800226c:	d015      	beq.n	800229a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2204      	movs	r2, #4
 8002274:	4013      	ands	r3, r2
 8002276:	d006      	beq.n	8002286 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002278:	4b60      	ldr	r3, [pc, #384]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	4b5f      	ldr	r3, [pc, #380]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 800227e:	21e0      	movs	r1, #224	@ 0xe0
 8002280:	01c9      	lsls	r1, r1, #7
 8002282:	430a      	orrs	r2, r1
 8002284:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002286:	4b5d      	ldr	r3, [pc, #372]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	4a5d      	ldr	r2, [pc, #372]	@ (8002400 <HAL_RCC_ClockConfig+0x1fc>)
 800228c:	4013      	ands	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	4b59      	ldr	r3, [pc, #356]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 8002296:	430a      	orrs	r2, r1
 8002298:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2201      	movs	r2, #1
 80022a0:	4013      	ands	r3, r2
 80022a2:	d057      	beq.n	8002354 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ac:	4b53      	ldr	r3, [pc, #332]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2380      	movs	r3, #128	@ 0x80
 80022b2:	029b      	lsls	r3, r3, #10
 80022b4:	4013      	ands	r3, r2
 80022b6:	d12b      	bne.n	8002310 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e097      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c4:	4b4d      	ldr	r3, [pc, #308]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	@ 0x80
 80022ca:	049b      	lsls	r3, r3, #18
 80022cc:	4013      	ands	r3, r2
 80022ce:	d11f      	bne.n	8002310 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e08b      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022dc:	4b47      	ldr	r3, [pc, #284]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4013      	ands	r3, r2
 80022e6:	d113      	bne.n	8002310 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e07f      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f4:	4b41      	ldr	r3, [pc, #260]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 80022f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f8:	2202      	movs	r2, #2
 80022fa:	4013      	ands	r3, r2
 80022fc:	d108      	bne.n	8002310 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e074      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002302:	4b3e      	ldr	r3, [pc, #248]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 8002304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002306:	2202      	movs	r2, #2
 8002308:	4013      	ands	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e06d      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002310:	4b3a      	ldr	r3, [pc, #232]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2207      	movs	r2, #7
 8002316:	4393      	bics	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4b37      	ldr	r3, [pc, #220]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 8002320:	430a      	orrs	r2, r1
 8002322:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002324:	f7fe ff74 	bl	8001210 <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232c:	e009      	b.n	8002342 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232e:	f7fe ff6f 	bl	8001210 <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	4a2f      	ldr	r2, [pc, #188]	@ (80023f8 <HAL_RCC_ClockConfig+0x1f4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e054      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	4b2e      	ldr	r3, [pc, #184]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2238      	movs	r2, #56	@ 0x38
 8002348:	401a      	ands	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	429a      	cmp	r2, r3
 8002352:	d1ec      	bne.n	800232e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002354:	4b27      	ldr	r3, [pc, #156]	@ (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2207      	movs	r2, #7
 800235a:	4013      	ands	r3, r2
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d21e      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b24      	ldr	r3, [pc, #144]	@ (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2207      	movs	r2, #7
 8002368:	4393      	bics	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	4b21      	ldr	r3, [pc, #132]	@ (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002374:	f7fe ff4c 	bl	8001210 <HAL_GetTick>
 8002378:	0003      	movs	r3, r0
 800237a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800237c:	e009      	b.n	8002392 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800237e:	f7fe ff47 	bl	8001210 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	4a1b      	ldr	r2, [pc, #108]	@ (80023f8 <HAL_RCC_ClockConfig+0x1f4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e02c      	b.n	80023ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002392:	4b18      	ldr	r3, [pc, #96]	@ (80023f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2207      	movs	r2, #7
 8002398:	4013      	ands	r3, r2
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d1ee      	bne.n	800237e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2204      	movs	r2, #4
 80023a6:	4013      	ands	r3, r2
 80023a8:	d009      	beq.n	80023be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023aa:	4b14      	ldr	r3, [pc, #80]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	4a15      	ldr	r2, [pc, #84]	@ (8002404 <HAL_RCC_ClockConfig+0x200>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	0019      	movs	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	4b10      	ldr	r3, [pc, #64]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 80023ba:	430a      	orrs	r2, r1
 80023bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80023be:	f000 f829 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80023c2:	0001      	movs	r1, r0
 80023c4:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <HAL_RCC_ClockConfig+0x1f8>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	220f      	movs	r2, #15
 80023cc:	401a      	ands	r2, r3
 80023ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002408 <HAL_RCC_ClockConfig+0x204>)
 80023d0:	0092      	lsls	r2, r2, #2
 80023d2:	58d3      	ldr	r3, [r2, r3]
 80023d4:	221f      	movs	r2, #31
 80023d6:	4013      	ands	r3, r2
 80023d8:	000a      	movs	r2, r1
 80023da:	40da      	lsrs	r2, r3
 80023dc:	4b0b      	ldr	r3, [pc, #44]	@ (800240c <HAL_RCC_ClockConfig+0x208>)
 80023de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <HAL_RCC_ClockConfig+0x20c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7fe feb7 	bl	8001158 <HAL_InitTick>
 80023ea:	0003      	movs	r3, r0
}
 80023ec:	0018      	movs	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b004      	add	sp, #16
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40022000 	.word	0x40022000
 80023f8:	00001388 	.word	0x00001388
 80023fc:	40021000 	.word	0x40021000
 8002400:	fffff0ff 	.word	0xfffff0ff
 8002404:	ffff8fff 	.word	0xffff8fff
 8002408:	08006550 	.word	0x08006550
 800240c:	20000000 	.word	0x20000000
 8002410:	20000004 	.word	0x20000004

08002414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800241a:	4b3c      	ldr	r3, [pc, #240]	@ (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2238      	movs	r2, #56	@ 0x38
 8002420:	4013      	ands	r3, r2
 8002422:	d10f      	bne.n	8002444 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002424:	4b39      	ldr	r3, [pc, #228]	@ (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0adb      	lsrs	r3, r3, #11
 800242a:	2207      	movs	r2, #7
 800242c:	4013      	ands	r3, r2
 800242e:	2201      	movs	r2, #1
 8002430:	409a      	lsls	r2, r3
 8002432:	0013      	movs	r3, r2
 8002434:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002436:	6839      	ldr	r1, [r7, #0]
 8002438:	4835      	ldr	r0, [pc, #212]	@ (8002510 <HAL_RCC_GetSysClockFreq+0xfc>)
 800243a:	f7fd fe6f 	bl	800011c <__udivsi3>
 800243e:	0003      	movs	r3, r0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e05d      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002444:	4b31      	ldr	r3, [pc, #196]	@ (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2238      	movs	r2, #56	@ 0x38
 800244a:	4013      	ands	r3, r2
 800244c:	2b08      	cmp	r3, #8
 800244e:	d102      	bne.n	8002456 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002450:	4b30      	ldr	r3, [pc, #192]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x100>)
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e054      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002456:	4b2d      	ldr	r3, [pc, #180]	@ (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2238      	movs	r2, #56	@ 0x38
 800245c:	4013      	ands	r3, r2
 800245e:	2b10      	cmp	r3, #16
 8002460:	d138      	bne.n	80024d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002462:	4b2a      	ldr	r3, [pc, #168]	@ (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2203      	movs	r2, #3
 8002468:	4013      	ands	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800246c:	4b27      	ldr	r3, [pc, #156]	@ (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	2207      	movs	r2, #7
 8002474:	4013      	ands	r3, r2
 8002476:	3301      	adds	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d10d      	bne.n	800249c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	4824      	ldr	r0, [pc, #144]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x100>)
 8002484:	f7fd fe4a 	bl	800011c <__udivsi3>
 8002488:	0003      	movs	r3, r0
 800248a:	0019      	movs	r1, r3
 800248c:	4b1f      	ldr	r3, [pc, #124]	@ (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	227f      	movs	r2, #127	@ 0x7f
 8002494:	4013      	ands	r3, r2
 8002496:	434b      	muls	r3, r1
 8002498:	617b      	str	r3, [r7, #20]
        break;
 800249a:	e00d      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	481c      	ldr	r0, [pc, #112]	@ (8002510 <HAL_RCC_GetSysClockFreq+0xfc>)
 80024a0:	f7fd fe3c 	bl	800011c <__udivsi3>
 80024a4:	0003      	movs	r3, r0
 80024a6:	0019      	movs	r1, r3
 80024a8:	4b18      	ldr	r3, [pc, #96]	@ (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	227f      	movs	r2, #127	@ 0x7f
 80024b0:	4013      	ands	r3, r2
 80024b2:	434b      	muls	r3, r1
 80024b4:	617b      	str	r3, [r7, #20]
        break;
 80024b6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80024b8:	4b14      	ldr	r3, [pc, #80]	@ (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0f5b      	lsrs	r3, r3, #29
 80024be:	2207      	movs	r2, #7
 80024c0:	4013      	ands	r3, r2
 80024c2:	3301      	adds	r3, #1
 80024c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	6978      	ldr	r0, [r7, #20]
 80024ca:	f7fd fe27 	bl	800011c <__udivsi3>
 80024ce:	0003      	movs	r3, r0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	e015      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2238      	movs	r2, #56	@ 0x38
 80024da:	4013      	ands	r3, r2
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d103      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80024e0:	2380      	movs	r3, #128	@ 0x80
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024e8:	4b08      	ldr	r3, [pc, #32]	@ (800250c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2238      	movs	r2, #56	@ 0x38
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b18      	cmp	r3, #24
 80024f2:	d103      	bne.n	80024fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80024f4:	23fa      	movs	r3, #250	@ 0xfa
 80024f6:	01db      	lsls	r3, r3, #7
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	e001      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002500:	693b      	ldr	r3, [r7, #16]
}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b006      	add	sp, #24
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	40021000 	.word	0x40021000
 8002510:	00f42400 	.word	0x00f42400
 8002514:	007a1200 	.word	0x007a1200

08002518 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0a8      	b.n	800267c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	2382      	movs	r3, #130	@ 0x82
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	429a      	cmp	r2, r3
 800253c:	d009      	beq.n	8002552 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	61da      	str	r2, [r3, #28]
 8002544:	e005      	b.n	8002552 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	225d      	movs	r2, #93	@ 0x5d
 800255c:	5c9b      	ldrb	r3, [r3, r2]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d107      	bne.n	8002574 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	225c      	movs	r2, #92	@ 0x5c
 8002568:	2100      	movs	r1, #0
 800256a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	0018      	movs	r0, r3
 8002570:	f7fe fc36 	bl	8000de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	225d      	movs	r2, #93	@ 0x5d
 8002578:	2102      	movs	r1, #2
 800257a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2140      	movs	r1, #64	@ 0x40
 8002588:	438a      	bics	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	23e0      	movs	r3, #224	@ 0xe0
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	429a      	cmp	r2, r3
 8002596:	d902      	bls.n	800259e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e002      	b.n	80025a4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800259e:	2380      	movs	r3, #128	@ 0x80
 80025a0:	015b      	lsls	r3, r3, #5
 80025a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	23f0      	movs	r3, #240	@ 0xf0
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d008      	beq.n	80025c2 <HAL_SPI_Init+0xaa>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	23e0      	movs	r3, #224	@ 0xe0
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d002      	beq.n	80025c2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	2382      	movs	r3, #130	@ 0x82
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	401a      	ands	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6899      	ldr	r1, [r3, #8]
 80025d0:	2384      	movs	r3, #132	@ 0x84
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	400b      	ands	r3, r1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2102      	movs	r1, #2
 80025de:	400b      	ands	r3, r1
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2101      	movs	r1, #1
 80025e8:	400b      	ands	r3, r1
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6999      	ldr	r1, [r3, #24]
 80025f0:	2380      	movs	r3, #128	@ 0x80
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	400b      	ands	r3, r1
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	2138      	movs	r1, #56	@ 0x38
 80025fe:	400b      	ands	r3, r1
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	2180      	movs	r1, #128	@ 0x80
 8002608:	400b      	ands	r3, r1
 800260a:	431a      	orrs	r2, r3
 800260c:	0011      	movs	r1, r2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002612:	2380      	movs	r3, #128	@ 0x80
 8002614:	019b      	lsls	r3, r3, #6
 8002616:	401a      	ands	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	2204      	movs	r2, #4
 8002628:	401a      	ands	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	2110      	movs	r1, #16
 8002630:	400b      	ands	r3, r1
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002638:	2108      	movs	r1, #8
 800263a:	400b      	ands	r3, r1
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68d9      	ldr	r1, [r3, #12]
 8002642:	23f0      	movs	r3, #240	@ 0xf0
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	400b      	ands	r3, r1
 8002648:	431a      	orrs	r2, r3
 800264a:	0011      	movs	r1, r2
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	2380      	movs	r3, #128	@ 0x80
 8002650:	015b      	lsls	r3, r3, #5
 8002652:	401a      	ands	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4907      	ldr	r1, [pc, #28]	@ (8002684 <HAL_SPI_Init+0x16c>)
 8002668:	400a      	ands	r2, r1
 800266a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	225d      	movs	r2, #93	@ 0x5d
 8002676:	2101      	movs	r1, #1
 8002678:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b004      	add	sp, #16
 8002682:	bd80      	pop	{r7, pc}
 8002684:	fffff7ff 	.word	0xfffff7ff

08002688 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	1dbb      	adds	r3, r7, #6
 8002696:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002698:	231f      	movs	r3, #31
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	225c      	movs	r2, #92	@ 0x5c
 80026a4:	5c9b      	ldrb	r3, [r3, r2]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_SPI_Transmit+0x26>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e147      	b.n	800293e <HAL_SPI_Transmit+0x2b6>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	225c      	movs	r2, #92	@ 0x5c
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026b6:	f7fe fdab 	bl	8001210 <HAL_GetTick>
 80026ba:	0003      	movs	r3, r0
 80026bc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80026be:	2316      	movs	r3, #22
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	1dba      	adds	r2, r7, #6
 80026c4:	8812      	ldrh	r2, [r2, #0]
 80026c6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	225d      	movs	r2, #93	@ 0x5d
 80026cc:	5c9b      	ldrb	r3, [r3, r2]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d004      	beq.n	80026de <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80026d4:	231f      	movs	r3, #31
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	2202      	movs	r2, #2
 80026da:	701a      	strb	r2, [r3, #0]
    goto error;
 80026dc:	e128      	b.n	8002930 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_SPI_Transmit+0x64>
 80026e4:	1dbb      	adds	r3, r7, #6
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d104      	bne.n	80026f6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80026ec:	231f      	movs	r3, #31
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80026f4:	e11c      	b.n	8002930 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	225d      	movs	r2, #93	@ 0x5d
 80026fa:	2103      	movs	r1, #3
 80026fc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1dba      	adds	r2, r7, #6
 800270e:	8812      	ldrh	r2, [r2, #0]
 8002710:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1dba      	adds	r2, r7, #6
 8002716:	8812      	ldrh	r2, [r2, #0]
 8002718:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2244      	movs	r2, #68	@ 0x44
 8002724:	2100      	movs	r1, #0
 8002726:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2246      	movs	r2, #70	@ 0x46
 800272c:	2100      	movs	r1, #0
 800272e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	2380      	movs	r3, #128	@ 0x80
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	429a      	cmp	r2, r3
 8002746:	d110      	bne.n	800276a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2140      	movs	r1, #64	@ 0x40
 8002754:	438a      	bics	r2, r1
 8002756:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2180      	movs	r1, #128	@ 0x80
 8002764:	01c9      	lsls	r1, r1, #7
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2240      	movs	r2, #64	@ 0x40
 8002772:	4013      	ands	r3, r2
 8002774:	2b40      	cmp	r3, #64	@ 0x40
 8002776:	d007      	beq.n	8002788 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2140      	movs	r1, #64	@ 0x40
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	23e0      	movs	r3, #224	@ 0xe0
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	429a      	cmp	r2, r3
 8002792:	d952      	bls.n	800283a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <HAL_SPI_Transmit+0x11e>
 800279c:	2316      	movs	r3, #22
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d143      	bne.n	800282e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027aa:	881a      	ldrh	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b6:	1c9a      	adds	r2, r3, #2
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027ca:	e030      	b.n	800282e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2202      	movs	r2, #2
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d112      	bne.n	8002800 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027de:	881a      	ldrh	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ea:	1c9a      	adds	r2, r3, #2
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027fe:	e016      	b.n	800282e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002800:	f7fe fd06 	bl	8001210 <HAL_GetTick>
 8002804:	0002      	movs	r2, r0
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d802      	bhi.n	8002816 <HAL_SPI_Transmit+0x18e>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	3301      	adds	r3, #1
 8002814:	d102      	bne.n	800281c <HAL_SPI_Transmit+0x194>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d108      	bne.n	800282e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800281c:	231f      	movs	r3, #31
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	2203      	movs	r2, #3
 8002822:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	225d      	movs	r2, #93	@ 0x5d
 8002828:	2101      	movs	r1, #1
 800282a:	5499      	strb	r1, [r3, r2]
          goto error;
 800282c:	e080      	b.n	8002930 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1c9      	bne.n	80027cc <HAL_SPI_Transmit+0x144>
 8002838:	e053      	b.n	80028e2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d004      	beq.n	800284c <HAL_SPI_Transmit+0x1c4>
 8002842:	2316      	movs	r3, #22
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d145      	bne.n	80028d8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	330c      	adds	r3, #12
 8002856:	7812      	ldrb	r2, [r2, #0]
 8002858:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002872:	e031      	b.n	80028d8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2202      	movs	r2, #2
 800287c:	4013      	ands	r3, r2
 800287e:	2b02      	cmp	r3, #2
 8002880:	d113      	bne.n	80028aa <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	330c      	adds	r3, #12
 800288c:	7812      	ldrb	r2, [r2, #0]
 800288e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80028a8:	e016      	b.n	80028d8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028aa:	f7fe fcb1 	bl	8001210 <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d802      	bhi.n	80028c0 <HAL_SPI_Transmit+0x238>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	3301      	adds	r3, #1
 80028be:	d102      	bne.n	80028c6 <HAL_SPI_Transmit+0x23e>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d108      	bne.n	80028d8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80028c6:	231f      	movs	r3, #31
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	2203      	movs	r2, #3
 80028cc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	225d      	movs	r2, #93	@ 0x5d
 80028d2:	2101      	movs	r1, #1
 80028d4:	5499      	strb	r1, [r3, r2]
          goto error;
 80028d6:	e02b      	b.n	8002930 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1c8      	bne.n	8002874 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	6839      	ldr	r1, [r7, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f000 fa65 	bl	8002db8 <SPI_EndRxTxTransaction>
 80028ee:	1e03      	subs	r3, r0, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2220      	movs	r2, #32
 80028f6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800291e:	231f      	movs	r3, #31
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e003      	b.n	8002930 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	225d      	movs	r2, #93	@ 0x5d
 800292c:	2101      	movs	r1, #1
 800292e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	225c      	movs	r2, #92	@ 0x5c
 8002934:	2100      	movs	r1, #0
 8002936:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002938:	231f      	movs	r3, #31
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	781b      	ldrb	r3, [r3, #0]
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	b008      	add	sp, #32
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2240      	movs	r2, #64	@ 0x40
 8002964:	4013      	ands	r3, r2
 8002966:	d10d      	bne.n	8002984 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2201      	movs	r2, #1
 800296c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800296e:	d009      	beq.n	8002984 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2240      	movs	r2, #64	@ 0x40
 8002974:	4013      	ands	r3, r2
 8002976:	d005      	beq.n	8002984 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	0010      	movs	r0, r2
 8002980:	4798      	blx	r3
    return;
 8002982:	e0c5      	b.n	8002b10 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	2202      	movs	r2, #2
 8002988:	4013      	ands	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_SPI_IRQHandler+0x58>
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2280      	movs	r2, #128	@ 0x80
 8002990:	4013      	ands	r3, r2
 8002992:	d005      	beq.n	80029a0 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	0010      	movs	r0, r2
 800299c:	4798      	blx	r3
    return;
 800299e:	e0b7      	b.n	8002b10 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2220      	movs	r2, #32
 80029a4:	4013      	ands	r3, r2
 80029a6:	d109      	bne.n	80029bc <HAL_SPI_IRQHandler+0x74>
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2240      	movs	r2, #64	@ 0x40
 80029ac:	4013      	ands	r3, r2
 80029ae:	d105      	bne.n	80029bc <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4013      	ands	r3, r2
 80029b8:	d100      	bne.n	80029bc <HAL_SPI_IRQHandler+0x74>
 80029ba:	e0a9      	b.n	8002b10 <HAL_SPI_IRQHandler+0x1c8>
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2220      	movs	r2, #32
 80029c0:	4013      	ands	r3, r2
 80029c2:	d100      	bne.n	80029c6 <HAL_SPI_IRQHandler+0x7e>
 80029c4:	e0a4      	b.n	8002b10 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2240      	movs	r2, #64	@ 0x40
 80029ca:	4013      	ands	r3, r2
 80029cc:	d023      	beq.n	8002a16 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	225d      	movs	r2, #93	@ 0x5d
 80029d2:	5c9b      	ldrb	r3, [r3, r2]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d011      	beq.n	80029fe <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029de:	2204      	movs	r2, #4
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	e00b      	b.n	8002a16 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
        return;
 8002a14:	e07c      	b.n	8002b10 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d014      	beq.n	8002a48 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a22:	2201      	movs	r2, #1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2140      	movs	r1, #64	@ 0x40
 8002a42:	438a      	bics	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d00c      	beq.n	8002a6c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a56:	2208      	movs	r2, #8
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d04c      	beq.n	8002b0e <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	21e0      	movs	r1, #224	@ 0xe0
 8002a80:	438a      	bics	r2, r1
 8002a82:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	225d      	movs	r2, #93	@ 0x5d
 8002a88:	2101      	movs	r1, #1
 8002a8a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	4013      	ands	r3, r2
 8002a92:	d103      	bne.n	8002a9c <HAL_SPI_IRQHandler+0x154>
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2201      	movs	r2, #1
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d032      	beq.n	8002b02 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2103      	movs	r1, #3
 8002aa8:	438a      	bics	r2, r1
 8002aaa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d010      	beq.n	8002ad6 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab8:	4a17      	ldr	r2, [pc, #92]	@ (8002b18 <HAL_SPI_IRQHandler+0x1d0>)
 8002aba:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f7fe fd3b 	bl	800153c <HAL_DMA_Abort_IT>
 8002ac6:	1e03      	subs	r3, r0, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ace:	2240      	movs	r2, #64	@ 0x40
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d016      	beq.n	8002b0c <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae2:	4a0d      	ldr	r2, [pc, #52]	@ (8002b18 <HAL_SPI_IRQHandler+0x1d0>)
 8002ae4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aea:	0018      	movs	r0, r3
 8002aec:	f7fe fd26 	bl	800153c <HAL_DMA_Abort_IT>
 8002af0:	1e03      	subs	r3, r0, #0
 8002af2:	d00b      	beq.n	8002b0c <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af8:	2240      	movs	r2, #64	@ 0x40
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002b00:	e004      	b.n	8002b0c <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f000 f809 	bl	8002b1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002b0a:	e000      	b.n	8002b0e <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8002b0c:	46c0      	nop			@ (mov r8, r8)
    return;
 8002b0e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b008      	add	sp, #32
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	08002b2d 	.word	0x08002b2d

08002b1c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b24:	46c0      	nop			@ (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2246      	movs	r2, #70	@ 0x46
 8002b3e:	2100      	movs	r1, #0
 8002b40:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7ff ffe6 	bl	8002b1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b50:	46c0      	nop			@ (mov r8, r8)
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b004      	add	sp, #16
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	1dfb      	adds	r3, r7, #7
 8002b66:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b68:	f7fe fb52 	bl	8001210 <HAL_GetTick>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	18d3      	adds	r3, r2, r3
 8002b76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b78:	f7fe fb4a 	bl	8001210 <HAL_GetTick>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b80:	4b3a      	ldr	r3, [pc, #232]	@ (8002c6c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	015b      	lsls	r3, r3, #5
 8002b86:	0d1b      	lsrs	r3, r3, #20
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	4353      	muls	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b8e:	e058      	b.n	8002c42 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	3301      	adds	r3, #1
 8002b94:	d055      	beq.n	8002c42 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b96:	f7fe fb3b 	bl	8001210 <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d902      	bls.n	8002bac <SPI_WaitFlagStateUntilTimeout+0x54>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d142      	bne.n	8002c32 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	21e0      	movs	r1, #224	@ 0xe0
 8002bb8:	438a      	bics	r2, r1
 8002bba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	2382      	movs	r3, #130	@ 0x82
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d113      	bne.n	8002bf0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	2380      	movs	r3, #128	@ 0x80
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d005      	beq.n	8002be0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	2380      	movs	r3, #128	@ 0x80
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d107      	bne.n	8002bf0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2140      	movs	r1, #64	@ 0x40
 8002bec:	438a      	bics	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bf4:	2380      	movs	r3, #128	@ 0x80
 8002bf6:	019b      	lsls	r3, r3, #6
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d110      	bne.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	491a      	ldr	r1, [pc, #104]	@ (8002c70 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2180      	movs	r1, #128	@ 0x80
 8002c18:	0189      	lsls	r1, r1, #6
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	225d      	movs	r2, #93	@ 0x5d
 8002c22:	2101      	movs	r1, #1
 8002c24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	225c      	movs	r2, #92	@ 0x5c
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e017      	b.n	8002c62 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	425a      	negs	r2, r3
 8002c52:	4153      	adcs	r3, r2
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	001a      	movs	r2, r3
 8002c58:	1dfb      	adds	r3, r7, #7
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d197      	bne.n	8002b90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	0018      	movs	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b008      	add	sp, #32
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	ffffdfff 	.word	0xffffdfff

08002c74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	@ 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002c82:	2317      	movs	r3, #23
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c8a:	f7fe fac1 	bl	8001210 <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	18d3      	adds	r3, r2, r3
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002c9a:	f7fe fab9 	bl	8001210 <HAL_GetTick>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	330c      	adds	r3, #12
 8002ca8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002caa:	4b41      	ldr	r3, [pc, #260]	@ (8002db0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	0013      	movs	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	189b      	adds	r3, r3, r2
 8002cb4:	00da      	lsls	r2, r3, #3
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	0d1b      	lsrs	r3, r3, #20
 8002cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cbc:	4353      	muls	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002cc0:	e068      	b.n	8002d94 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	23c0      	movs	r3, #192	@ 0xc0
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d10a      	bne.n	8002ce2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d107      	bne.n	8002ce2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	2117      	movs	r1, #23
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002cde:	187b      	adds	r3, r7, r1
 8002ce0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	d055      	beq.n	8002d94 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ce8:	f7fe fa92 	bl	8001210 <HAL_GetTick>
 8002cec:	0002      	movs	r2, r0
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d902      	bls.n	8002cfe <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d142      	bne.n	8002d84 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	21e0      	movs	r1, #224	@ 0xe0
 8002d0a:	438a      	bics	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	2382      	movs	r3, #130	@ 0x82
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d113      	bne.n	8002d42 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	2380      	movs	r3, #128	@ 0x80
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d005      	beq.n	8002d32 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	2380      	movs	r3, #128	@ 0x80
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d107      	bne.n	8002d42 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2140      	movs	r1, #64	@ 0x40
 8002d3e:	438a      	bics	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d46:	2380      	movs	r3, #128	@ 0x80
 8002d48:	019b      	lsls	r3, r3, #6
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d110      	bne.n	8002d70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4916      	ldr	r1, [pc, #88]	@ (8002db4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2180      	movs	r1, #128	@ 0x80
 8002d6a:	0189      	lsls	r1, r1, #6
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	225d      	movs	r2, #93	@ 0x5d
 8002d74:	2101      	movs	r1, #1
 8002d76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	225c      	movs	r2, #92	@ 0x5c
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e010      	b.n	8002da6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d18e      	bne.n	8002cc2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b00a      	add	sp, #40	@ 0x28
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	20000000 	.word	0x20000000
 8002db4:	ffffdfff 	.word	0xffffdfff

08002db8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	23c0      	movs	r3, #192	@ 0xc0
 8002dc8:	0159      	lsls	r1, r3, #5
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	0013      	movs	r3, r2
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f7ff ff4e 	bl	8002c74 <SPI_WaitFifoStateUntilTimeout>
 8002dd8:	1e03      	subs	r3, r0, #0
 8002dda:	d007      	beq.n	8002dec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de0:	2220      	movs	r2, #32
 8002de2:	431a      	orrs	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e027      	b.n	8002e3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	0013      	movs	r3, r2
 8002df6:	2200      	movs	r2, #0
 8002df8:	2180      	movs	r1, #128	@ 0x80
 8002dfa:	f7ff fead 	bl	8002b58 <SPI_WaitFlagStateUntilTimeout>
 8002dfe:	1e03      	subs	r3, r0, #0
 8002e00:	d007      	beq.n	8002e12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e06:	2220      	movs	r2, #32
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e014      	b.n	8002e3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	23c0      	movs	r3, #192	@ 0xc0
 8002e16:	00d9      	lsls	r1, r3, #3
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	0013      	movs	r3, r2
 8002e20:	2200      	movs	r2, #0
 8002e22:	f7ff ff27 	bl	8002c74 <SPI_WaitFifoStateUntilTimeout>
 8002e26:	1e03      	subs	r3, r0, #0
 8002e28:	d007      	beq.n	8002e3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2e:	2220      	movs	r2, #32
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e000      	b.n	8002e3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b004      	add	sp, #16
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <__NVIC_SetPriority>:
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	1dfb      	adds	r3, r7, #7
 8002e50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e52:	1dfb      	adds	r3, r7, #7
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e58:	d828      	bhi.n	8002eac <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f18 <__NVIC_SetPriority+0xd4>)
 8002e5c:	1dfb      	adds	r3, r7, #7
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b25b      	sxtb	r3, r3
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	33c0      	adds	r3, #192	@ 0xc0
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	589b      	ldr	r3, [r3, r2]
 8002e6a:	1dfa      	adds	r2, r7, #7
 8002e6c:	7812      	ldrb	r2, [r2, #0]
 8002e6e:	0011      	movs	r1, r2
 8002e70:	2203      	movs	r2, #3
 8002e72:	400a      	ands	r2, r1
 8002e74:	00d2      	lsls	r2, r2, #3
 8002e76:	21ff      	movs	r1, #255	@ 0xff
 8002e78:	4091      	lsls	r1, r2
 8002e7a:	000a      	movs	r2, r1
 8002e7c:	43d2      	mvns	r2, r2
 8002e7e:	401a      	ands	r2, r3
 8002e80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	019b      	lsls	r3, r3, #6
 8002e86:	22ff      	movs	r2, #255	@ 0xff
 8002e88:	401a      	ands	r2, r3
 8002e8a:	1dfb      	adds	r3, r7, #7
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	0018      	movs	r0, r3
 8002e90:	2303      	movs	r3, #3
 8002e92:	4003      	ands	r3, r0
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e98:	481f      	ldr	r0, [pc, #124]	@ (8002f18 <__NVIC_SetPriority+0xd4>)
 8002e9a:	1dfb      	adds	r3, r7, #7
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	b25b      	sxtb	r3, r3
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	33c0      	adds	r3, #192	@ 0xc0
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	501a      	str	r2, [r3, r0]
}
 8002eaa:	e031      	b.n	8002f10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eac:	4a1b      	ldr	r2, [pc, #108]	@ (8002f1c <__NVIC_SetPriority+0xd8>)
 8002eae:	1dfb      	adds	r3, r7, #7
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	230f      	movs	r3, #15
 8002eb6:	400b      	ands	r3, r1
 8002eb8:	3b08      	subs	r3, #8
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	3306      	adds	r3, #6
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	18d3      	adds	r3, r2, r3
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	1dfa      	adds	r2, r7, #7
 8002ec8:	7812      	ldrb	r2, [r2, #0]
 8002eca:	0011      	movs	r1, r2
 8002ecc:	2203      	movs	r2, #3
 8002ece:	400a      	ands	r2, r1
 8002ed0:	00d2      	lsls	r2, r2, #3
 8002ed2:	21ff      	movs	r1, #255	@ 0xff
 8002ed4:	4091      	lsls	r1, r2
 8002ed6:	000a      	movs	r2, r1
 8002ed8:	43d2      	mvns	r2, r2
 8002eda:	401a      	ands	r2, r3
 8002edc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	019b      	lsls	r3, r3, #6
 8002ee2:	22ff      	movs	r2, #255	@ 0xff
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	1dfb      	adds	r3, r7, #7
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	0018      	movs	r0, r3
 8002eec:	2303      	movs	r3, #3
 8002eee:	4003      	ands	r3, r0
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ef4:	4809      	ldr	r0, [pc, #36]	@ (8002f1c <__NVIC_SetPriority+0xd8>)
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	001c      	movs	r4, r3
 8002efc:	230f      	movs	r3, #15
 8002efe:	4023      	ands	r3, r4
 8002f00:	3b08      	subs	r3, #8
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	430a      	orrs	r2, r1
 8002f06:	3306      	adds	r3, #6
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	18c3      	adds	r3, r0, r3
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	601a      	str	r2, [r3, #0]
}
 8002f10:	46c0      	nop			@ (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b003      	add	sp, #12
 8002f16:	bd90      	pop	{r4, r7, pc}
 8002f18:	e000e100 	.word	0xe000e100
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002f24:	2305      	movs	r3, #5
 8002f26:	425b      	negs	r3, r3
 8002f28:	2100      	movs	r1, #0
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f7ff ff8a 	bl	8002e44 <__NVIC_SetPriority>
#endif
}
 8002f30:	46c0      	nop			@ (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f3e:	f3ef 8305 	mrs	r3, IPSR
 8002f42:	603b      	str	r3, [r7, #0]
  return(result);
 8002f44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002f4a:	2306      	movs	r3, #6
 8002f4c:	425b      	negs	r3, r3
 8002f4e:	607b      	str	r3, [r7, #4]
 8002f50:	e00c      	b.n	8002f6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f52:	4b09      	ldr	r3, [pc, #36]	@ (8002f78 <osKernelInitialize+0x40>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d105      	bne.n	8002f66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002f5a:	4b07      	ldr	r3, [pc, #28]	@ (8002f78 <osKernelInitialize+0x40>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	e002      	b.n	8002f6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002f66:	2301      	movs	r3, #1
 8002f68:	425b      	negs	r3, r3
 8002f6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f6c:	687b      	ldr	r3, [r7, #4]
}
 8002f6e:	0018      	movs	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b002      	add	sp, #8
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	20000174 	.word	0x20000174

08002f7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f82:	f3ef 8305 	mrs	r3, IPSR
 8002f86:	603b      	str	r3, [r7, #0]
  return(result);
 8002f88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002f8e:	2306      	movs	r3, #6
 8002f90:	425b      	negs	r3, r3
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	e010      	b.n	8002fb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f96:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <osKernelStart+0x48>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d109      	bne.n	8002fb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002f9e:	f7ff ffbf 	bl	8002f20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002fa2:	4b08      	ldr	r3, [pc, #32]	@ (8002fc4 <osKernelStart+0x48>)
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002fa8:	f000 ff3e 	bl	8003e28 <vTaskStartScheduler>
      stat = osOK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	e002      	b.n	8002fb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	425b      	negs	r3, r3
 8002fb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002fb8:	687b      	ldr	r3, [r7, #4]
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	20000174 	.word	0x20000174

08002fc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002fc8:	b5b0      	push	{r4, r5, r7, lr}
 8002fca:	b08e      	sub	sp, #56	@ 0x38
 8002fcc:	af04      	add	r7, sp, #16
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fd8:	f3ef 8305 	mrs	r3, IPSR
 8002fdc:	617b      	str	r3, [r7, #20]
  return(result);
 8002fde:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d000      	beq.n	8002fe6 <osThreadNew+0x1e>
 8002fe4:	e081      	b.n	80030ea <osThreadNew+0x122>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d100      	bne.n	8002fee <osThreadNew+0x26>
 8002fec:	e07d      	b.n	80030ea <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8002fee:	2380      	movs	r3, #128	@ 0x80
 8002ff0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002ff2:	2318      	movs	r3, #24
 8002ff4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	425b      	negs	r3, r3
 8002ffe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d044      	beq.n	8003090 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <osThreadNew+0x4c>
        name = attr->name;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <osThreadNew+0x70>
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b38      	cmp	r3, #56	@ 0x38
 800302c:	d804      	bhi.n	8003038 <osThreadNew+0x70>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	4013      	ands	r3, r2
 8003036:	d001      	beq.n	800303c <osThreadNew+0x74>
        return (NULL);
 8003038:	2300      	movs	r3, #0
 800303a:	e057      	b.n	80030ec <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00e      	beq.n	8003072 <osThreadNew+0xaa>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b5b      	cmp	r3, #91	@ 0x5b
 800305a:	d90a      	bls.n	8003072 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003060:	2b00      	cmp	r3, #0
 8003062:	d006      	beq.n	8003072 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <osThreadNew+0xaa>
        mem = 1;
 800306c:	2301      	movs	r3, #1
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	e010      	b.n	8003094 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10c      	bne.n	8003094 <osThreadNew+0xcc>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <osThreadNew+0xcc>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <osThreadNew+0xcc>
          mem = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	e001      	b.n	8003094 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d112      	bne.n	80030c0 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80030a2:	68bd      	ldr	r5, [r7, #8]
 80030a4:	6a3c      	ldr	r4, [r7, #32]
 80030a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	9302      	str	r3, [sp, #8]
 80030ac:	9201      	str	r2, [sp, #4]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	002b      	movs	r3, r5
 80030b4:	0022      	movs	r2, r4
 80030b6:	f000 fd32 	bl	8003b1e <xTaskCreateStatic>
 80030ba:	0003      	movs	r3, r0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	e014      	b.n	80030ea <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d111      	bne.n	80030ea <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68bc      	ldr	r4, [r7, #8]
 80030cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	2310      	movs	r3, #16
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	0023      	movs	r3, r4
 80030dc:	f000 fd66 	bl	8003bac <xTaskCreate>
 80030e0:	0003      	movs	r3, r0
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d001      	beq.n	80030ea <osThreadNew+0x122>
            hTask = NULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80030ea:	693b      	ldr	r3, [r7, #16]
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b00a      	add	sp, #40	@ 0x28
 80030f2:	bdb0      	pop	{r4, r5, r7, pc}

080030f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a06      	ldr	r2, [pc, #24]	@ (800311c <vApplicationGetIdleTaskMemory+0x28>)
 8003104:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4a05      	ldr	r2, [pc, #20]	@ (8003120 <vApplicationGetIdleTaskMemory+0x2c>)
 800310a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2280      	movs	r2, #128	@ 0x80
 8003110:	601a      	str	r2, [r3, #0]
}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	b004      	add	sp, #16
 8003118:	bd80      	pop	{r7, pc}
 800311a:	46c0      	nop			@ (mov r8, r8)
 800311c:	20000178 	.word	0x20000178
 8003120:	200001d4 	.word	0x200001d4

08003124 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4a06      	ldr	r2, [pc, #24]	@ (800314c <vApplicationGetTimerTaskMemory+0x28>)
 8003134:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	4a05      	ldr	r2, [pc, #20]	@ (8003150 <vApplicationGetTimerTaskMemory+0x2c>)
 800313a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2280      	movs	r2, #128	@ 0x80
 8003140:	0052      	lsls	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
}
 8003144:	46c0      	nop			@ (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b004      	add	sp, #16
 800314a:	bd80      	pop	{r7, pc}
 800314c:	200003d4 	.word	0x200003d4
 8003150:	20000430 	.word	0x20000430

08003154 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3308      	adds	r3, #8
 8003160:	001a      	movs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	4252      	negs	r2, r2
 800316c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3308      	adds	r3, #8
 8003172:	001a      	movs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3308      	adds	r3, #8
 800317c:	001a      	movs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003188:	46c0      	nop			@ (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b002      	add	sp, #8
 800318e:	bd80      	pop	{r7, pc}

08003190 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800319e:	46c0      	nop			@ (mov r8, r8)
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b002      	add	sp, #8
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	601a      	str	r2, [r3, #0]
}
 80031e2:	46c0      	nop			@ (mov r8, r8)
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b004      	add	sp, #16
 80031e8:	bd80      	pop	{r7, pc}

080031ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	3301      	adds	r3, #1
 80031fe:	d103      	bne.n	8003208 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	e00c      	b.n	8003222 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3308      	adds	r3, #8
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	e002      	b.n	8003216 <vListInsert+0x2c>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	429a      	cmp	r2, r3
 8003220:	d2f6      	bcs.n	8003210 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b004      	add	sp, #16
 8003254:	bd80      	pop	{r7, pc}

08003256 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6892      	ldr	r2, [r2, #8]
 800326c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6852      	ldr	r2, [r2, #4]
 8003276:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	429a      	cmp	r2, r3
 8003280:	d103      	bne.n	800328a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	1e5a      	subs	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
}
 800329e:	0018      	movs	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b004      	add	sp, #16
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <xQueueGenericReset+0x1a>
 80032ba:	b672      	cpsid	i
 80032bc:	46c0      	nop			@ (mov r8, r8)
 80032be:	e7fd      	b.n	80032bc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80032c0:	f001 fe16 	bl	8004ef0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d0:	434b      	muls	r3, r1
 80032d2:	18d2      	adds	r2, r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ee:	1e59      	subs	r1, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f4:	434b      	muls	r3, r1
 80032f6:	18d2      	adds	r2, r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2244      	movs	r2, #68	@ 0x44
 8003300:	21ff      	movs	r1, #255	@ 0xff
 8003302:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2245      	movs	r2, #69	@ 0x45
 8003308:	21ff      	movs	r1, #255	@ 0xff
 800330a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10d      	bne.n	800332e <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d013      	beq.n	8003342 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3310      	adds	r3, #16
 800331e:	0018      	movs	r0, r3
 8003320:	f000 ffc8 	bl	80042b4 <xTaskRemoveFromEventList>
 8003324:	1e03      	subs	r3, r0, #0
 8003326:	d00c      	beq.n	8003342 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003328:	f001 fdd2 	bl	8004ed0 <vPortYield>
 800332c:	e009      	b.n	8003342 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3310      	adds	r3, #16
 8003332:	0018      	movs	r0, r3
 8003334:	f7ff ff0e 	bl	8003154 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3324      	adds	r3, #36	@ 0x24
 800333c:	0018      	movs	r0, r3
 800333e:	f7ff ff09 	bl	8003154 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003342:	f001 fde7 	bl	8004f14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003346:	2301      	movs	r3, #1
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	b004      	add	sp, #16
 800334e:	bd80      	pop	{r7, pc}

08003350 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b089      	sub	sp, #36	@ 0x24
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <xQueueGenericCreateStatic+0x1a>
 8003364:	b672      	cpsid	i
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	e7fd      	b.n	8003366 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <xQueueGenericCreateStatic+0x26>
 8003370:	b672      	cpsid	i
 8003372:	46c0      	nop			@ (mov r8, r8)
 8003374:	e7fd      	b.n	8003372 <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <xQueueGenericCreateStatic+0x32>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <xQueueGenericCreateStatic+0x36>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <xQueueGenericCreateStatic+0x38>
 8003386:	2300      	movs	r3, #0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <xQueueGenericCreateStatic+0x42>
 800338c:	b672      	cpsid	i
 800338e:	46c0      	nop			@ (mov r8, r8)
 8003390:	e7fd      	b.n	800338e <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d102      	bne.n	800339e <xQueueGenericCreateStatic+0x4e>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <xQueueGenericCreateStatic+0x52>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <xQueueGenericCreateStatic+0x54>
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <xQueueGenericCreateStatic+0x5e>
 80033a8:	b672      	cpsid	i
 80033aa:	46c0      	nop			@ (mov r8, r8)
 80033ac:	e7fd      	b.n	80033aa <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033ae:	2350      	movs	r3, #80	@ 0x50
 80033b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b50      	cmp	r3, #80	@ 0x50
 80033b6:	d002      	beq.n	80033be <xQueueGenericCreateStatic+0x6e>
 80033b8:	b672      	cpsid	i
 80033ba:	46c0      	nop			@ (mov r8, r8)
 80033bc:	e7fd      	b.n	80033ba <xQueueGenericCreateStatic+0x6a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033be:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00e      	beq.n	80033e8 <xQueueGenericCreateStatic+0x98>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2246      	movs	r2, #70	@ 0x46
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033d2:	2328      	movs	r3, #40	@ 0x28
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	781c      	ldrb	r4, [r3, #0]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	0023      	movs	r3, r4
 80033e4:	f000 f805 	bl	80033f2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033e8:	697b      	ldr	r3, [r7, #20]
	}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b007      	add	sp, #28
 80033f0:	bd90      	pop	{r4, r7, pc}

080033f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	001a      	movs	r2, r3
 8003400:	1cfb      	adds	r3, r7, #3
 8003402:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d103      	bne.n	8003412 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	e002      	b.n	8003418 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2101      	movs	r1, #1
 8003428:	0018      	movs	r0, r3
 800342a:	f7ff ff3c 	bl	80032a6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	1cfa      	adds	r2, r7, #3
 8003432:	214c      	movs	r1, #76	@ 0x4c
 8003434:	7812      	ldrb	r2, [r2, #0]
 8003436:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003438:	46c0      	nop			@ (mov r8, r8)
 800343a:	46bd      	mov	sp, r7
 800343c:	b004      	add	sp, #16
 800343e:	bd80      	pop	{r7, pc}

08003440 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	@ 0x28
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800344e:	2300      	movs	r3, #0
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d102      	bne.n	8003462 <xQueueGenericSend+0x22>
 800345c:	b672      	cpsid	i
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	e7fd      	b.n	800345e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d103      	bne.n	8003470 <xQueueGenericSend+0x30>
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <xQueueGenericSend+0x34>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <xQueueGenericSend+0x36>
 8003474:	2300      	movs	r3, #0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <xQueueGenericSend+0x40>
 800347a:	b672      	cpsid	i
 800347c:	46c0      	nop			@ (mov r8, r8)
 800347e:	e7fd      	b.n	800347c <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d103      	bne.n	800348e <xQueueGenericSend+0x4e>
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <xQueueGenericSend+0x52>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <xQueueGenericSend+0x54>
 8003492:	2300      	movs	r3, #0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <xQueueGenericSend+0x5e>
 8003498:	b672      	cpsid	i
 800349a:	46c0      	nop			@ (mov r8, r8)
 800349c:	e7fd      	b.n	800349a <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800349e:	f001 f8a1 	bl	80045e4 <xTaskGetSchedulerState>
 80034a2:	1e03      	subs	r3, r0, #0
 80034a4:	d102      	bne.n	80034ac <xQueueGenericSend+0x6c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <xQueueGenericSend+0x70>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <xQueueGenericSend+0x72>
 80034b0:	2300      	movs	r3, #0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <xQueueGenericSend+0x7c>
 80034b6:	b672      	cpsid	i
 80034b8:	46c0      	nop			@ (mov r8, r8)
 80034ba:	e7fd      	b.n	80034b8 <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034bc:	f001 fd18 	bl	8004ef0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d302      	bcc.n	80034d2 <xQueueGenericSend+0x92>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d11e      	bne.n	8003510 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	0018      	movs	r0, r3
 80034da:	f000 f9a8 	bl	800382e <prvCopyDataToQueue>
 80034de:	0003      	movs	r3, r0
 80034e0:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	3324      	adds	r3, #36	@ 0x24
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 fee0 	bl	80042b4 <xTaskRemoveFromEventList>
 80034f4:	1e03      	subs	r3, r0, #0
 80034f6:	d007      	beq.n	8003508 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034f8:	f001 fcea 	bl	8004ed0 <vPortYield>
 80034fc:	e004      	b.n	8003508 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003504:	f001 fce4 	bl	8004ed0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003508:	f001 fd04 	bl	8004f14 <vPortExitCritical>
				return pdPASS;
 800350c:	2301      	movs	r3, #1
 800350e:	e05b      	b.n	80035c8 <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003516:	f001 fcfd 	bl	8004f14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800351a:	2300      	movs	r3, #0
 800351c:	e054      	b.n	80035c8 <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	2b00      	cmp	r3, #0
 8003522:	d106      	bne.n	8003532 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003524:	2314      	movs	r3, #20
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	0018      	movs	r0, r3
 800352a:	f000 ff21 	bl	8004370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800352e:	2301      	movs	r3, #1
 8003530:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003532:	f001 fcef 	bl	8004f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003536:	f000 fccd 	bl	8003ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800353a:	f001 fcd9 	bl	8004ef0 <vPortEnterCritical>
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	2244      	movs	r2, #68	@ 0x44
 8003542:	5c9b      	ldrb	r3, [r3, r2]
 8003544:	b25b      	sxtb	r3, r3
 8003546:	3301      	adds	r3, #1
 8003548:	d103      	bne.n	8003552 <xQueueGenericSend+0x112>
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	2244      	movs	r2, #68	@ 0x44
 800354e:	2100      	movs	r1, #0
 8003550:	5499      	strb	r1, [r3, r2]
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	2245      	movs	r2, #69	@ 0x45
 8003556:	5c9b      	ldrb	r3, [r3, r2]
 8003558:	b25b      	sxtb	r3, r3
 800355a:	3301      	adds	r3, #1
 800355c:	d103      	bne.n	8003566 <xQueueGenericSend+0x126>
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	2245      	movs	r2, #69	@ 0x45
 8003562:	2100      	movs	r1, #0
 8003564:	5499      	strb	r1, [r3, r2]
 8003566:	f001 fcd5 	bl	8004f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800356a:	1d3a      	adds	r2, r7, #4
 800356c:	2314      	movs	r3, #20
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	0011      	movs	r1, r2
 8003572:	0018      	movs	r0, r3
 8003574:	f000 ff10 	bl	8004398 <xTaskCheckForTimeOut>
 8003578:	1e03      	subs	r3, r0, #0
 800357a:	d11e      	bne.n	80035ba <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	0018      	movs	r0, r3
 8003580:	f000 fa5a 	bl	8003a38 <prvIsQueueFull>
 8003584:	1e03      	subs	r3, r0, #0
 8003586:	d011      	beq.n	80035ac <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	3310      	adds	r3, #16
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	0011      	movs	r1, r2
 8003590:	0018      	movs	r0, r3
 8003592:	f000 fe47 	bl	8004224 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	0018      	movs	r0, r3
 800359a:	f000 f9d9 	bl	8003950 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800359e:	f000 fca5 	bl	8003eec <xTaskResumeAll>
 80035a2:	1e03      	subs	r3, r0, #0
 80035a4:	d18a      	bne.n	80034bc <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 80035a6:	f001 fc93 	bl	8004ed0 <vPortYield>
 80035aa:	e787      	b.n	80034bc <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	0018      	movs	r0, r3
 80035b0:	f000 f9ce 	bl	8003950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035b4:	f000 fc9a 	bl	8003eec <xTaskResumeAll>
 80035b8:	e780      	b.n	80034bc <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	0018      	movs	r0, r3
 80035be:	f000 f9c7 	bl	8003950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035c2:	f000 fc93 	bl	8003eec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b00a      	add	sp, #40	@ 0x28
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035d0:	b590      	push	{r4, r7, lr}
 80035d2:	b08b      	sub	sp, #44	@ 0x2c
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <xQueueGenericSendFromISR+0x1e>
 80035e8:	b672      	cpsid	i
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	e7fd      	b.n	80035ea <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d103      	bne.n	80035fc <xQueueGenericSendFromISR+0x2c>
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <xQueueGenericSendFromISR+0x30>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <xQueueGenericSendFromISR+0x32>
 8003600:	2300      	movs	r3, #0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <xQueueGenericSendFromISR+0x3c>
 8003606:	b672      	cpsid	i
 8003608:	46c0      	nop			@ (mov r8, r8)
 800360a:	e7fd      	b.n	8003608 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d103      	bne.n	800361a <xQueueGenericSendFromISR+0x4a>
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <xQueueGenericSendFromISR+0x4e>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <xQueueGenericSendFromISR+0x50>
 800361e:	2300      	movs	r3, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <xQueueGenericSendFromISR+0x5a>
 8003624:	b672      	cpsid	i
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	e7fd      	b.n	8003626 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800362a:	f001 fc8b 	bl	8004f44 <ulSetInterruptMaskFromISR>
 800362e:	0003      	movs	r3, r0
 8003630:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <xQueueGenericSendFromISR+0x74>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d131      	bne.n	80036a8 <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003644:	241b      	movs	r4, #27
 8003646:	193b      	adds	r3, r7, r4
 8003648:	6a3a      	ldr	r2, [r7, #32]
 800364a:	2145      	movs	r1, #69	@ 0x45
 800364c:	5c52      	ldrb	r2, [r2, r1]
 800364e:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003654:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	0018      	movs	r0, r3
 800365e:	f000 f8e6 	bl	800382e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003662:	193b      	adds	r3, r7, r4
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b25b      	sxtb	r3, r3
 8003668:	3301      	adds	r3, #1
 800366a:	d111      	bne.n	8003690 <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	2b00      	cmp	r3, #0
 8003672:	d016      	beq.n	80036a2 <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	3324      	adds	r3, #36	@ 0x24
 8003678:	0018      	movs	r0, r3
 800367a:	f000 fe1b 	bl	80042b4 <xTaskRemoveFromEventList>
 800367e:	1e03      	subs	r3, r0, #0
 8003680:	d00f      	beq.n	80036a2 <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00c      	beq.n	80036a2 <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e008      	b.n	80036a2 <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003690:	231b      	movs	r3, #27
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	b2db      	uxtb	r3, r3
 800369a:	b259      	sxtb	r1, r3
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	2245      	movs	r2, #69	@ 0x45
 80036a0:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80036a2:	2301      	movs	r3, #1
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 80036a6:	e001      	b.n	80036ac <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	0018      	movs	r0, r3
 80036b0:	f001 fc4e 	bl	8004f50 <vClearInterruptMaskFromISR>

	return xReturn;
 80036b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80036b6:	0018      	movs	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b00b      	add	sp, #44	@ 0x2c
 80036bc:	bd90      	pop	{r4, r7, pc}

080036be <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b08a      	sub	sp, #40	@ 0x28
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d102      	bne.n	80036de <xQueueReceive+0x20>
 80036d8:	b672      	cpsid	i
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	e7fd      	b.n	80036da <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d103      	bne.n	80036ec <xQueueReceive+0x2e>
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <xQueueReceive+0x32>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <xQueueReceive+0x34>
 80036f0:	2300      	movs	r3, #0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <xQueueReceive+0x3e>
 80036f6:	b672      	cpsid	i
 80036f8:	46c0      	nop			@ (mov r8, r8)
 80036fa:	e7fd      	b.n	80036f8 <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036fc:	f000 ff72 	bl	80045e4 <xTaskGetSchedulerState>
 8003700:	1e03      	subs	r3, r0, #0
 8003702:	d102      	bne.n	800370a <xQueueReceive+0x4c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <xQueueReceive+0x50>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <xQueueReceive+0x52>
 800370e:	2300      	movs	r3, #0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d102      	bne.n	800371a <xQueueReceive+0x5c>
 8003714:	b672      	cpsid	i
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	e7fd      	b.n	8003716 <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800371a:	f001 fbe9 	bl	8004ef0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003722:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d01a      	beq.n	8003760 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	0011      	movs	r1, r2
 8003730:	0018      	movs	r0, r3
 8003732:	f000 f8e7 	bl	8003904 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	1e5a      	subs	r2, r3, #1
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	3310      	adds	r3, #16
 800374a:	0018      	movs	r0, r3
 800374c:	f000 fdb2 	bl	80042b4 <xTaskRemoveFromEventList>
 8003750:	1e03      	subs	r3, r0, #0
 8003752:	d001      	beq.n	8003758 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003754:	f001 fbbc 	bl	8004ed0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003758:	f001 fbdc 	bl	8004f14 <vPortExitCritical>
				return pdPASS;
 800375c:	2301      	movs	r3, #1
 800375e:	e062      	b.n	8003826 <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d103      	bne.n	800376e <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003766:	f001 fbd5 	bl	8004f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800376a:	2300      	movs	r3, #0
 800376c:	e05b      	b.n	8003826 <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	2b00      	cmp	r3, #0
 8003772:	d106      	bne.n	8003782 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003774:	2314      	movs	r3, #20
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	0018      	movs	r0, r3
 800377a:	f000 fdf9 	bl	8004370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800377e:	2301      	movs	r3, #1
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003782:	f001 fbc7 	bl	8004f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003786:	f000 fba5 	bl	8003ed4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800378a:	f001 fbb1 	bl	8004ef0 <vPortEnterCritical>
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	2244      	movs	r2, #68	@ 0x44
 8003792:	5c9b      	ldrb	r3, [r3, r2]
 8003794:	b25b      	sxtb	r3, r3
 8003796:	3301      	adds	r3, #1
 8003798:	d103      	bne.n	80037a2 <xQueueReceive+0xe4>
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	2244      	movs	r2, #68	@ 0x44
 800379e:	2100      	movs	r1, #0
 80037a0:	5499      	strb	r1, [r3, r2]
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	2245      	movs	r2, #69	@ 0x45
 80037a6:	5c9b      	ldrb	r3, [r3, r2]
 80037a8:	b25b      	sxtb	r3, r3
 80037aa:	3301      	adds	r3, #1
 80037ac:	d103      	bne.n	80037b6 <xQueueReceive+0xf8>
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	2245      	movs	r2, #69	@ 0x45
 80037b2:	2100      	movs	r1, #0
 80037b4:	5499      	strb	r1, [r3, r2]
 80037b6:	f001 fbad 	bl	8004f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037ba:	1d3a      	adds	r2, r7, #4
 80037bc:	2314      	movs	r3, #20
 80037be:	18fb      	adds	r3, r7, r3
 80037c0:	0011      	movs	r1, r2
 80037c2:	0018      	movs	r0, r3
 80037c4:	f000 fde8 	bl	8004398 <xTaskCheckForTimeOut>
 80037c8:	1e03      	subs	r3, r0, #0
 80037ca:	d11e      	bne.n	800380a <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	0018      	movs	r0, r3
 80037d0:	f000 f91c 	bl	8003a0c <prvIsQueueEmpty>
 80037d4:	1e03      	subs	r3, r0, #0
 80037d6:	d011      	beq.n	80037fc <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	3324      	adds	r3, #36	@ 0x24
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	0011      	movs	r1, r2
 80037e0:	0018      	movs	r0, r3
 80037e2:	f000 fd1f 	bl	8004224 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 f8b1 	bl	8003950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037ee:	f000 fb7d 	bl	8003eec <xTaskResumeAll>
 80037f2:	1e03      	subs	r3, r0, #0
 80037f4:	d191      	bne.n	800371a <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 80037f6:	f001 fb6b 	bl	8004ed0 <vPortYield>
 80037fa:	e78e      	b.n	800371a <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	0018      	movs	r0, r3
 8003800:	f000 f8a6 	bl	8003950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003804:	f000 fb72 	bl	8003eec <xTaskResumeAll>
 8003808:	e787      	b.n	800371a <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	0018      	movs	r0, r3
 800380e:	f000 f89f 	bl	8003950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003812:	f000 fb6b 	bl	8003eec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	0018      	movs	r0, r3
 800381a:	f000 f8f7 	bl	8003a0c <prvIsQueueEmpty>
 800381e:	1e03      	subs	r3, r0, #0
 8003820:	d100      	bne.n	8003824 <xQueueReceive+0x166>
 8003822:	e77a      	b.n	800371a <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003824:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003826:	0018      	movs	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	b00a      	add	sp, #40	@ 0x28
 800382c:	bd80      	pop	{r7, pc}

0800382e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b086      	sub	sp, #24
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003842:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10e      	bne.n	800386a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d14e      	bne.n	80038f2 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	0018      	movs	r0, r3
 800385a:	f000 fedf 	bl	800461c <xTaskPriorityDisinherit>
 800385e:	0003      	movs	r3, r0
 8003860:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	e043      	b.n	80038f2 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d119      	bne.n	80038a4 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6858      	ldr	r0, [r3, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	0019      	movs	r1, r3
 800387c:	f001 ff89 	bl	8005792 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	18d2      	adds	r2, r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	429a      	cmp	r2, r3
 8003898:	d32b      	bcc.n	80038f2 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	e026      	b.n	80038f2 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68d8      	ldr	r0, [r3, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	0019      	movs	r1, r3
 80038b0:	f001 ff6f 	bl	8005792 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	425b      	negs	r3, r3
 80038be:	18d2      	adds	r2, r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d207      	bcs.n	80038e0 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	425b      	negs	r3, r3
 80038da:	18d2      	adds	r2, r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d105      	bne.n	80038f2 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80038fa:	697b      	ldr	r3, [r7, #20]
}
 80038fc:	0018      	movs	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	b006      	add	sp, #24
 8003902:	bd80      	pop	{r7, pc}

08003904 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d018      	beq.n	8003948 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	18d2      	adds	r2, r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	429a      	cmp	r2, r3
 800392e:	d303      	bcc.n	8003938 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68d9      	ldr	r1, [r3, #12]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	0018      	movs	r0, r3
 8003944:	f001 ff25 	bl	8005792 <memcpy>
	}
}
 8003948:	46c0      	nop			@ (mov r8, r8)
 800394a:	46bd      	mov	sp, r7
 800394c:	b002      	add	sp, #8
 800394e:	bd80      	pop	{r7, pc}

08003950 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003958:	f001 faca 	bl	8004ef0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800395c:	230f      	movs	r3, #15
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	2145      	movs	r1, #69	@ 0x45
 8003964:	5c52      	ldrb	r2, [r2, r1]
 8003966:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003968:	e013      	b.n	8003992 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3324      	adds	r3, #36	@ 0x24
 8003976:	0018      	movs	r0, r3
 8003978:	f000 fc9c 	bl	80042b4 <xTaskRemoveFromEventList>
 800397c:	1e03      	subs	r3, r0, #0
 800397e:	d001      	beq.n	8003984 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003980:	f000 fd5c 	bl	800443c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003984:	210f      	movs	r1, #15
 8003986:	187b      	adds	r3, r7, r1
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	3b01      	subs	r3, #1
 800398c:	b2da      	uxtb	r2, r3
 800398e:	187b      	adds	r3, r7, r1
 8003990:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003992:	230f      	movs	r3, #15
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	b25b      	sxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	dce5      	bgt.n	800396a <prvUnlockQueue+0x1a>
 800399e:	e000      	b.n	80039a2 <prvUnlockQueue+0x52>
					break;
 80039a0:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2245      	movs	r2, #69	@ 0x45
 80039a6:	21ff      	movs	r1, #255	@ 0xff
 80039a8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80039aa:	f001 fab3 	bl	8004f14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039ae:	f001 fa9f 	bl	8004ef0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039b2:	230e      	movs	r3, #14
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	2144      	movs	r1, #68	@ 0x44
 80039ba:	5c52      	ldrb	r2, [r2, r1]
 80039bc:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039be:	e013      	b.n	80039e8 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d016      	beq.n	80039f6 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3310      	adds	r3, #16
 80039cc:	0018      	movs	r0, r3
 80039ce:	f000 fc71 	bl	80042b4 <xTaskRemoveFromEventList>
 80039d2:	1e03      	subs	r3, r0, #0
 80039d4:	d001      	beq.n	80039da <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80039d6:	f000 fd31 	bl	800443c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039da:	210e      	movs	r1, #14
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	187b      	adds	r3, r7, r1
 80039e6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039e8:	230e      	movs	r3, #14
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	b25b      	sxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	dce5      	bgt.n	80039c0 <prvUnlockQueue+0x70>
 80039f4:	e000      	b.n	80039f8 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80039f6:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2244      	movs	r2, #68	@ 0x44
 80039fc:	21ff      	movs	r1, #255	@ 0xff
 80039fe:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003a00:	f001 fa88 	bl	8004f14 <vPortExitCritical>
}
 8003a04:	46c0      	nop			@ (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b004      	add	sp, #16
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a14:	f001 fa6c 	bl	8004ef0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a20:	2301      	movs	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	e001      	b.n	8003a2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a2a:	f001 fa73 	bl	8004f14 <vPortExitCritical>

	return xReturn;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
}
 8003a30:	0018      	movs	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b004      	add	sp, #16
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a40:	f001 fa56 	bl	8004ef0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d102      	bne.n	8003a56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a50:	2301      	movs	r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e001      	b.n	8003a5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a5a:	f001 fa5b 	bl	8004f14 <vPortExitCritical>

	return xReturn;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
}
 8003a60:	0018      	movs	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b004      	add	sp, #16
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e015      	b.n	8003aa4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a78:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab4 <vQueueAddToRegistry+0x4c>)
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	00d2      	lsls	r2, r2, #3
 8003a7e:	58d3      	ldr	r3, [r2, r3]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10c      	bne.n	8003a9e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a84:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <vQueueAddToRegistry+0x4c>)
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	00d2      	lsls	r2, r2, #3
 8003a8a:	6839      	ldr	r1, [r7, #0]
 8003a8c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a8e:	4a09      	ldr	r2, [pc, #36]	@ (8003ab4 <vQueueAddToRegistry+0x4c>)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	18d3      	adds	r3, r2, r3
 8003a96:	3304      	adds	r3, #4
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a9c:	e006      	b.n	8003aac <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b07      	cmp	r3, #7
 8003aa8:	d9e6      	bls.n	8003a78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	46c0      	nop			@ (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b004      	add	sp, #16
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	20000830 	.word	0x20000830

08003ab8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ac8:	f001 fa12 	bl	8004ef0 <vPortEnterCritical>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2244      	movs	r2, #68	@ 0x44
 8003ad0:	5c9b      	ldrb	r3, [r3, r2]
 8003ad2:	b25b      	sxtb	r3, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	d103      	bne.n	8003ae0 <vQueueWaitForMessageRestricted+0x28>
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2244      	movs	r2, #68	@ 0x44
 8003adc:	2100      	movs	r1, #0
 8003ade:	5499      	strb	r1, [r3, r2]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2245      	movs	r2, #69	@ 0x45
 8003ae4:	5c9b      	ldrb	r3, [r3, r2]
 8003ae6:	b25b      	sxtb	r3, r3
 8003ae8:	3301      	adds	r3, #1
 8003aea:	d103      	bne.n	8003af4 <vQueueWaitForMessageRestricted+0x3c>
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2245      	movs	r2, #69	@ 0x45
 8003af0:	2100      	movs	r1, #0
 8003af2:	5499      	strb	r1, [r3, r2]
 8003af4:	f001 fa0e 	bl	8004f14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	3324      	adds	r3, #36	@ 0x24
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f000 fbab 	bl	8004264 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	0018      	movs	r0, r3
 8003b12:	f7ff ff1d 	bl	8003950 <prvUnlockQueue>
	}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b006      	add	sp, #24
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b1e:	b590      	push	{r4, r7, lr}
 8003b20:	b08d      	sub	sp, #52	@ 0x34
 8003b22:	af04      	add	r7, sp, #16
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <xTaskCreateStatic+0x1a>
 8003b32:	b672      	cpsid	i
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	e7fd      	b.n	8003b34 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <xTaskCreateStatic+0x26>
 8003b3e:	b672      	cpsid	i
 8003b40:	46c0      	nop			@ (mov r8, r8)
 8003b42:	e7fd      	b.n	8003b40 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b44:	235c      	movs	r3, #92	@ 0x5c
 8003b46:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b5c      	cmp	r3, #92	@ 0x5c
 8003b4c:	d002      	beq.n	8003b54 <xTaskCreateStatic+0x36>
 8003b4e:	b672      	cpsid	i
 8003b50:	46c0      	nop			@ (mov r8, r8)
 8003b52:	e7fd      	b.n	8003b50 <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b54:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d020      	beq.n	8003b9e <xTaskCreateStatic+0x80>
 8003b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01d      	beq.n	8003b9e <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b64:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2259      	movs	r2, #89	@ 0x59
 8003b70:	2102      	movs	r1, #2
 8003b72:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b74:	683c      	ldr	r4, [r7, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9303      	str	r3, [sp, #12]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	9302      	str	r3, [sp, #8]
 8003b84:	2318      	movs	r3, #24
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	0023      	movs	r3, r4
 8003b90:	f000 f858 	bl	8003c44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	0018      	movs	r0, r3
 8003b98:	f000 f8de 	bl	8003d58 <prvAddNewTaskToReadyList>
 8003b9c:	e001      	b.n	8003ba2 <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
	}
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b009      	add	sp, #36	@ 0x24
 8003baa:	bd90      	pop	{r4, r7, pc}

08003bac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b08d      	sub	sp, #52	@ 0x34
 8003bb0:	af04      	add	r7, sp, #16
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	1dbb      	adds	r3, r7, #6
 8003bba:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bbc:	1dbb      	adds	r3, r7, #6
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f001 fa2c 	bl	8005020 <pvPortMalloc>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d010      	beq.n	8003bf4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bd2:	205c      	movs	r0, #92	@ 0x5c
 8003bd4:	f001 fa24 	bl	8005020 <pvPortMalloc>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003be8:	e006      	b.n	8003bf8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f001 fac7 	bl	8005180 <vPortFree>
 8003bf2:	e001      	b.n	8003bf8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01a      	beq.n	8003c34 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	2259      	movs	r2, #89	@ 0x59
 8003c02:	2100      	movs	r1, #0
 8003c04:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c06:	1dbb      	adds	r3, r7, #6
 8003c08:	881a      	ldrh	r2, [r3, #0]
 8003c0a:	683c      	ldr	r4, [r7, #0]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	2300      	movs	r3, #0
 8003c12:	9303      	str	r3, [sp, #12]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	9302      	str	r3, [sp, #8]
 8003c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	0023      	movs	r3, r4
 8003c22:	f000 f80f 	bl	8003c44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 f895 	bl	8003d58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	e002      	b.n	8003c3a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c34:	2301      	movs	r3, #1
 8003c36:	425b      	negs	r3, r3
 8003c38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c3a:	69bb      	ldr	r3, [r7, #24]
	}
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b009      	add	sp, #36	@ 0x24
 8003c42:	bd90      	pop	{r4, r7, pc}

08003c44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c54:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	001a      	movs	r2, r3
 8003c5c:	21a5      	movs	r1, #165	@ 0xa5
 8003c5e:	f001 fd15 	bl	800568c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	493a      	ldr	r1, [pc, #232]	@ (8003d54 <prvInitialiseNewTask+0x110>)
 8003c6a:	468c      	mov	ip, r1
 8003c6c:	4463      	add	r3, ip
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	18d3      	adds	r3, r2, r3
 8003c72:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2207      	movs	r2, #7
 8003c78:	4393      	bics	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2207      	movs	r2, #7
 8003c80:	4013      	ands	r3, r2
 8003c82:	d002      	beq.n	8003c8a <prvInitialiseNewTask+0x46>
 8003c84:	b672      	cpsid	i
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	e7fd      	b.n	8003c86 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d020      	beq.n	8003cd2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e013      	b.n	8003cbe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	18d3      	adds	r3, r2, r3
 8003c9c:	7818      	ldrb	r0, [r3, #0]
 8003c9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ca0:	2134      	movs	r1, #52	@ 0x34
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	18d3      	adds	r3, r2, r3
 8003ca6:	185b      	adds	r3, r3, r1
 8003ca8:	1c02      	adds	r2, r0, #0
 8003caa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	18d3      	adds	r3, r2, r3
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d006      	beq.n	8003cc6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b0f      	cmp	r3, #15
 8003cc2:	d9e8      	bls.n	8003c96 <prvInitialiseNewTask+0x52>
 8003cc4:	e000      	b.n	8003cc8 <prvInitialiseNewTask+0x84>
			{
				break;
 8003cc6:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cca:	2243      	movs	r2, #67	@ 0x43
 8003ccc:	2100      	movs	r1, #0
 8003cce:	5499      	strb	r1, [r3, r2]
 8003cd0:	e003      	b.n	8003cda <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd4:	2234      	movs	r2, #52	@ 0x34
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	2b37      	cmp	r3, #55	@ 0x37
 8003cde:	d901      	bls.n	8003ce4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ce0:	2337      	movs	r3, #55	@ 0x37
 8003ce2:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce6:	6a3a      	ldr	r2, [r7, #32]
 8003ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cec:	6a3a      	ldr	r2, [r7, #32]
 8003cee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f7ff fa48 	bl	8003190 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d02:	3318      	adds	r3, #24
 8003d04:	0018      	movs	r0, r3
 8003d06:	f7ff fa43 	bl	8003190 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	2238      	movs	r2, #56	@ 0x38
 8003d14:	1ad2      	subs	r2, r2, r3
 8003d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d1e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d22:	2200      	movs	r2, #0
 8003d24:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d28:	2258      	movs	r2, #88	@ 0x58
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	68f9      	ldr	r1, [r7, #12]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f001 f841 	bl	8004dbc <pxPortInitialiseStack>
 8003d3a:	0002      	movs	r2, r0
 8003d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d4c:	46c0      	nop			@ (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b006      	add	sp, #24
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	3fffffff 	.word	0x3fffffff

08003d58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d60:	f001 f8c6 	bl	8004ef0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d64:	4b2a      	ldr	r3, [pc, #168]	@ (8003e10 <prvAddNewTaskToReadyList+0xb8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	4b29      	ldr	r3, [pc, #164]	@ (8003e10 <prvAddNewTaskToReadyList+0xb8>)
 8003d6c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003d6e:	4b29      	ldr	r3, [pc, #164]	@ (8003e14 <prvAddNewTaskToReadyList+0xbc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d76:	4b27      	ldr	r3, [pc, #156]	@ (8003e14 <prvAddNewTaskToReadyList+0xbc>)
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d7c:	4b24      	ldr	r3, [pc, #144]	@ (8003e10 <prvAddNewTaskToReadyList+0xb8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d110      	bne.n	8003da6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d84:	f000 fb74 	bl	8004470 <prvInitialiseTaskLists>
 8003d88:	e00d      	b.n	8003da6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d8a:	4b23      	ldr	r3, [pc, #140]	@ (8003e18 <prvAddNewTaskToReadyList+0xc0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d92:	4b20      	ldr	r3, [pc, #128]	@ (8003e14 <prvAddNewTaskToReadyList+0xbc>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d802      	bhi.n	8003da6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003da0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e14 <prvAddNewTaskToReadyList+0xbc>)
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003da6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e1c <prvAddNewTaskToReadyList+0xc4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	4b1b      	ldr	r3, [pc, #108]	@ (8003e1c <prvAddNewTaskToReadyList+0xc4>)
 8003dae:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003db0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e1c <prvAddNewTaskToReadyList+0xc4>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dbc:	4b18      	ldr	r3, [pc, #96]	@ (8003e20 <prvAddNewTaskToReadyList+0xc8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d903      	bls.n	8003dcc <prvAddNewTaskToReadyList+0x74>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc8:	4b15      	ldr	r3, [pc, #84]	@ (8003e20 <prvAddNewTaskToReadyList+0xc8>)
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd0:	0013      	movs	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	189b      	adds	r3, r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4a12      	ldr	r2, [pc, #72]	@ (8003e24 <prvAddNewTaskToReadyList+0xcc>)
 8003dda:	189a      	adds	r2, r3, r2
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	0019      	movs	r1, r3
 8003de2:	0010      	movs	r0, r2
 8003de4:	f7ff f9df 	bl	80031a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003de8:	f001 f894 	bl	8004f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dec:	4b0a      	ldr	r3, [pc, #40]	@ (8003e18 <prvAddNewTaskToReadyList+0xc0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003df4:	4b07      	ldr	r3, [pc, #28]	@ (8003e14 <prvAddNewTaskToReadyList+0xbc>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d201      	bcs.n	8003e06 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e02:	f001 f865 	bl	8004ed0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b002      	add	sp, #8
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			@ (mov r8, r8)
 8003e10:	20000d44 	.word	0x20000d44
 8003e14:	20000870 	.word	0x20000870
 8003e18:	20000d50 	.word	0x20000d50
 8003e1c:	20000d60 	.word	0x20000d60
 8003e20:	20000d4c 	.word	0x20000d4c
 8003e24:	20000874 	.word	0x20000874

08003e28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b089      	sub	sp, #36	@ 0x24
 8003e2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e36:	003a      	movs	r2, r7
 8003e38:	1d39      	adds	r1, r7, #4
 8003e3a:	2308      	movs	r3, #8
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f7ff f958 	bl	80030f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e44:	683c      	ldr	r4, [r7, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	491c      	ldr	r1, [pc, #112]	@ (8003ebc <vTaskStartScheduler+0x94>)
 8003e4c:	481c      	ldr	r0, [pc, #112]	@ (8003ec0 <vTaskStartScheduler+0x98>)
 8003e4e:	9202      	str	r2, [sp, #8]
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	2300      	movs	r3, #0
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	2300      	movs	r3, #0
 8003e58:	0022      	movs	r2, r4
 8003e5a:	f7ff fe60 	bl	8003b1e <xTaskCreateStatic>
 8003e5e:	0002      	movs	r2, r0
 8003e60:	4b18      	ldr	r3, [pc, #96]	@ (8003ec4 <vTaskStartScheduler+0x9c>)
 8003e62:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e64:	4b17      	ldr	r3, [pc, #92]	@ (8003ec4 <vTaskStartScheduler+0x9c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	e001      	b.n	8003e76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d103      	bne.n	8003e84 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8003e7c:	f000 fc80 	bl	8004780 <xTimerCreateTimerTask>
 8003e80:	0003      	movs	r3, r0
 8003e82:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d10d      	bne.n	8003ea6 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003e8a:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec8 <vTaskStartScheduler+0xa0>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	4252      	negs	r2, r2
 8003e92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e94:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <vTaskStartScheduler+0xa4>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <vTaskStartScheduler+0xa8>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ea0:	f000 fff2 	bl	8004e88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ea4:	e005      	b.n	8003eb2 <vTaskStartScheduler+0x8a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	d102      	bne.n	8003eb2 <vTaskStartScheduler+0x8a>
 8003eac:	b672      	cpsid	i
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	e7fd      	b.n	8003eae <vTaskStartScheduler+0x86>
}
 8003eb2:	46c0      	nop			@ (mov r8, r8)
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b005      	add	sp, #20
 8003eb8:	bd90      	pop	{r4, r7, pc}
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	080064f0 	.word	0x080064f0
 8003ec0:	08004451 	.word	0x08004451
 8003ec4:	20000d68 	.word	0x20000d68
 8003ec8:	20000d64 	.word	0x20000d64
 8003ecc:	20000d50 	.word	0x20000d50
 8003ed0:	20000d48 	.word	0x20000d48

08003ed4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ed8:	4b03      	ldr	r3, [pc, #12]	@ (8003ee8 <vTaskSuspendAll+0x14>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	4b02      	ldr	r3, [pc, #8]	@ (8003ee8 <vTaskSuspendAll+0x14>)
 8003ee0:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ee2:	46c0      	nop			@ (mov r8, r8)
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000d6c 	.word	0x20000d6c

08003eec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003efa:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe4 <xTaskResumeAll+0xf8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <xTaskResumeAll+0x1c>
 8003f02:	b672      	cpsid	i
 8003f04:	46c0      	nop			@ (mov r8, r8)
 8003f06:	e7fd      	b.n	8003f04 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f08:	f000 fff2 	bl	8004ef0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f0c:	4b35      	ldr	r3, [pc, #212]	@ (8003fe4 <xTaskResumeAll+0xf8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	1e5a      	subs	r2, r3, #1
 8003f12:	4b34      	ldr	r3, [pc, #208]	@ (8003fe4 <xTaskResumeAll+0xf8>)
 8003f14:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f16:	4b33      	ldr	r3, [pc, #204]	@ (8003fe4 <xTaskResumeAll+0xf8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d15b      	bne.n	8003fd6 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f1e:	4b32      	ldr	r3, [pc, #200]	@ (8003fe8 <xTaskResumeAll+0xfc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d057      	beq.n	8003fd6 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f26:	e02f      	b.n	8003f88 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f28:	4b30      	ldr	r3, [pc, #192]	@ (8003fec <xTaskResumeAll+0x100>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3318      	adds	r3, #24
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff f98e 	bl	8003256 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f7ff f989 	bl	8003256 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f48:	4b29      	ldr	r3, [pc, #164]	@ (8003ff0 <xTaskResumeAll+0x104>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d903      	bls.n	8003f58 <xTaskResumeAll+0x6c>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f54:	4b26      	ldr	r3, [pc, #152]	@ (8003ff0 <xTaskResumeAll+0x104>)
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f5c:	0013      	movs	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	189b      	adds	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4a23      	ldr	r2, [pc, #140]	@ (8003ff4 <xTaskResumeAll+0x108>)
 8003f66:	189a      	adds	r2, r3, r2
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	0010      	movs	r0, r2
 8003f70:	f7ff f919 	bl	80031a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f78:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff8 <xTaskResumeAll+0x10c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8003f82:	4b1e      	ldr	r3, [pc, #120]	@ (8003ffc <xTaskResumeAll+0x110>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f88:	4b18      	ldr	r3, [pc, #96]	@ (8003fec <xTaskResumeAll+0x100>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1cb      	bne.n	8003f28 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f96:	f000 fb07 	bl	80045a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f9a:	4b19      	ldr	r3, [pc, #100]	@ (8004000 <xTaskResumeAll+0x114>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00f      	beq.n	8003fc6 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fa6:	f000 f83b 	bl	8004020 <xTaskIncrementTick>
 8003faa:	1e03      	subs	r3, r0, #0
 8003fac:	d002      	beq.n	8003fb4 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8003fae:	4b13      	ldr	r3, [pc, #76]	@ (8003ffc <xTaskResumeAll+0x110>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f2      	bne.n	8003fa6 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004000 <xTaskResumeAll+0x114>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ffc <xTaskResumeAll+0x110>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fd2:	f000 ff7d 	bl	8004ed0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fd6:	f000 ff9d 	bl	8004f14 <vPortExitCritical>

	return xAlreadyYielded;
 8003fda:	68bb      	ldr	r3, [r7, #8]
}
 8003fdc:	0018      	movs	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b004      	add	sp, #16
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000d6c 	.word	0x20000d6c
 8003fe8:	20000d44 	.word	0x20000d44
 8003fec:	20000d04 	.word	0x20000d04
 8003ff0:	20000d4c 	.word	0x20000d4c
 8003ff4:	20000874 	.word	0x20000874
 8003ff8:	20000870 	.word	0x20000870
 8003ffc:	20000d58 	.word	0x20000d58
 8004000:	20000d54 	.word	0x20000d54

08004004 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800400a:	4b04      	ldr	r3, [pc, #16]	@ (800401c <xTaskGetTickCount+0x18>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004010:	687b      	ldr	r3, [r7, #4]
}
 8004012:	0018      	movs	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	b002      	add	sp, #8
 8004018:	bd80      	pop	{r7, pc}
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	20000d48 	.word	0x20000d48

08004020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800402a:	4b4a      	ldr	r3, [pc, #296]	@ (8004154 <xTaskIncrementTick+0x134>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d000      	beq.n	8004034 <xTaskIncrementTick+0x14>
 8004032:	e085      	b.n	8004140 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004034:	4b48      	ldr	r3, [pc, #288]	@ (8004158 <xTaskIncrementTick+0x138>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3301      	adds	r3, #1
 800403a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800403c:	4b46      	ldr	r3, [pc, #280]	@ (8004158 <xTaskIncrementTick+0x138>)
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d118      	bne.n	800407a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004048:	4b44      	ldr	r3, [pc, #272]	@ (800415c <xTaskIncrementTick+0x13c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <xTaskIncrementTick+0x38>
 8004052:	b672      	cpsid	i
 8004054:	46c0      	nop			@ (mov r8, r8)
 8004056:	e7fd      	b.n	8004054 <xTaskIncrementTick+0x34>
 8004058:	4b40      	ldr	r3, [pc, #256]	@ (800415c <xTaskIncrementTick+0x13c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	4b40      	ldr	r3, [pc, #256]	@ (8004160 <xTaskIncrementTick+0x140>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4b3e      	ldr	r3, [pc, #248]	@ (800415c <xTaskIncrementTick+0x13c>)
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	4b3e      	ldr	r3, [pc, #248]	@ (8004160 <xTaskIncrementTick+0x140>)
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	4b3d      	ldr	r3, [pc, #244]	@ (8004164 <xTaskIncrementTick+0x144>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	4b3c      	ldr	r3, [pc, #240]	@ (8004164 <xTaskIncrementTick+0x144>)
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	f000 fa97 	bl	80045a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800407a:	4b3b      	ldr	r3, [pc, #236]	@ (8004168 <xTaskIncrementTick+0x148>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	429a      	cmp	r2, r3
 8004082:	d349      	bcc.n	8004118 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004084:	4b35      	ldr	r3, [pc, #212]	@ (800415c <xTaskIncrementTick+0x13c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d104      	bne.n	8004098 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800408e:	4b36      	ldr	r3, [pc, #216]	@ (8004168 <xTaskIncrementTick+0x148>)
 8004090:	2201      	movs	r2, #1
 8004092:	4252      	negs	r2, r2
 8004094:	601a      	str	r2, [r3, #0]
					break;
 8004096:	e03f      	b.n	8004118 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004098:	4b30      	ldr	r3, [pc, #192]	@ (800415c <xTaskIncrementTick+0x13c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d203      	bcs.n	80040b8 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004168 <xTaskIncrementTick+0x148>)
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040b6:	e02f      	b.n	8004118 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	3304      	adds	r3, #4
 80040bc:	0018      	movs	r0, r3
 80040be:	f7ff f8ca 	bl	8003256 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d004      	beq.n	80040d4 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3318      	adds	r3, #24
 80040ce:	0018      	movs	r0, r3
 80040d0:	f7ff f8c1 	bl	8003256 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d8:	4b24      	ldr	r3, [pc, #144]	@ (800416c <xTaskIncrementTick+0x14c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d903      	bls.n	80040e8 <xTaskIncrementTick+0xc8>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e4:	4b21      	ldr	r3, [pc, #132]	@ (800416c <xTaskIncrementTick+0x14c>)
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ec:	0013      	movs	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	189b      	adds	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004170 <xTaskIncrementTick+0x150>)
 80040f6:	189a      	adds	r2, r3, r2
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	3304      	adds	r3, #4
 80040fc:	0019      	movs	r1, r3
 80040fe:	0010      	movs	r0, r2
 8004100:	f7ff f851 	bl	80031a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004108:	4b1a      	ldr	r3, [pc, #104]	@ (8004174 <xTaskIncrementTick+0x154>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410e:	429a      	cmp	r2, r3
 8004110:	d3b8      	bcc.n	8004084 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8004112:	2301      	movs	r3, #1
 8004114:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004116:	e7b5      	b.n	8004084 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004118:	4b16      	ldr	r3, [pc, #88]	@ (8004174 <xTaskIncrementTick+0x154>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800411e:	4914      	ldr	r1, [pc, #80]	@ (8004170 <xTaskIncrementTick+0x150>)
 8004120:	0013      	movs	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	189b      	adds	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	585b      	ldr	r3, [r3, r1]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d901      	bls.n	8004132 <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 800412e:	2301      	movs	r3, #1
 8004130:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004132:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <xTaskIncrementTick+0x158>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 800413a:	2301      	movs	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e004      	b.n	800414a <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004140:	4b0e      	ldr	r3, [pc, #56]	@ (800417c <xTaskIncrementTick+0x15c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	4b0d      	ldr	r3, [pc, #52]	@ (800417c <xTaskIncrementTick+0x15c>)
 8004148:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800414a:	697b      	ldr	r3, [r7, #20]
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	b006      	add	sp, #24
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000d6c 	.word	0x20000d6c
 8004158:	20000d48 	.word	0x20000d48
 800415c:	20000cfc 	.word	0x20000cfc
 8004160:	20000d00 	.word	0x20000d00
 8004164:	20000d5c 	.word	0x20000d5c
 8004168:	20000d64 	.word	0x20000d64
 800416c:	20000d4c 	.word	0x20000d4c
 8004170:	20000874 	.word	0x20000874
 8004174:	20000870 	.word	0x20000870
 8004178:	20000d58 	.word	0x20000d58
 800417c:	20000d54 	.word	0x20000d54

08004180 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004186:	4b22      	ldr	r3, [pc, #136]	@ (8004210 <vTaskSwitchContext+0x90>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800418e:	4b21      	ldr	r3, [pc, #132]	@ (8004214 <vTaskSwitchContext+0x94>)
 8004190:	2201      	movs	r2, #1
 8004192:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004194:	e038      	b.n	8004208 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8004196:	4b1f      	ldr	r3, [pc, #124]	@ (8004214 <vTaskSwitchContext+0x94>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800419c:	4b1e      	ldr	r3, [pc, #120]	@ (8004218 <vTaskSwitchContext+0x98>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	e008      	b.n	80041b6 <vTaskSwitchContext+0x36>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <vTaskSwitchContext+0x30>
 80041aa:	b672      	cpsid	i
 80041ac:	46c0      	nop			@ (mov r8, r8)
 80041ae:	e7fd      	b.n	80041ac <vTaskSwitchContext+0x2c>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	4919      	ldr	r1, [pc, #100]	@ (800421c <vTaskSwitchContext+0x9c>)
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	0013      	movs	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	585b      	ldr	r3, [r3, r1]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0ed      	beq.n	80041a4 <vTaskSwitchContext+0x24>
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	0013      	movs	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	189b      	adds	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4a12      	ldr	r2, [pc, #72]	@ (800421c <vTaskSwitchContext+0x9c>)
 80041d4:	189b      	adds	r3, r3, r2
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	3308      	adds	r3, #8
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d104      	bne.n	80041f8 <vTaskSwitchContext+0x78>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <vTaskSwitchContext+0xa0>)
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <vTaskSwitchContext+0x98>)
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	601a      	str	r2, [r3, #0]
}
 8004208:	46c0      	nop			@ (mov r8, r8)
 800420a:	46bd      	mov	sp, r7
 800420c:	b002      	add	sp, #8
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20000d6c 	.word	0x20000d6c
 8004214:	20000d58 	.word	0x20000d58
 8004218:	20000d4c 	.word	0x20000d4c
 800421c:	20000874 	.word	0x20000874
 8004220:	20000870 	.word	0x20000870

08004224 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <vTaskPlaceOnEventList+0x16>
 8004234:	b672      	cpsid	i
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	e7fd      	b.n	8004236 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800423a:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <vTaskPlaceOnEventList+0x3c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3318      	adds	r3, #24
 8004240:	001a      	movs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	0011      	movs	r1, r2
 8004246:	0018      	movs	r0, r3
 8004248:	f7fe ffcf 	bl	80031ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2101      	movs	r1, #1
 8004250:	0018      	movs	r0, r3
 8004252:	f000 fa41 	bl	80046d8 <prvAddCurrentTaskToDelayedList>
}
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	46bd      	mov	sp, r7
 800425a:	b002      	add	sp, #8
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	20000870 	.word	0x20000870

08004264 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <vTaskPlaceOnEventListRestricted+0x18>
 8004276:	b672      	cpsid	i
 8004278:	46c0      	nop			@ (mov r8, r8)
 800427a:	e7fd      	b.n	8004278 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800427c:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <vTaskPlaceOnEventListRestricted+0x4c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3318      	adds	r3, #24
 8004282:	001a      	movs	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	0011      	movs	r1, r2
 8004288:	0018      	movs	r0, r3
 800428a:	f7fe ff8c 	bl	80031a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8004294:	2301      	movs	r3, #1
 8004296:	425b      	negs	r3, r3
 8004298:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	0011      	movs	r1, r2
 80042a0:	0018      	movs	r0, r3
 80042a2:	f000 fa19 	bl	80046d8 <prvAddCurrentTaskToDelayedList>
	}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	46bd      	mov	sp, r7
 80042aa:	b004      	add	sp, #16
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	46c0      	nop			@ (mov r8, r8)
 80042b0:	20000870 	.word	0x20000870

080042b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <xTaskRemoveFromEventList+0x1c>
 80042ca:	b672      	cpsid	i
 80042cc:	46c0      	nop			@ (mov r8, r8)
 80042ce:	e7fd      	b.n	80042cc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	3318      	adds	r3, #24
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7fe ffbe 	bl	8003256 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042da:	4b1f      	ldr	r3, [pc, #124]	@ (8004358 <xTaskRemoveFromEventList+0xa4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d11d      	bne.n	800431e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3304      	adds	r3, #4
 80042e6:	0018      	movs	r0, r3
 80042e8:	f7fe ffb5 	bl	8003256 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f0:	4b1a      	ldr	r3, [pc, #104]	@ (800435c <xTaskRemoveFromEventList+0xa8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d903      	bls.n	8004300 <xTaskRemoveFromEventList+0x4c>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042fc:	4b17      	ldr	r3, [pc, #92]	@ (800435c <xTaskRemoveFromEventList+0xa8>)
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004304:	0013      	movs	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	189b      	adds	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4a14      	ldr	r2, [pc, #80]	@ (8004360 <xTaskRemoveFromEventList+0xac>)
 800430e:	189a      	adds	r2, r3, r2
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	3304      	adds	r3, #4
 8004314:	0019      	movs	r1, r3
 8004316:	0010      	movs	r0, r2
 8004318:	f7fe ff45 	bl	80031a6 <vListInsertEnd>
 800431c:	e007      	b.n	800432e <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3318      	adds	r3, #24
 8004322:	001a      	movs	r2, r3
 8004324:	4b0f      	ldr	r3, [pc, #60]	@ (8004364 <xTaskRemoveFromEventList+0xb0>)
 8004326:	0011      	movs	r1, r2
 8004328:	0018      	movs	r0, r3
 800432a:	f7fe ff3c 	bl	80031a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004332:	4b0d      	ldr	r3, [pc, #52]	@ (8004368 <xTaskRemoveFromEventList+0xb4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004338:	429a      	cmp	r2, r3
 800433a:	d905      	bls.n	8004348 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800433c:	2301      	movs	r3, #1
 800433e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004340:	4b0a      	ldr	r3, [pc, #40]	@ (800436c <xTaskRemoveFromEventList+0xb8>)
 8004342:	2201      	movs	r2, #1
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e001      	b.n	800434c <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800434c:	68fb      	ldr	r3, [r7, #12]
}
 800434e:	0018      	movs	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	b004      	add	sp, #16
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	20000d6c 	.word	0x20000d6c
 800435c:	20000d4c 	.word	0x20000d4c
 8004360:	20000874 	.word	0x20000874
 8004364:	20000d04 	.word	0x20000d04
 8004368:	20000870 	.word	0x20000870
 800436c:	20000d58 	.word	0x20000d58

08004370 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004378:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <vTaskInternalSetTimeOutState+0x20>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004380:	4b04      	ldr	r3, [pc, #16]	@ (8004394 <vTaskInternalSetTimeOutState+0x24>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	605a      	str	r2, [r3, #4]
}
 8004388:	46c0      	nop			@ (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	b002      	add	sp, #8
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000d5c 	.word	0x20000d5c
 8004394:	20000d48 	.word	0x20000d48

08004398 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <xTaskCheckForTimeOut+0x16>
 80043a8:	b672      	cpsid	i
 80043aa:	46c0      	nop			@ (mov r8, r8)
 80043ac:	e7fd      	b.n	80043aa <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <xTaskCheckForTimeOut+0x22>
 80043b4:	b672      	cpsid	i
 80043b6:	46c0      	nop			@ (mov r8, r8)
 80043b8:	e7fd      	b.n	80043b6 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 80043ba:	f000 fd99 	bl	8004ef0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043be:	4b1d      	ldr	r3, [pc, #116]	@ (8004434 <xTaskCheckForTimeOut+0x9c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3301      	adds	r3, #1
 80043d4:	d102      	bne.n	80043dc <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	e024      	b.n	8004426 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4b15      	ldr	r3, [pc, #84]	@ (8004438 <xTaskCheckForTimeOut+0xa0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d007      	beq.n	80043f8 <xTaskCheckForTimeOut+0x60>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043f2:	2301      	movs	r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	e016      	b.n	8004426 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d20c      	bcs.n	800441c <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad2      	subs	r2, r2, r3
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	0018      	movs	r0, r3
 8004412:	f7ff ffad 	bl	8004370 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	e004      	b.n	8004426 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004422:	2301      	movs	r3, #1
 8004424:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004426:	f000 fd75 	bl	8004f14 <vPortExitCritical>

	return xReturn;
 800442a:	697b      	ldr	r3, [r7, #20]
}
 800442c:	0018      	movs	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	b006      	add	sp, #24
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20000d48 	.word	0x20000d48
 8004438:	20000d5c 	.word	0x20000d5c

0800443c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004440:	4b02      	ldr	r3, [pc, #8]	@ (800444c <vTaskMissedYield+0x10>)
 8004442:	2201      	movs	r2, #1
 8004444:	601a      	str	r2, [r3, #0]
}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000d58 	.word	0x20000d58

08004450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004458:	f000 f84e 	bl	80044f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800445c:	4b03      	ldr	r3, [pc, #12]	@ (800446c <prvIdleTask+0x1c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d9f9      	bls.n	8004458 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004464:	f000 fd34 	bl	8004ed0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004468:	e7f6      	b.n	8004458 <prvIdleTask+0x8>
 800446a:	46c0      	nop			@ (mov r8, r8)
 800446c:	20000874 	.word	0x20000874

08004470 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004476:	2300      	movs	r3, #0
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	e00c      	b.n	8004496 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	0013      	movs	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	189b      	adds	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4a14      	ldr	r2, [pc, #80]	@ (80044d8 <prvInitialiseTaskLists+0x68>)
 8004488:	189b      	adds	r3, r3, r2
 800448a:	0018      	movs	r0, r3
 800448c:	f7fe fe62 	bl	8003154 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3301      	adds	r3, #1
 8004494:	607b      	str	r3, [r7, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b37      	cmp	r3, #55	@ 0x37
 800449a:	d9ef      	bls.n	800447c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800449c:	4b0f      	ldr	r3, [pc, #60]	@ (80044dc <prvInitialiseTaskLists+0x6c>)
 800449e:	0018      	movs	r0, r3
 80044a0:	f7fe fe58 	bl	8003154 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044a4:	4b0e      	ldr	r3, [pc, #56]	@ (80044e0 <prvInitialiseTaskLists+0x70>)
 80044a6:	0018      	movs	r0, r3
 80044a8:	f7fe fe54 	bl	8003154 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044ac:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <prvInitialiseTaskLists+0x74>)
 80044ae:	0018      	movs	r0, r3
 80044b0:	f7fe fe50 	bl	8003154 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044b4:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <prvInitialiseTaskLists+0x78>)
 80044b6:	0018      	movs	r0, r3
 80044b8:	f7fe fe4c 	bl	8003154 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044bc:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <prvInitialiseTaskLists+0x7c>)
 80044be:	0018      	movs	r0, r3
 80044c0:	f7fe fe48 	bl	8003154 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044c4:	4b0a      	ldr	r3, [pc, #40]	@ (80044f0 <prvInitialiseTaskLists+0x80>)
 80044c6:	4a05      	ldr	r2, [pc, #20]	@ (80044dc <prvInitialiseTaskLists+0x6c>)
 80044c8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044ca:	4b0a      	ldr	r3, [pc, #40]	@ (80044f4 <prvInitialiseTaskLists+0x84>)
 80044cc:	4a04      	ldr	r2, [pc, #16]	@ (80044e0 <prvInitialiseTaskLists+0x70>)
 80044ce:	601a      	str	r2, [r3, #0]
}
 80044d0:	46c0      	nop			@ (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b002      	add	sp, #8
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20000874 	.word	0x20000874
 80044dc:	20000cd4 	.word	0x20000cd4
 80044e0:	20000ce8 	.word	0x20000ce8
 80044e4:	20000d04 	.word	0x20000d04
 80044e8:	20000d18 	.word	0x20000d18
 80044ec:	20000d30 	.word	0x20000d30
 80044f0:	20000cfc 	.word	0x20000cfc
 80044f4:	20000d00 	.word	0x20000d00

080044f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044fe:	e01a      	b.n	8004536 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004500:	f000 fcf6 	bl	8004ef0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004504:	4b10      	ldr	r3, [pc, #64]	@ (8004548 <prvCheckTasksWaitingTermination+0x50>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	0018      	movs	r0, r3
 8004512:	f7fe fea0 	bl	8003256 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004516:	4b0d      	ldr	r3, [pc, #52]	@ (800454c <prvCheckTasksWaitingTermination+0x54>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	1e5a      	subs	r2, r3, #1
 800451c:	4b0b      	ldr	r3, [pc, #44]	@ (800454c <prvCheckTasksWaitingTermination+0x54>)
 800451e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004520:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <prvCheckTasksWaitingTermination+0x58>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	1e5a      	subs	r2, r3, #1
 8004526:	4b0a      	ldr	r3, [pc, #40]	@ (8004550 <prvCheckTasksWaitingTermination+0x58>)
 8004528:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800452a:	f000 fcf3 	bl	8004f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f000 f80f 	bl	8004554 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004536:	4b06      	ldr	r3, [pc, #24]	@ (8004550 <prvCheckTasksWaitingTermination+0x58>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e0      	bne.n	8004500 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800453e:	46c0      	nop			@ (mov r8, r8)
 8004540:	46c0      	nop			@ (mov r8, r8)
 8004542:	46bd      	mov	sp, r7
 8004544:	b002      	add	sp, #8
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000d18 	.word	0x20000d18
 800454c:	20000d44 	.word	0x20000d44
 8004550:	20000d2c 	.word	0x20000d2c

08004554 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2259      	movs	r2, #89	@ 0x59
 8004560:	5c9b      	ldrb	r3, [r3, r2]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456a:	0018      	movs	r0, r3
 800456c:	f000 fe08 	bl	8005180 <vPortFree>
				vPortFree( pxTCB );
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	0018      	movs	r0, r3
 8004574:	f000 fe04 	bl	8005180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004578:	e011      	b.n	800459e <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2259      	movs	r2, #89	@ 0x59
 800457e:	5c9b      	ldrb	r3, [r3, r2]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d104      	bne.n	800458e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0018      	movs	r0, r3
 8004588:	f000 fdfa 	bl	8005180 <vPortFree>
	}
 800458c:	e007      	b.n	800459e <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2259      	movs	r2, #89	@ 0x59
 8004592:	5c9b      	ldrb	r3, [r3, r2]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d002      	beq.n	800459e <prvDeleteTCB+0x4a>
 8004598:	b672      	cpsid	i
 800459a:	46c0      	nop			@ (mov r8, r8)
 800459c:	e7fd      	b.n	800459a <prvDeleteTCB+0x46>
	}
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b002      	add	sp, #8
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ae:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <prvResetNextTaskUnblockTime+0x34>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d104      	bne.n	80045c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045b8:	4b09      	ldr	r3, [pc, #36]	@ (80045e0 <prvResetNextTaskUnblockTime+0x38>)
 80045ba:	2201      	movs	r2, #1
 80045bc:	4252      	negs	r2, r2
 80045be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045c0:	e008      	b.n	80045d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c2:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <prvResetNextTaskUnblockTime+0x34>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	4b03      	ldr	r3, [pc, #12]	@ (80045e0 <prvResetNextTaskUnblockTime+0x38>)
 80045d2:	601a      	str	r2, [r3, #0]
}
 80045d4:	46c0      	nop			@ (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b002      	add	sp, #8
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000cfc 	.word	0x20000cfc
 80045e0:	20000d64 	.word	0x20000d64

080045e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004614 <xTaskGetSchedulerState+0x30>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d102      	bne.n	80045f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045f2:	2301      	movs	r3, #1
 80045f4:	607b      	str	r3, [r7, #4]
 80045f6:	e008      	b.n	800460a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045f8:	4b07      	ldr	r3, [pc, #28]	@ (8004618 <xTaskGetSchedulerState+0x34>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004600:	2302      	movs	r3, #2
 8004602:	607b      	str	r3, [r7, #4]
 8004604:	e001      	b.n	800460a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004606:	2300      	movs	r3, #0
 8004608:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800460a:	687b      	ldr	r3, [r7, #4]
	}
 800460c:	0018      	movs	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	b002      	add	sp, #8
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20000d50 	.word	0x20000d50
 8004618:	20000d6c 	.word	0x20000d6c

0800461c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d046      	beq.n	80046c0 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004632:	4b26      	ldr	r3, [pc, #152]	@ (80046cc <xTaskPriorityDisinherit+0xb0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	429a      	cmp	r2, r3
 800463a:	d002      	beq.n	8004642 <xTaskPriorityDisinherit+0x26>
 800463c:	b672      	cpsid	i
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	e7fd      	b.n	800463e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <xTaskPriorityDisinherit+0x34>
 800464a:	b672      	cpsid	i
 800464c:	46c0      	nop			@ (mov r8, r8)
 800464e:	e7fd      	b.n	800464c <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004654:	1e5a      	subs	r2, r3, #1
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	429a      	cmp	r2, r3
 8004664:	d02c      	beq.n	80046c0 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466a:	2b00      	cmp	r3, #0
 800466c:	d128      	bne.n	80046c0 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	3304      	adds	r3, #4
 8004672:	0018      	movs	r0, r3
 8004674:	f7fe fdef 	bl	8003256 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	2238      	movs	r2, #56	@ 0x38
 8004686:	1ad2      	subs	r2, r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004690:	4b0f      	ldr	r3, [pc, #60]	@ (80046d0 <xTaskPriorityDisinherit+0xb4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d903      	bls.n	80046a0 <xTaskPriorityDisinherit+0x84>
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800469c:	4b0c      	ldr	r3, [pc, #48]	@ (80046d0 <xTaskPriorityDisinherit+0xb4>)
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a4:	0013      	movs	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	189b      	adds	r3, r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4a09      	ldr	r2, [pc, #36]	@ (80046d4 <xTaskPriorityDisinherit+0xb8>)
 80046ae:	189a      	adds	r2, r3, r2
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	3304      	adds	r3, #4
 80046b4:	0019      	movs	r1, r3
 80046b6:	0010      	movs	r0, r2
 80046b8:	f7fe fd75 	bl	80031a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046c0:	68fb      	ldr	r3, [r7, #12]
	}
 80046c2:	0018      	movs	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	b004      	add	sp, #16
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	46c0      	nop			@ (mov r8, r8)
 80046cc:	20000870 	.word	0x20000870
 80046d0:	20000d4c 	.word	0x20000d4c
 80046d4:	20000874 	.word	0x20000874

080046d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046e2:	4b21      	ldr	r3, [pc, #132]	@ (8004768 <prvAddCurrentTaskToDelayedList+0x90>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046e8:	4b20      	ldr	r3, [pc, #128]	@ (800476c <prvAddCurrentTaskToDelayedList+0x94>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3304      	adds	r3, #4
 80046ee:	0018      	movs	r0, r3
 80046f0:	f7fe fdb1 	bl	8003256 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3301      	adds	r3, #1
 80046f8:	d10b      	bne.n	8004712 <prvAddCurrentTaskToDelayedList+0x3a>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004700:	4b1a      	ldr	r3, [pc, #104]	@ (800476c <prvAddCurrentTaskToDelayedList+0x94>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	1d1a      	adds	r2, r3, #4
 8004706:	4b1a      	ldr	r3, [pc, #104]	@ (8004770 <prvAddCurrentTaskToDelayedList+0x98>)
 8004708:	0011      	movs	r1, r2
 800470a:	0018      	movs	r0, r3
 800470c:	f7fe fd4b 	bl	80031a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004710:	e026      	b.n	8004760 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	18d3      	adds	r3, r2, r3
 8004718:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800471a:	4b14      	ldr	r3, [pc, #80]	@ (800476c <prvAddCurrentTaskToDelayedList+0x94>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	429a      	cmp	r2, r3
 8004728:	d209      	bcs.n	800473e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800472a:	4b12      	ldr	r3, [pc, #72]	@ (8004774 <prvAddCurrentTaskToDelayedList+0x9c>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b0f      	ldr	r3, [pc, #60]	@ (800476c <prvAddCurrentTaskToDelayedList+0x94>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3304      	adds	r3, #4
 8004734:	0019      	movs	r1, r3
 8004736:	0010      	movs	r0, r2
 8004738:	f7fe fd57 	bl	80031ea <vListInsert>
}
 800473c:	e010      	b.n	8004760 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800473e:	4b0e      	ldr	r3, [pc, #56]	@ (8004778 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4b0a      	ldr	r3, [pc, #40]	@ (800476c <prvAddCurrentTaskToDelayedList+0x94>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3304      	adds	r3, #4
 8004748:	0019      	movs	r1, r3
 800474a:	0010      	movs	r0, r2
 800474c:	f7fe fd4d 	bl	80031ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004750:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	429a      	cmp	r2, r3
 8004758:	d202      	bcs.n	8004760 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800475a:	4b08      	ldr	r3, [pc, #32]	@ (800477c <prvAddCurrentTaskToDelayedList+0xa4>)
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	601a      	str	r2, [r3, #0]
}
 8004760:	46c0      	nop			@ (mov r8, r8)
 8004762:	46bd      	mov	sp, r7
 8004764:	b004      	add	sp, #16
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20000d48 	.word	0x20000d48
 800476c:	20000870 	.word	0x20000870
 8004770:	20000d30 	.word	0x20000d30
 8004774:	20000d00 	.word	0x20000d00
 8004778:	20000cfc 	.word	0x20000cfc
 800477c:	20000d64 	.word	0x20000d64

08004780 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004780:	b590      	push	{r4, r7, lr}
 8004782:	b089      	sub	sp, #36	@ 0x24
 8004784:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800478a:	f000 fad5 	bl	8004d38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800478e:	4b18      	ldr	r3, [pc, #96]	@ (80047f0 <xTimerCreateTimerTask+0x70>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d020      	beq.n	80047d8 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004796:	2300      	movs	r3, #0
 8004798:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800479e:	003a      	movs	r2, r7
 80047a0:	1d39      	adds	r1, r7, #4
 80047a2:	2308      	movs	r3, #8
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7fe fcbc 	bl	8003124 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047ac:	683c      	ldr	r4, [r7, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	4910      	ldr	r1, [pc, #64]	@ (80047f4 <xTimerCreateTimerTask+0x74>)
 80047b4:	4810      	ldr	r0, [pc, #64]	@ (80047f8 <xTimerCreateTimerTask+0x78>)
 80047b6:	9202      	str	r2, [sp, #8]
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	2302      	movs	r3, #2
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	2300      	movs	r3, #0
 80047c0:	0022      	movs	r2, r4
 80047c2:	f7ff f9ac 	bl	8003b1e <xTaskCreateStatic>
 80047c6:	0002      	movs	r2, r0
 80047c8:	4b0c      	ldr	r3, [pc, #48]	@ (80047fc <xTimerCreateTimerTask+0x7c>)
 80047ca:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80047cc:	4b0b      	ldr	r3, [pc, #44]	@ (80047fc <xTimerCreateTimerTask+0x7c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80047d4:	2301      	movs	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d102      	bne.n	80047e4 <xTimerCreateTimerTask+0x64>
 80047de:	b672      	cpsid	i
 80047e0:	46c0      	nop			@ (mov r8, r8)
 80047e2:	e7fd      	b.n	80047e0 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80047e4:	68fb      	ldr	r3, [r7, #12]
}
 80047e6:	0018      	movs	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b005      	add	sp, #20
 80047ec:	bd90      	pop	{r4, r7, pc}
 80047ee:	46c0      	nop			@ (mov r8, r8)
 80047f0:	20000da0 	.word	0x20000da0
 80047f4:	080064f8 	.word	0x080064f8
 80047f8:	08004925 	.word	0x08004925
 80047fc:	20000da4 	.word	0x20000da4

08004800 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004800:	b590      	push	{r4, r7, lr}
 8004802:	b08b      	sub	sp, #44	@ 0x2c
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800480e:	2300      	movs	r3, #0
 8004810:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <xTimerGenericCommand+0x1e>
 8004818:	b672      	cpsid	i
 800481a:	46c0      	nop			@ (mov r8, r8)
 800481c:	e7fd      	b.n	800481a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800481e:	4b1d      	ldr	r3, [pc, #116]	@ (8004894 <xTimerGenericCommand+0x94>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d030      	beq.n	8004888 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004826:	2414      	movs	r4, #20
 8004828:	193b      	adds	r3, r7, r4
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800482e:	193b      	adds	r3, r7, r4
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004834:	193b      	adds	r3, r7, r4
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b05      	cmp	r3, #5
 800483e:	dc19      	bgt.n	8004874 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004840:	f7ff fed0 	bl	80045e4 <xTaskGetSchedulerState>
 8004844:	0003      	movs	r3, r0
 8004846:	2b02      	cmp	r3, #2
 8004848:	d109      	bne.n	800485e <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800484a:	4b12      	ldr	r3, [pc, #72]	@ (8004894 <xTimerGenericCommand+0x94>)
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004850:	1939      	adds	r1, r7, r4
 8004852:	2300      	movs	r3, #0
 8004854:	f7fe fdf4 	bl	8003440 <xQueueGenericSend>
 8004858:	0003      	movs	r3, r0
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24
 800485c:	e014      	b.n	8004888 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800485e:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <xTimerGenericCommand+0x94>)
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	2314      	movs	r3, #20
 8004864:	18f9      	adds	r1, r7, r3
 8004866:	2300      	movs	r3, #0
 8004868:	2200      	movs	r2, #0
 800486a:	f7fe fde9 	bl	8003440 <xQueueGenericSend>
 800486e:	0003      	movs	r3, r0
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
 8004872:	e009      	b.n	8004888 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004874:	4b07      	ldr	r3, [pc, #28]	@ (8004894 <xTimerGenericCommand+0x94>)
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	2314      	movs	r3, #20
 800487c:	18f9      	adds	r1, r7, r3
 800487e:	2300      	movs	r3, #0
 8004880:	f7fe fea6 	bl	80035d0 <xQueueGenericSendFromISR>
 8004884:	0003      	movs	r3, r0
 8004886:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800488a:	0018      	movs	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	b00b      	add	sp, #44	@ 0x2c
 8004890:	bd90      	pop	{r4, r7, pc}
 8004892:	46c0      	nop			@ (mov r8, r8)
 8004894:	20000da0 	.word	0x20000da0

08004898 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004920 <prvProcessExpiredTimer+0x88>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3304      	adds	r3, #4
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7fe fcd0 	bl	8003256 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2228      	movs	r2, #40	@ 0x28
 80048ba:	5c9b      	ldrb	r3, [r3, r2]
 80048bc:	001a      	movs	r2, r3
 80048be:	2304      	movs	r3, #4
 80048c0:	4013      	ands	r3, r2
 80048c2:	d01a      	beq.n	80048fa <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	699a      	ldr	r2, [r3, #24]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	18d1      	adds	r1, r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f8c7 	bl	8004a64 <prvInsertTimerInActiveList>
 80048d6:	1e03      	subs	r3, r0, #0
 80048d8:	d018      	beq.n	800490c <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	2300      	movs	r3, #0
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	2300      	movs	r3, #0
 80048e4:	2100      	movs	r1, #0
 80048e6:	f7ff ff8b 	bl	8004800 <xTimerGenericCommand>
 80048ea:	0003      	movs	r3, r0
 80048ec:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10b      	bne.n	800490c <prvProcessExpiredTimer+0x74>
 80048f4:	b672      	cpsid	i
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	e7fd      	b.n	80048f6 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2228      	movs	r2, #40	@ 0x28
 80048fe:	5c9b      	ldrb	r3, [r3, r2]
 8004900:	2201      	movs	r2, #1
 8004902:	4393      	bics	r3, r2
 8004904:	b2d9      	uxtb	r1, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2228      	movs	r2, #40	@ 0x28
 800490a:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	0010      	movs	r0, r2
 8004914:	4798      	blx	r3
}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	46bd      	mov	sp, r7
 800491a:	b004      	add	sp, #16
 800491c:	bd80      	pop	{r7, pc}
 800491e:	46c0      	nop			@ (mov r8, r8)
 8004920:	20000d98 	.word	0x20000d98

08004924 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800492c:	2308      	movs	r3, #8
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	0018      	movs	r0, r3
 8004932:	f000 f855 	bl	80049e0 <prvGetNextExpireTime>
 8004936:	0003      	movs	r3, r0
 8004938:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	0011      	movs	r1, r2
 8004940:	0018      	movs	r0, r3
 8004942:	f000 f805 	bl	8004950 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004946:	f000 f8cf 	bl	8004ae8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800494a:	46c0      	nop			@ (mov r8, r8)
 800494c:	e7ee      	b.n	800492c <prvTimerTask+0x8>
	...

08004950 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800495a:	f7ff fabb 	bl	8003ed4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800495e:	2308      	movs	r3, #8
 8004960:	18fb      	adds	r3, r7, r3
 8004962:	0018      	movs	r0, r3
 8004964:	f000 f85e 	bl	8004a24 <prvSampleTimeNow>
 8004968:	0003      	movs	r3, r0
 800496a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d12b      	bne.n	80049ca <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10c      	bne.n	8004992 <prvProcessTimerOrBlockTask+0x42>
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	429a      	cmp	r2, r3
 800497e:	d808      	bhi.n	8004992 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8004980:	f7ff fab4 	bl	8003eec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	0011      	movs	r1, r2
 800498a:	0018      	movs	r0, r3
 800498c:	f7ff ff84 	bl	8004898 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004990:	e01d      	b.n	80049ce <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004998:	4b0f      	ldr	r3, [pc, #60]	@ (80049d8 <prvProcessTimerOrBlockTask+0x88>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <prvProcessTimerOrBlockTask+0x56>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <prvProcessTimerOrBlockTask+0x58>
 80049a6:	2300      	movs	r3, #0
 80049a8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049aa:	4b0c      	ldr	r3, [pc, #48]	@ (80049dc <prvProcessTimerOrBlockTask+0x8c>)
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	0019      	movs	r1, r3
 80049b8:	f7ff f87e 	bl	8003ab8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049bc:	f7ff fa96 	bl	8003eec <xTaskResumeAll>
 80049c0:	1e03      	subs	r3, r0, #0
 80049c2:	d104      	bne.n	80049ce <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 80049c4:	f000 fa84 	bl	8004ed0 <vPortYield>
}
 80049c8:	e001      	b.n	80049ce <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 80049ca:	f7ff fa8f 	bl	8003eec <xTaskResumeAll>
}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b004      	add	sp, #16
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	20000d9c 	.word	0x20000d9c
 80049dc:	20000da0 	.word	0x20000da0

080049e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004a20 <prvGetNextExpireTime+0x40>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <prvGetNextExpireTime+0x16>
 80049f2:	2201      	movs	r2, #1
 80049f4:	e000      	b.n	80049f8 <prvGetNextExpireTime+0x18>
 80049f6:	2200      	movs	r2, #0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d105      	bne.n	8004a10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a04:	4b06      	ldr	r3, [pc, #24]	@ (8004a20 <prvGetNextExpireTime+0x40>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	e001      	b.n	8004a14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a14:	68fb      	ldr	r3, [r7, #12]
}
 8004a16:	0018      	movs	r0, r3
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	b004      	add	sp, #16
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	46c0      	nop			@ (mov r8, r8)
 8004a20:	20000d98 	.word	0x20000d98

08004a24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a2c:	f7ff faea 	bl	8004004 <xTaskGetTickCount>
 8004a30:	0003      	movs	r3, r0
 8004a32:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a34:	4b0a      	ldr	r3, [pc, #40]	@ (8004a60 <prvSampleTimeNow+0x3c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d205      	bcs.n	8004a4a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8004a3e:	f000 f91d 	bl	8004c7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	e002      	b.n	8004a50 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a50:	4b03      	ldr	r3, [pc, #12]	@ (8004a60 <prvSampleTimeNow+0x3c>)
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8004a56:	68fb      	ldr	r3, [r7, #12]
}
 8004a58:	0018      	movs	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b004      	add	sp, #16
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	20000da8 	.word	0x20000da8

08004a64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d812      	bhi.n	8004ab0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	1ad2      	subs	r2, r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d302      	bcc.n	8004a9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e01b      	b.n	8004ad6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ae0 <prvInsertTimerInActiveList+0x7c>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	0019      	movs	r1, r3
 8004aa8:	0010      	movs	r0, r2
 8004aaa:	f7fe fb9e 	bl	80031ea <vListInsert>
 8004aae:	e012      	b.n	8004ad6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d206      	bcs.n	8004ac6 <prvInsertTimerInActiveList+0x62>
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d302      	bcc.n	8004ac6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e007      	b.n	8004ad6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ac6:	4b07      	ldr	r3, [pc, #28]	@ (8004ae4 <prvInsertTimerInActiveList+0x80>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3304      	adds	r3, #4
 8004ace:	0019      	movs	r1, r3
 8004ad0:	0010      	movs	r0, r2
 8004ad2:	f7fe fb8a 	bl	80031ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ad6:	697b      	ldr	r3, [r7, #20]
}
 8004ad8:	0018      	movs	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b006      	add	sp, #24
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000d9c 	.word	0x20000d9c
 8004ae4:	20000d98 	.word	0x20000d98

08004ae8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ae8:	b590      	push	{r4, r7, lr}
 8004aea:	b08d      	sub	sp, #52	@ 0x34
 8004aec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004aee:	e0b1      	b.n	8004c54 <prvProcessReceivedCommands+0x16c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004af0:	2208      	movs	r2, #8
 8004af2:	18bb      	adds	r3, r7, r2
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	da10      	bge.n	8004b1c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004afa:	18bb      	adds	r3, r7, r2
 8004afc:	3304      	adds	r3, #4
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <prvProcessReceivedCommands+0x24>
 8004b06:	b672      	cpsid	i
 8004b08:	46c0      	nop			@ (mov r8, r8)
 8004b0a:	e7fd      	b.n	8004b08 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b12:	6858      	ldr	r0, [r3, #4]
 8004b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	0019      	movs	r1, r3
 8004b1a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	18bb      	adds	r3, r7, r2
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	da00      	bge.n	8004b28 <prvProcessReceivedCommands+0x40>
 8004b26:	e095      	b.n	8004c54 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b28:	18bb      	adds	r3, r7, r2
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d004      	beq.n	8004b40 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f7fe fb8b 	bl	8003256 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7ff ff6e 	bl	8004a24 <prvSampleTimeNow>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	18fb      	adds	r3, r7, r3
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b09      	cmp	r3, #9
 8004b54:	d900      	bls.n	8004b58 <prvProcessReceivedCommands+0x70>
 8004b56:	e07a      	b.n	8004c4e <prvProcessReceivedCommands+0x166>
 8004b58:	009a      	lsls	r2, r3, #2
 8004b5a:	4b46      	ldr	r3, [pc, #280]	@ (8004c74 <prvProcessReceivedCommands+0x18c>)
 8004b5c:	18d3      	adds	r3, r2, r3
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	2228      	movs	r2, #40	@ 0x28
 8004b66:	5c9b      	ldrb	r3, [r3, r2]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	b2d9      	uxtb	r1, r3
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	2228      	movs	r2, #40	@ 0x28
 8004b72:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b74:	2408      	movs	r4, #8
 8004b76:	193b      	adds	r3, r7, r4
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	18d1      	adds	r1, r2, r3
 8004b80:	193b      	adds	r3, r7, r4
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	6a38      	ldr	r0, [r7, #32]
 8004b88:	f7ff ff6c 	bl	8004a64 <prvInsertTimerInActiveList>
 8004b8c:	1e03      	subs	r3, r0, #0
 8004b8e:	d060      	beq.n	8004c52 <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	6a3a      	ldr	r2, [r7, #32]
 8004b96:	0010      	movs	r0, r2
 8004b98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	2228      	movs	r2, #40	@ 0x28
 8004b9e:	5c9b      	ldrb	r3, [r3, r2]
 8004ba0:	001a      	movs	r2, r3
 8004ba2:	2304      	movs	r3, #4
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d054      	beq.n	8004c52 <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ba8:	193b      	adds	r3, r7, r4
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	18d2      	adds	r2, r2, r3
 8004bb2:	6a38      	ldr	r0, [r7, #32]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	2100      	movs	r1, #0
 8004bbc:	f7ff fe20 	bl	8004800 <xTimerGenericCommand>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d143      	bne.n	8004c52 <prvProcessReceivedCommands+0x16a>
 8004bca:	b672      	cpsid	i
 8004bcc:	46c0      	nop			@ (mov r8, r8)
 8004bce:	e7fd      	b.n	8004bcc <prvProcessReceivedCommands+0xe4>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	2228      	movs	r2, #40	@ 0x28
 8004bd4:	5c9b      	ldrb	r3, [r3, r2]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	4393      	bics	r3, r2
 8004bda:	b2d9      	uxtb	r1, r3
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	2228      	movs	r2, #40	@ 0x28
 8004be0:	5499      	strb	r1, [r3, r2]
					break;
 8004be2:	e037      	b.n	8004c54 <prvProcessReceivedCommands+0x16c>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	2228      	movs	r2, #40	@ 0x28
 8004be8:	5c9b      	ldrb	r3, [r3, r2]
 8004bea:	2201      	movs	r2, #1
 8004bec:	4313      	orrs	r3, r2
 8004bee:	b2d9      	uxtb	r1, r3
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	2228      	movs	r2, #40	@ 0x28
 8004bf4:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bf6:	2308      	movs	r3, #8
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d102      	bne.n	8004c0e <prvProcessReceivedCommands+0x126>
 8004c08:	b672      	cpsid	i
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	e7fd      	b.n	8004c0a <prvProcessReceivedCommands+0x122>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	699a      	ldr	r2, [r3, #24]
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	18d1      	adds	r1, r2, r3
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	6a38      	ldr	r0, [r7, #32]
 8004c1c:	f7ff ff22 	bl	8004a64 <prvInsertTimerInActiveList>
					break;
 8004c20:	e018      	b.n	8004c54 <prvProcessReceivedCommands+0x16c>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	2228      	movs	r2, #40	@ 0x28
 8004c26:	5c9b      	ldrb	r3, [r3, r2]
 8004c28:	001a      	movs	r2, r3
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d104      	bne.n	8004c3a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 faa4 	bl	8005180 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c38:	e00c      	b.n	8004c54 <prvProcessReceivedCommands+0x16c>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	2228      	movs	r2, #40	@ 0x28
 8004c3e:	5c9b      	ldrb	r3, [r3, r2]
 8004c40:	2201      	movs	r2, #1
 8004c42:	4393      	bics	r3, r2
 8004c44:	b2d9      	uxtb	r1, r3
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	2228      	movs	r2, #40	@ 0x28
 8004c4a:	5499      	strb	r1, [r3, r2]
					break;
 8004c4c:	e002      	b.n	8004c54 <prvProcessReceivedCommands+0x16c>

				default	:
					/* Don't expect to get here. */
					break;
 8004c4e:	46c0      	nop			@ (mov r8, r8)
 8004c50:	e000      	b.n	8004c54 <prvProcessReceivedCommands+0x16c>
					break;
 8004c52:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c54:	4b08      	ldr	r3, [pc, #32]	@ (8004c78 <prvProcessReceivedCommands+0x190>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2208      	movs	r2, #8
 8004c5a:	18b9      	adds	r1, r7, r2
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f7fe fd2d 	bl	80036be <xQueueReceive>
 8004c64:	1e03      	subs	r3, r0, #0
 8004c66:	d000      	beq.n	8004c6a <prvProcessReceivedCommands+0x182>
 8004c68:	e742      	b.n	8004af0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004c6a:	46c0      	nop			@ (mov r8, r8)
 8004c6c:	46c0      	nop			@ (mov r8, r8)
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b00b      	add	sp, #44	@ 0x2c
 8004c72:	bd90      	pop	{r4, r7, pc}
 8004c74:	08006590 	.word	0x08006590
 8004c78:	20000da0 	.word	0x20000da0

08004c7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c82:	e042      	b.n	8004d0a <prvSwitchTimerLists+0x8e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c84:	4b2a      	ldr	r3, [pc, #168]	@ (8004d30 <prvSwitchTimerLists+0xb4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c8e:	4b28      	ldr	r3, [pc, #160]	@ (8004d30 <prvSwitchTimerLists+0xb4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f7fe fada 	bl	8003256 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	0010      	movs	r0, r2
 8004caa:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2228      	movs	r2, #40	@ 0x28
 8004cb0:	5c9b      	ldrb	r3, [r3, r2]
 8004cb2:	001a      	movs	r2, r3
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d027      	beq.n	8004d0a <prvSwitchTimerLists+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	18d3      	adds	r3, r2, r3
 8004cc2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d90e      	bls.n	8004cea <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cd8:	4b15      	ldr	r3, [pc, #84]	@ (8004d30 <prvSwitchTimerLists+0xb4>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	0019      	movs	r1, r3
 8004ce2:	0010      	movs	r0, r2
 8004ce4:	f7fe fa81 	bl	80031ea <vListInsert>
 8004ce8:	e00f      	b.n	8004d0a <prvSwitchTimerLists+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	f7ff fd83 	bl	8004800 <xTimerGenericCommand>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d102      	bne.n	8004d0a <prvSwitchTimerLists+0x8e>
 8004d04:	b672      	cpsid	i
 8004d06:	46c0      	nop			@ (mov r8, r8)
 8004d08:	e7fd      	b.n	8004d06 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d0a:	4b09      	ldr	r3, [pc, #36]	@ (8004d30 <prvSwitchTimerLists+0xb4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1b7      	bne.n	8004c84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d14:	4b06      	ldr	r3, [pc, #24]	@ (8004d30 <prvSwitchTimerLists+0xb4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d1a:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <prvSwitchTimerLists+0xb8>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b04      	ldr	r3, [pc, #16]	@ (8004d30 <prvSwitchTimerLists+0xb4>)
 8004d20:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8004d22:	4b04      	ldr	r3, [pc, #16]	@ (8004d34 <prvSwitchTimerLists+0xb8>)
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	601a      	str	r2, [r3, #0]
}
 8004d28:	46c0      	nop			@ (mov r8, r8)
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b006      	add	sp, #24
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	20000d98 	.word	0x20000d98
 8004d34:	20000d9c 	.word	0x20000d9c

08004d38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d3e:	f000 f8d7 	bl	8004ef0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d42:	4b16      	ldr	r3, [pc, #88]	@ (8004d9c <prvCheckForValidListAndQueue+0x64>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d123      	bne.n	8004d92 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d4a:	4b15      	ldr	r3, [pc, #84]	@ (8004da0 <prvCheckForValidListAndQueue+0x68>)
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f7fe fa01 	bl	8003154 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d52:	4b14      	ldr	r3, [pc, #80]	@ (8004da4 <prvCheckForValidListAndQueue+0x6c>)
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7fe f9fd 	bl	8003154 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d5a:	4b13      	ldr	r3, [pc, #76]	@ (8004da8 <prvCheckForValidListAndQueue+0x70>)
 8004d5c:	4a10      	ldr	r2, [pc, #64]	@ (8004da0 <prvCheckForValidListAndQueue+0x68>)
 8004d5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d60:	4b12      	ldr	r3, [pc, #72]	@ (8004dac <prvCheckForValidListAndQueue+0x74>)
 8004d62:	4a10      	ldr	r2, [pc, #64]	@ (8004da4 <prvCheckForValidListAndQueue+0x6c>)
 8004d64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d66:	4b12      	ldr	r3, [pc, #72]	@ (8004db0 <prvCheckForValidListAndQueue+0x78>)
 8004d68:	4a12      	ldr	r2, [pc, #72]	@ (8004db4 <prvCheckForValidListAndQueue+0x7c>)
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	9100      	str	r1, [sp, #0]
 8004d6e:	2110      	movs	r1, #16
 8004d70:	200a      	movs	r0, #10
 8004d72:	f7fe faed 	bl	8003350 <xQueueGenericCreateStatic>
 8004d76:	0002      	movs	r2, r0
 8004d78:	4b08      	ldr	r3, [pc, #32]	@ (8004d9c <prvCheckForValidListAndQueue+0x64>)
 8004d7a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d7c:	4b07      	ldr	r3, [pc, #28]	@ (8004d9c <prvCheckForValidListAndQueue+0x64>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d006      	beq.n	8004d92 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d84:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <prvCheckForValidListAndQueue+0x64>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a0b      	ldr	r2, [pc, #44]	@ (8004db8 <prvCheckForValidListAndQueue+0x80>)
 8004d8a:	0011      	movs	r1, r2
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f7fe fe6b 	bl	8003a68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d92:	f000 f8bf 	bl	8004f14 <vPortExitCritical>
}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20000da0 	.word	0x20000da0
 8004da0:	20000d70 	.word	0x20000d70
 8004da4:	20000d84 	.word	0x20000d84
 8004da8:	20000d98 	.word	0x20000d98
 8004dac:	20000d9c 	.word	0x20000d9c
 8004db0:	20000e4c 	.word	0x20000e4c
 8004db4:	20000dac 	.word	0x20000dac
 8004db8:	08006500 	.word	0x08006500

08004dbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3b04      	subs	r3, #4
 8004dcc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2280      	movs	r2, #128	@ 0x80
 8004dd2:	0452      	lsls	r2, r2, #17
 8004dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3b04      	subs	r3, #4
 8004dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3b04      	subs	r3, #4
 8004de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004de8:	4a08      	ldr	r2, [pc, #32]	@ (8004e0c <pxPortInitialiseStack+0x50>)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3b14      	subs	r3, #20
 8004df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3b20      	subs	r3, #32
 8004dfe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e00:	68fb      	ldr	r3, [r7, #12]
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b004      	add	sp, #16
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	08004e11 	.word	0x08004e11

08004e10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e1a:	4b08      	ldr	r3, [pc, #32]	@ (8004e3c <prvTaskExitError+0x2c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	d002      	beq.n	8004e28 <prvTaskExitError+0x18>
 8004e22:	b672      	cpsid	i
 8004e24:	46c0      	nop			@ (mov r8, r8)
 8004e26:	e7fd      	b.n	8004e24 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004e28:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004e2a:	46c0      	nop			@ (mov r8, r8)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0fc      	beq.n	8004e2c <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e32:	46c0      	nop			@ (mov r8, r8)
 8004e34:	46c0      	nop			@ (mov r8, r8)
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b002      	add	sp, #8
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	2000000c 	.word	0x2000000c

08004e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004e44:	46c0      	nop			@ (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	0000      	movs	r0, r0
 8004e4c:	0000      	movs	r0, r0
	...

08004e50 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004e50:	4a0b      	ldr	r2, [pc, #44]	@ (8004e80 <pxCurrentTCBConst2>)
 8004e52:	6813      	ldr	r3, [r2, #0]
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	3020      	adds	r0, #32
 8004e58:	f380 8809 	msr	PSP, r0
 8004e5c:	2002      	movs	r0, #2
 8004e5e:	f380 8814 	msr	CONTROL, r0
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004e68:	46ae      	mov	lr, r5
 8004e6a:	bc08      	pop	{r3}
 8004e6c:	bc04      	pop	{r2}
 8004e6e:	b662      	cpsie	i
 8004e70:	4718      	bx	r3
 8004e72:	46c0      	nop			@ (mov r8, r8)
 8004e74:	46c0      	nop			@ (mov r8, r8)
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	46c0      	nop			@ (mov r8, r8)
 8004e7a:	46c0      	nop			@ (mov r8, r8)
 8004e7c:	46c0      	nop			@ (mov r8, r8)
 8004e7e:	46c0      	nop			@ (mov r8, r8)

08004e80 <pxCurrentTCBConst2>:
 8004e80:	20000870 	.word	0x20000870
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004e84:	46c0      	nop			@ (mov r8, r8)
 8004e86:	46c0      	nop			@ (mov r8, r8)

08004e88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec8 <xPortStartScheduler+0x40>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec8 <xPortStartScheduler+0x40>)
 8004e92:	21ff      	movs	r1, #255	@ 0xff
 8004e94:	0409      	lsls	r1, r1, #16
 8004e96:	430a      	orrs	r2, r1
 8004e98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <xPortStartScheduler+0x40>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec8 <xPortStartScheduler+0x40>)
 8004ea0:	21ff      	movs	r1, #255	@ 0xff
 8004ea2:	0609      	lsls	r1, r1, #24
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ea8:	f000 f898 	bl	8004fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004eac:	4b07      	ldr	r3, [pc, #28]	@ (8004ecc <xPortStartScheduler+0x44>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004eb2:	f7ff ffcd 	bl	8004e50 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004eb6:	f7ff f963 	bl	8004180 <vTaskSwitchContext>
	prvTaskExitError();
 8004eba:	f7ff ffa9 	bl	8004e10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	46c0      	nop			@ (mov r8, r8)
 8004ec8:	e000ed20 	.word	0xe000ed20
 8004ecc:	2000000c 	.word	0x2000000c

08004ed0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ed4:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <vPortYield+0x1c>)
 8004ed6:	2280      	movs	r2, #128	@ 0x80
 8004ed8:	0552      	lsls	r2, r2, #21
 8004eda:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8004edc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004ee0:	f3bf 8f6f 	isb	sy
}
 8004ee4:	46c0      	nop			@ (mov r8, r8)
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	46c0      	nop			@ (mov r8, r8)
 8004eec:	e000ed04 	.word	0xe000ed04

08004ef0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8004ef4:	b672      	cpsid	i
	uxCriticalNesting++;
 8004ef6:	4b06      	ldr	r3, [pc, #24]	@ (8004f10 <vPortEnterCritical+0x20>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	4b04      	ldr	r3, [pc, #16]	@ (8004f10 <vPortEnterCritical+0x20>)
 8004efe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004f00:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004f04:	f3bf 8f6f 	isb	sy
}
 8004f08:	46c0      	nop			@ (mov r8, r8)
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	2000000c 	.word	0x2000000c

08004f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f18:	4b09      	ldr	r3, [pc, #36]	@ (8004f40 <vPortExitCritical+0x2c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <vPortExitCritical+0x12>
 8004f20:	b672      	cpsid	i
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	e7fd      	b.n	8004f22 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8004f26:	4b06      	ldr	r3, [pc, #24]	@ (8004f40 <vPortExitCritical+0x2c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	1e5a      	subs	r2, r3, #1
 8004f2c:	4b04      	ldr	r3, [pc, #16]	@ (8004f40 <vPortExitCritical+0x2c>)
 8004f2e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8004f30:	4b03      	ldr	r3, [pc, #12]	@ (8004f40 <vPortExitCritical+0x2c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d100      	bne.n	8004f3a <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 8004f38:	b662      	cpsie	i
	}
}
 8004f3a:	46c0      	nop			@ (mov r8, r8)
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	2000000c 	.word	0x2000000c

08004f44 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004f44:	f3ef 8010 	mrs	r0, PRIMASK
 8004f48:	b672      	cpsid	i
 8004f4a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8004f4c:	46c0      	nop			@ (mov r8, r8)
 8004f4e:	0018      	movs	r0, r3

08004f50 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004f50:	f380 8810 	msr	PRIMASK, r0
 8004f54:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8004f56:	46c0      	nop			@ (mov r8, r8)
	...

08004f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f60:	f3ef 8009 	mrs	r0, PSP
 8004f64:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa0 <pxCurrentTCBConst>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	3820      	subs	r0, #32
 8004f6a:	6010      	str	r0, [r2, #0]
 8004f6c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004f6e:	4644      	mov	r4, r8
 8004f70:	464d      	mov	r5, r9
 8004f72:	4656      	mov	r6, sl
 8004f74:	465f      	mov	r7, fp
 8004f76:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004f78:	b508      	push	{r3, lr}
 8004f7a:	b672      	cpsid	i
 8004f7c:	f7ff f900 	bl	8004180 <vTaskSwitchContext>
 8004f80:	b662      	cpsie	i
 8004f82:	bc0c      	pop	{r2, r3}
 8004f84:	6811      	ldr	r1, [r2, #0]
 8004f86:	6808      	ldr	r0, [r1, #0]
 8004f88:	3010      	adds	r0, #16
 8004f8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004f8c:	46a0      	mov	r8, r4
 8004f8e:	46a9      	mov	r9, r5
 8004f90:	46b2      	mov	sl, r6
 8004f92:	46bb      	mov	fp, r7
 8004f94:	f380 8809 	msr	PSP, r0
 8004f98:	3820      	subs	r0, #32
 8004f9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004f9c:	4718      	bx	r3
 8004f9e:	46c0      	nop			@ (mov r8, r8)

08004fa0 <pxCurrentTCBConst>:
 8004fa0:	20000870 	.word	0x20000870
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004fa4:	46c0      	nop			@ (mov r8, r8)
 8004fa6:	46c0      	nop			@ (mov r8, r8)

08004fa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fae:	f7ff ffc9 	bl	8004f44 <ulSetInterruptMaskFromISR>
 8004fb2:	0003      	movs	r3, r0
 8004fb4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fb6:	f7ff f833 	bl	8004020 <xTaskIncrementTick>
 8004fba:	1e03      	subs	r3, r0, #0
 8004fbc:	d003      	beq.n	8004fc6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fbe:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <xPortSysTickHandler+0x30>)
 8004fc0:	2280      	movs	r2, #128	@ 0x80
 8004fc2:	0552      	lsls	r2, r2, #21
 8004fc4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	0018      	movs	r0, r3
 8004fca:	f7ff ffc1 	bl	8004f50 <vClearInterruptMaskFromISR>
}
 8004fce:	46c0      	nop			@ (mov r8, r8)
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	b002      	add	sp, #8
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	46c0      	nop			@ (mov r8, r8)
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <vPortSetupTimerInterrupt+0x34>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8005014 <vPortSetupTimerInterrupt+0x38>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fec:	4b0a      	ldr	r3, [pc, #40]	@ (8005018 <vPortSetupTimerInterrupt+0x3c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	22fa      	movs	r2, #250	@ 0xfa
 8004ff2:	0091      	lsls	r1, r2, #2
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f7fb f891 	bl	800011c <__udivsi3>
 8004ffa:	0003      	movs	r3, r0
 8004ffc:	001a      	movs	r2, r3
 8004ffe:	4b07      	ldr	r3, [pc, #28]	@ (800501c <vPortSetupTimerInterrupt+0x40>)
 8005000:	3a01      	subs	r2, #1
 8005002:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8005004:	4b02      	ldr	r3, [pc, #8]	@ (8005010 <vPortSetupTimerInterrupt+0x34>)
 8005006:	2207      	movs	r2, #7
 8005008:	601a      	str	r2, [r3, #0]
}
 800500a:	46c0      	nop			@ (mov r8, r8)
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	e000e010 	.word	0xe000e010
 8005014:	e000e018 	.word	0xe000e018
 8005018:	20000000 	.word	0x20000000
 800501c:	e000e014 	.word	0xe000e014

08005020 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800502c:	f7fe ff52 	bl	8003ed4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005030:	4b4d      	ldr	r3, [pc, #308]	@ (8005168 <pvPortMalloc+0x148>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005038:	f000 f8f2 	bl	8005220 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800503c:	4b4b      	ldr	r3, [pc, #300]	@ (800516c <pvPortMalloc+0x14c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	4013      	ands	r3, r2
 8005044:	d000      	beq.n	8005048 <pvPortMalloc+0x28>
 8005046:	e080      	b.n	800514a <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d013      	beq.n	8005076 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800504e:	2208      	movs	r2, #8
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	189b      	adds	r3, r3, r2
 8005054:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2207      	movs	r2, #7
 800505a:	4013      	ands	r3, r2
 800505c:	d00b      	beq.n	8005076 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2207      	movs	r2, #7
 8005062:	4393      	bics	r3, r2
 8005064:	3308      	adds	r3, #8
 8005066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2207      	movs	r2, #7
 800506c:	4013      	ands	r3, r2
 800506e:	d002      	beq.n	8005076 <pvPortMalloc+0x56>
 8005070:	b672      	cpsid	i
 8005072:	46c0      	nop			@ (mov r8, r8)
 8005074:	e7fd      	b.n	8005072 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d066      	beq.n	800514a <pvPortMalloc+0x12a>
 800507c:	4b3c      	ldr	r3, [pc, #240]	@ (8005170 <pvPortMalloc+0x150>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	429a      	cmp	r2, r3
 8005084:	d861      	bhi.n	800514a <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005086:	4b3b      	ldr	r3, [pc, #236]	@ (8005174 <pvPortMalloc+0x154>)
 8005088:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800508a:	4b3a      	ldr	r3, [pc, #232]	@ (8005174 <pvPortMalloc+0x154>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005090:	e004      	b.n	800509c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d903      	bls.n	80050ae <pvPortMalloc+0x8e>
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f1      	bne.n	8005092 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050ae:	4b2e      	ldr	r3, [pc, #184]	@ (8005168 <pvPortMalloc+0x148>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d048      	beq.n	800514a <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2208      	movs	r2, #8
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	1ad2      	subs	r2, r2, r3
 80050d2:	2308      	movs	r3, #8
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d917      	bls.n	800510a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	18d3      	adds	r3, r2, r3
 80050e0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2207      	movs	r2, #7
 80050e6:	4013      	ands	r3, r2
 80050e8:	d002      	beq.n	80050f0 <pvPortMalloc+0xd0>
 80050ea:	b672      	cpsid	i
 80050ec:	46c0      	nop			@ (mov r8, r8)
 80050ee:	e7fd      	b.n	80050ec <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	1ad2      	subs	r2, r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	0018      	movs	r0, r3
 8005106:	f000 f8eb 	bl	80052e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800510a:	4b19      	ldr	r3, [pc, #100]	@ (8005170 <pvPortMalloc+0x150>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	4b16      	ldr	r3, [pc, #88]	@ (8005170 <pvPortMalloc+0x150>)
 8005116:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005118:	4b15      	ldr	r3, [pc, #84]	@ (8005170 <pvPortMalloc+0x150>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4b16      	ldr	r3, [pc, #88]	@ (8005178 <pvPortMalloc+0x158>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d203      	bcs.n	800512c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005124:	4b12      	ldr	r3, [pc, #72]	@ (8005170 <pvPortMalloc+0x150>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	4b13      	ldr	r3, [pc, #76]	@ (8005178 <pvPortMalloc+0x158>)
 800512a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	4b0e      	ldr	r3, [pc, #56]	@ (800516c <pvPortMalloc+0x14c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	431a      	orrs	r2, r3
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005140:	4b0e      	ldr	r3, [pc, #56]	@ (800517c <pvPortMalloc+0x15c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	4b0d      	ldr	r3, [pc, #52]	@ (800517c <pvPortMalloc+0x15c>)
 8005148:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800514a:	f7fe fecf 	bl	8003eec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2207      	movs	r2, #7
 8005152:	4013      	ands	r3, r2
 8005154:	d002      	beq.n	800515c <pvPortMalloc+0x13c>
 8005156:	b672      	cpsid	i
 8005158:	46c0      	nop			@ (mov r8, r8)
 800515a:	e7fd      	b.n	8005158 <pvPortMalloc+0x138>
	return pvReturn;
 800515c:	68fb      	ldr	r3, [r7, #12]
}
 800515e:	0018      	movs	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	b006      	add	sp, #24
 8005164:	bd80      	pop	{r7, pc}
 8005166:	46c0      	nop			@ (mov r8, r8)
 8005168:	20001aa4 	.word	0x20001aa4
 800516c:	20001ab8 	.word	0x20001ab8
 8005170:	20001aa8 	.word	0x20001aa8
 8005174:	20001a9c 	.word	0x20001a9c
 8005178:	20001aac 	.word	0x20001aac
 800517c:	20001ab0 	.word	0x20001ab0

08005180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d03c      	beq.n	800520c <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005192:	2308      	movs	r3, #8
 8005194:	425b      	negs	r3, r3
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	18d3      	adds	r3, r2, r3
 800519a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005214 <vPortFree+0x94>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4013      	ands	r3, r2
 80051aa:	d102      	bne.n	80051b2 <vPortFree+0x32>
 80051ac:	b672      	cpsid	i
 80051ae:	46c0      	nop			@ (mov r8, r8)
 80051b0:	e7fd      	b.n	80051ae <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <vPortFree+0x40>
 80051ba:	b672      	cpsid	i
 80051bc:	46c0      	nop			@ (mov r8, r8)
 80051be:	e7fd      	b.n	80051bc <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	4b13      	ldr	r3, [pc, #76]	@ (8005214 <vPortFree+0x94>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4013      	ands	r3, r2
 80051ca:	d01f      	beq.n	800520c <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d11b      	bne.n	800520c <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005214 <vPortFree+0x94>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	43db      	mvns	r3, r3
 80051de:	401a      	ands	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051e4:	f7fe fe76 	bl	8003ed4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005218 <vPortFree+0x98>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	18d2      	adds	r2, r2, r3
 80051f2:	4b09      	ldr	r3, [pc, #36]	@ (8005218 <vPortFree+0x98>)
 80051f4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	0018      	movs	r0, r3
 80051fa:	f000 f871 	bl	80052e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051fe:	4b07      	ldr	r3, [pc, #28]	@ (800521c <vPortFree+0x9c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	4b05      	ldr	r3, [pc, #20]	@ (800521c <vPortFree+0x9c>)
 8005206:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8005208:	f7fe fe70 	bl	8003eec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800520c:	46c0      	nop			@ (mov r8, r8)
 800520e:	46bd      	mov	sp, r7
 8005210:	b004      	add	sp, #16
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20001ab8 	.word	0x20001ab8
 8005218:	20001aa8 	.word	0x20001aa8
 800521c:	20001ab4 	.word	0x20001ab4

08005220 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005226:	23c0      	movs	r3, #192	@ 0xc0
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800522c:	4b26      	ldr	r3, [pc, #152]	@ (80052c8 <prvHeapInit+0xa8>)
 800522e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2207      	movs	r2, #7
 8005234:	4013      	ands	r3, r2
 8005236:	d00c      	beq.n	8005252 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3307      	adds	r3, #7
 800523c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2207      	movs	r2, #7
 8005242:	4393      	bics	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	1ad2      	subs	r2, r2, r3
 800524c:	4b1e      	ldr	r3, [pc, #120]	@ (80052c8 <prvHeapInit+0xa8>)
 800524e:	18d3      	adds	r3, r2, r3
 8005250:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005256:	4b1d      	ldr	r3, [pc, #116]	@ (80052cc <prvHeapInit+0xac>)
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800525c:	4b1b      	ldr	r3, [pc, #108]	@ (80052cc <prvHeapInit+0xac>)
 800525e:	2200      	movs	r2, #0
 8005260:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	18d3      	adds	r3, r2, r3
 8005268:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800526a:	2208      	movs	r2, #8
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2207      	movs	r2, #7
 8005276:	4393      	bics	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4b14      	ldr	r3, [pc, #80]	@ (80052d0 <prvHeapInit+0xb0>)
 800527e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005280:	4b13      	ldr	r3, [pc, #76]	@ (80052d0 <prvHeapInit+0xb0>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2200      	movs	r2, #0
 8005286:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005288:	4b11      	ldr	r3, [pc, #68]	@ (80052d0 <prvHeapInit+0xb0>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	1ad2      	subs	r2, r2, r3
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800529e:	4b0c      	ldr	r3, [pc, #48]	@ (80052d0 <prvHeapInit+0xb0>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	4b0a      	ldr	r3, [pc, #40]	@ (80052d4 <prvHeapInit+0xb4>)
 80052ac:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	4b09      	ldr	r3, [pc, #36]	@ (80052d8 <prvHeapInit+0xb8>)
 80052b4:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052b6:	4b09      	ldr	r3, [pc, #36]	@ (80052dc <prvHeapInit+0xbc>)
 80052b8:	2280      	movs	r2, #128	@ 0x80
 80052ba:	0612      	lsls	r2, r2, #24
 80052bc:	601a      	str	r2, [r3, #0]
}
 80052be:	46c0      	nop			@ (mov r8, r8)
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b004      	add	sp, #16
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	46c0      	nop			@ (mov r8, r8)
 80052c8:	20000e9c 	.word	0x20000e9c
 80052cc:	20001a9c 	.word	0x20001a9c
 80052d0:	20001aa4 	.word	0x20001aa4
 80052d4:	20001aac 	.word	0x20001aac
 80052d8:	20001aa8 	.word	0x20001aa8
 80052dc:	20001ab8 	.word	0x20001ab8

080052e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052e8:	4b27      	ldr	r3, [pc, #156]	@ (8005388 <prvInsertBlockIntoFreeList+0xa8>)
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e002      	b.n	80052f4 <prvInsertBlockIntoFreeList+0x14>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d8f7      	bhi.n	80052ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	18d3      	adds	r3, r2, r3
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	429a      	cmp	r2, r3
 800530e:	d108      	bne.n	8005322 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	18d2      	adds	r2, r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	18d2      	adds	r2, r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d118      	bne.n	8005368 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b14      	ldr	r3, [pc, #80]	@ (800538c <prvInsertBlockIntoFreeList+0xac>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d00d      	beq.n	800535e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	18d2      	adds	r2, r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e008      	b.n	8005370 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800535e:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <prvInsertBlockIntoFreeList+0xac>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	e003      	b.n	8005370 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d002      	beq.n	800537e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800537e:	46c0      	nop			@ (mov r8, r8)
 8005380:	46bd      	mov	sp, r7
 8005382:	b004      	add	sp, #16
 8005384:	bd80      	pop	{r7, pc}
 8005386:	46c0      	nop			@ (mov r8, r8)
 8005388:	20001a9c 	.word	0x20001a9c
 800538c:	20001aa4 	.word	0x20001aa4

08005390 <srand>:
 8005390:	4b11      	ldr	r3, [pc, #68]	@ (80053d8 <srand+0x48>)
 8005392:	b570      	push	{r4, r5, r6, lr}
 8005394:	681d      	ldr	r5, [r3, #0]
 8005396:	0004      	movs	r4, r0
 8005398:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800539a:	2b00      	cmp	r3, #0
 800539c:	d116      	bne.n	80053cc <srand+0x3c>
 800539e:	2018      	movs	r0, #24
 80053a0:	f000 fa68 	bl	8005874 <malloc>
 80053a4:	1e02      	subs	r2, r0, #0
 80053a6:	6328      	str	r0, [r5, #48]	@ 0x30
 80053a8:	d104      	bne.n	80053b4 <srand+0x24>
 80053aa:	2146      	movs	r1, #70	@ 0x46
 80053ac:	4b0b      	ldr	r3, [pc, #44]	@ (80053dc <srand+0x4c>)
 80053ae:	480c      	ldr	r0, [pc, #48]	@ (80053e0 <srand+0x50>)
 80053b0:	f000 f9f8 	bl	80057a4 <__assert_func>
 80053b4:	4b0b      	ldr	r3, [pc, #44]	@ (80053e4 <srand+0x54>)
 80053b6:	2100      	movs	r1, #0
 80053b8:	6003      	str	r3, [r0, #0]
 80053ba:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <srand+0x58>)
 80053bc:	6043      	str	r3, [r0, #4]
 80053be:	4b0b      	ldr	r3, [pc, #44]	@ (80053ec <srand+0x5c>)
 80053c0:	6083      	str	r3, [r0, #8]
 80053c2:	230b      	movs	r3, #11
 80053c4:	8183      	strh	r3, [r0, #12]
 80053c6:	2001      	movs	r0, #1
 80053c8:	6110      	str	r0, [r2, #16]
 80053ca:	6151      	str	r1, [r2, #20]
 80053cc:	2200      	movs	r2, #0
 80053ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80053d0:	611c      	str	r4, [r3, #16]
 80053d2:	615a      	str	r2, [r3, #20]
 80053d4:	bd70      	pop	{r4, r5, r6, pc}
 80053d6:	46c0      	nop			@ (mov r8, r8)
 80053d8:	2000001c 	.word	0x2000001c
 80053dc:	080065b8 	.word	0x080065b8
 80053e0:	080065cf 	.word	0x080065cf
 80053e4:	abcd330e 	.word	0xabcd330e
 80053e8:	e66d1234 	.word	0xe66d1234
 80053ec:	0005deec 	.word	0x0005deec

080053f0 <rand>:
 80053f0:	4b16      	ldr	r3, [pc, #88]	@ (800544c <rand+0x5c>)
 80053f2:	b510      	push	{r4, lr}
 80053f4:	681c      	ldr	r4, [r3, #0]
 80053f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d116      	bne.n	800542a <rand+0x3a>
 80053fc:	2018      	movs	r0, #24
 80053fe:	f000 fa39 	bl	8005874 <malloc>
 8005402:	1e02      	subs	r2, r0, #0
 8005404:	6320      	str	r0, [r4, #48]	@ 0x30
 8005406:	d104      	bne.n	8005412 <rand+0x22>
 8005408:	2152      	movs	r1, #82	@ 0x52
 800540a:	4b11      	ldr	r3, [pc, #68]	@ (8005450 <rand+0x60>)
 800540c:	4811      	ldr	r0, [pc, #68]	@ (8005454 <rand+0x64>)
 800540e:	f000 f9c9 	bl	80057a4 <__assert_func>
 8005412:	4b11      	ldr	r3, [pc, #68]	@ (8005458 <rand+0x68>)
 8005414:	2100      	movs	r1, #0
 8005416:	6003      	str	r3, [r0, #0]
 8005418:	4b10      	ldr	r3, [pc, #64]	@ (800545c <rand+0x6c>)
 800541a:	6043      	str	r3, [r0, #4]
 800541c:	4b10      	ldr	r3, [pc, #64]	@ (8005460 <rand+0x70>)
 800541e:	6083      	str	r3, [r0, #8]
 8005420:	230b      	movs	r3, #11
 8005422:	8183      	strh	r3, [r0, #12]
 8005424:	2001      	movs	r0, #1
 8005426:	6110      	str	r0, [r2, #16]
 8005428:	6151      	str	r1, [r2, #20]
 800542a:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 800542c:	4a0d      	ldr	r2, [pc, #52]	@ (8005464 <rand+0x74>)
 800542e:	6920      	ldr	r0, [r4, #16]
 8005430:	6961      	ldr	r1, [r4, #20]
 8005432:	4b0d      	ldr	r3, [pc, #52]	@ (8005468 <rand+0x78>)
 8005434:	f7fa ffe8 	bl	8000408 <__aeabi_lmul>
 8005438:	2201      	movs	r2, #1
 800543a:	2300      	movs	r3, #0
 800543c:	1880      	adds	r0, r0, r2
 800543e:	4159      	adcs	r1, r3
 8005440:	6120      	str	r0, [r4, #16]
 8005442:	6161      	str	r1, [r4, #20]
 8005444:	0048      	lsls	r0, r1, #1
 8005446:	0840      	lsrs	r0, r0, #1
 8005448:	bd10      	pop	{r4, pc}
 800544a:	46c0      	nop			@ (mov r8, r8)
 800544c:	2000001c 	.word	0x2000001c
 8005450:	080065b8 	.word	0x080065b8
 8005454:	080065cf 	.word	0x080065cf
 8005458:	abcd330e 	.word	0xabcd330e
 800545c:	e66d1234 	.word	0xe66d1234
 8005460:	0005deec 	.word	0x0005deec
 8005464:	4c957f2d 	.word	0x4c957f2d
 8005468:	5851f42d 	.word	0x5851f42d

0800546c <std>:
 800546c:	2300      	movs	r3, #0
 800546e:	b510      	push	{r4, lr}
 8005470:	0004      	movs	r4, r0
 8005472:	6003      	str	r3, [r0, #0]
 8005474:	6043      	str	r3, [r0, #4]
 8005476:	6083      	str	r3, [r0, #8]
 8005478:	8181      	strh	r1, [r0, #12]
 800547a:	6643      	str	r3, [r0, #100]	@ 0x64
 800547c:	81c2      	strh	r2, [r0, #14]
 800547e:	6103      	str	r3, [r0, #16]
 8005480:	6143      	str	r3, [r0, #20]
 8005482:	6183      	str	r3, [r0, #24]
 8005484:	0019      	movs	r1, r3
 8005486:	2208      	movs	r2, #8
 8005488:	305c      	adds	r0, #92	@ 0x5c
 800548a:	f000 f8ff 	bl	800568c <memset>
 800548e:	4b0b      	ldr	r3, [pc, #44]	@ (80054bc <std+0x50>)
 8005490:	6224      	str	r4, [r4, #32]
 8005492:	6263      	str	r3, [r4, #36]	@ 0x24
 8005494:	4b0a      	ldr	r3, [pc, #40]	@ (80054c0 <std+0x54>)
 8005496:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005498:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <std+0x58>)
 800549a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800549c:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <std+0x5c>)
 800549e:	6323      	str	r3, [r4, #48]	@ 0x30
 80054a0:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <std+0x60>)
 80054a2:	429c      	cmp	r4, r3
 80054a4:	d005      	beq.n	80054b2 <std+0x46>
 80054a6:	4b0a      	ldr	r3, [pc, #40]	@ (80054d0 <std+0x64>)
 80054a8:	429c      	cmp	r4, r3
 80054aa:	d002      	beq.n	80054b2 <std+0x46>
 80054ac:	4b09      	ldr	r3, [pc, #36]	@ (80054d4 <std+0x68>)
 80054ae:	429c      	cmp	r4, r3
 80054b0:	d103      	bne.n	80054ba <std+0x4e>
 80054b2:	0020      	movs	r0, r4
 80054b4:	3058      	adds	r0, #88	@ 0x58
 80054b6:	f000 f969 	bl	800578c <__retarget_lock_init_recursive>
 80054ba:	bd10      	pop	{r4, pc}
 80054bc:	080055f5 	.word	0x080055f5
 80054c0:	0800561d 	.word	0x0800561d
 80054c4:	08005655 	.word	0x08005655
 80054c8:	08005681 	.word	0x08005681
 80054cc:	20001abc 	.word	0x20001abc
 80054d0:	20001b24 	.word	0x20001b24
 80054d4:	20001b8c 	.word	0x20001b8c

080054d8 <stdio_exit_handler>:
 80054d8:	b510      	push	{r4, lr}
 80054da:	4a03      	ldr	r2, [pc, #12]	@ (80054e8 <stdio_exit_handler+0x10>)
 80054dc:	4903      	ldr	r1, [pc, #12]	@ (80054ec <stdio_exit_handler+0x14>)
 80054de:	4804      	ldr	r0, [pc, #16]	@ (80054f0 <stdio_exit_handler+0x18>)
 80054e0:	f000 f86c 	bl	80055bc <_fwalk_sglue>
 80054e4:	bd10      	pop	{r4, pc}
 80054e6:	46c0      	nop			@ (mov r8, r8)
 80054e8:	20000010 	.word	0x20000010
 80054ec:	08005af9 	.word	0x08005af9
 80054f0:	20000020 	.word	0x20000020

080054f4 <cleanup_stdio>:
 80054f4:	6841      	ldr	r1, [r0, #4]
 80054f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005524 <cleanup_stdio+0x30>)
 80054f8:	b510      	push	{r4, lr}
 80054fa:	0004      	movs	r4, r0
 80054fc:	4299      	cmp	r1, r3
 80054fe:	d001      	beq.n	8005504 <cleanup_stdio+0x10>
 8005500:	f000 fafa 	bl	8005af8 <_fflush_r>
 8005504:	68a1      	ldr	r1, [r4, #8]
 8005506:	4b08      	ldr	r3, [pc, #32]	@ (8005528 <cleanup_stdio+0x34>)
 8005508:	4299      	cmp	r1, r3
 800550a:	d002      	beq.n	8005512 <cleanup_stdio+0x1e>
 800550c:	0020      	movs	r0, r4
 800550e:	f000 faf3 	bl	8005af8 <_fflush_r>
 8005512:	68e1      	ldr	r1, [r4, #12]
 8005514:	4b05      	ldr	r3, [pc, #20]	@ (800552c <cleanup_stdio+0x38>)
 8005516:	4299      	cmp	r1, r3
 8005518:	d002      	beq.n	8005520 <cleanup_stdio+0x2c>
 800551a:	0020      	movs	r0, r4
 800551c:	f000 faec 	bl	8005af8 <_fflush_r>
 8005520:	bd10      	pop	{r4, pc}
 8005522:	46c0      	nop			@ (mov r8, r8)
 8005524:	20001abc 	.word	0x20001abc
 8005528:	20001b24 	.word	0x20001b24
 800552c:	20001b8c 	.word	0x20001b8c

08005530 <global_stdio_init.part.0>:
 8005530:	b510      	push	{r4, lr}
 8005532:	4b09      	ldr	r3, [pc, #36]	@ (8005558 <global_stdio_init.part.0+0x28>)
 8005534:	4a09      	ldr	r2, [pc, #36]	@ (800555c <global_stdio_init.part.0+0x2c>)
 8005536:	2104      	movs	r1, #4
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	4809      	ldr	r0, [pc, #36]	@ (8005560 <global_stdio_init.part.0+0x30>)
 800553c:	2200      	movs	r2, #0
 800553e:	f7ff ff95 	bl	800546c <std>
 8005542:	2201      	movs	r2, #1
 8005544:	2109      	movs	r1, #9
 8005546:	4807      	ldr	r0, [pc, #28]	@ (8005564 <global_stdio_init.part.0+0x34>)
 8005548:	f7ff ff90 	bl	800546c <std>
 800554c:	2202      	movs	r2, #2
 800554e:	2112      	movs	r1, #18
 8005550:	4805      	ldr	r0, [pc, #20]	@ (8005568 <global_stdio_init.part.0+0x38>)
 8005552:	f7ff ff8b 	bl	800546c <std>
 8005556:	bd10      	pop	{r4, pc}
 8005558:	20001bf4 	.word	0x20001bf4
 800555c:	080054d9 	.word	0x080054d9
 8005560:	20001abc 	.word	0x20001abc
 8005564:	20001b24 	.word	0x20001b24
 8005568:	20001b8c 	.word	0x20001b8c

0800556c <__sfp_lock_acquire>:
 800556c:	b510      	push	{r4, lr}
 800556e:	4802      	ldr	r0, [pc, #8]	@ (8005578 <__sfp_lock_acquire+0xc>)
 8005570:	f000 f90d 	bl	800578e <__retarget_lock_acquire_recursive>
 8005574:	bd10      	pop	{r4, pc}
 8005576:	46c0      	nop			@ (mov r8, r8)
 8005578:	20001bfd 	.word	0x20001bfd

0800557c <__sfp_lock_release>:
 800557c:	b510      	push	{r4, lr}
 800557e:	4802      	ldr	r0, [pc, #8]	@ (8005588 <__sfp_lock_release+0xc>)
 8005580:	f000 f906 	bl	8005790 <__retarget_lock_release_recursive>
 8005584:	bd10      	pop	{r4, pc}
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	20001bfd 	.word	0x20001bfd

0800558c <__sinit>:
 800558c:	b510      	push	{r4, lr}
 800558e:	0004      	movs	r4, r0
 8005590:	f7ff ffec 	bl	800556c <__sfp_lock_acquire>
 8005594:	6a23      	ldr	r3, [r4, #32]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <__sinit+0x14>
 800559a:	f7ff ffef 	bl	800557c <__sfp_lock_release>
 800559e:	bd10      	pop	{r4, pc}
 80055a0:	4b04      	ldr	r3, [pc, #16]	@ (80055b4 <__sinit+0x28>)
 80055a2:	6223      	str	r3, [r4, #32]
 80055a4:	4b04      	ldr	r3, [pc, #16]	@ (80055b8 <__sinit+0x2c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f6      	bne.n	800559a <__sinit+0xe>
 80055ac:	f7ff ffc0 	bl	8005530 <global_stdio_init.part.0>
 80055b0:	e7f3      	b.n	800559a <__sinit+0xe>
 80055b2:	46c0      	nop			@ (mov r8, r8)
 80055b4:	080054f5 	.word	0x080054f5
 80055b8:	20001bf4 	.word	0x20001bf4

080055bc <_fwalk_sglue>:
 80055bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055be:	0014      	movs	r4, r2
 80055c0:	2600      	movs	r6, #0
 80055c2:	9000      	str	r0, [sp, #0]
 80055c4:	9101      	str	r1, [sp, #4]
 80055c6:	68a5      	ldr	r5, [r4, #8]
 80055c8:	6867      	ldr	r7, [r4, #4]
 80055ca:	3f01      	subs	r7, #1
 80055cc:	d504      	bpl.n	80055d8 <_fwalk_sglue+0x1c>
 80055ce:	6824      	ldr	r4, [r4, #0]
 80055d0:	2c00      	cmp	r4, #0
 80055d2:	d1f8      	bne.n	80055c6 <_fwalk_sglue+0xa>
 80055d4:	0030      	movs	r0, r6
 80055d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055d8:	89ab      	ldrh	r3, [r5, #12]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d908      	bls.n	80055f0 <_fwalk_sglue+0x34>
 80055de:	220e      	movs	r2, #14
 80055e0:	5eab      	ldrsh	r3, [r5, r2]
 80055e2:	3301      	adds	r3, #1
 80055e4:	d004      	beq.n	80055f0 <_fwalk_sglue+0x34>
 80055e6:	0029      	movs	r1, r5
 80055e8:	9800      	ldr	r0, [sp, #0]
 80055ea:	9b01      	ldr	r3, [sp, #4]
 80055ec:	4798      	blx	r3
 80055ee:	4306      	orrs	r6, r0
 80055f0:	3568      	adds	r5, #104	@ 0x68
 80055f2:	e7ea      	b.n	80055ca <_fwalk_sglue+0xe>

080055f4 <__sread>:
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	000c      	movs	r4, r1
 80055f8:	250e      	movs	r5, #14
 80055fa:	5f49      	ldrsh	r1, [r1, r5]
 80055fc:	f000 f874 	bl	80056e8 <_read_r>
 8005600:	2800      	cmp	r0, #0
 8005602:	db03      	blt.n	800560c <__sread+0x18>
 8005604:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005606:	181b      	adds	r3, r3, r0
 8005608:	6563      	str	r3, [r4, #84]	@ 0x54
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	4a02      	ldr	r2, [pc, #8]	@ (8005618 <__sread+0x24>)
 8005610:	4013      	ands	r3, r2
 8005612:	81a3      	strh	r3, [r4, #12]
 8005614:	e7f9      	b.n	800560a <__sread+0x16>
 8005616:	46c0      	nop			@ (mov r8, r8)
 8005618:	ffffefff 	.word	0xffffefff

0800561c <__swrite>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	001f      	movs	r7, r3
 8005620:	898b      	ldrh	r3, [r1, #12]
 8005622:	0005      	movs	r5, r0
 8005624:	000c      	movs	r4, r1
 8005626:	0016      	movs	r6, r2
 8005628:	05db      	lsls	r3, r3, #23
 800562a:	d505      	bpl.n	8005638 <__swrite+0x1c>
 800562c:	230e      	movs	r3, #14
 800562e:	5ec9      	ldrsh	r1, [r1, r3]
 8005630:	2200      	movs	r2, #0
 8005632:	2302      	movs	r3, #2
 8005634:	f000 f844 	bl	80056c0 <_lseek_r>
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	4a05      	ldr	r2, [pc, #20]	@ (8005650 <__swrite+0x34>)
 800563c:	0028      	movs	r0, r5
 800563e:	4013      	ands	r3, r2
 8005640:	81a3      	strh	r3, [r4, #12]
 8005642:	0032      	movs	r2, r6
 8005644:	230e      	movs	r3, #14
 8005646:	5ee1      	ldrsh	r1, [r4, r3]
 8005648:	003b      	movs	r3, r7
 800564a:	f000 f861 	bl	8005710 <_write_r>
 800564e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005650:	ffffefff 	.word	0xffffefff

08005654 <__sseek>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	000c      	movs	r4, r1
 8005658:	250e      	movs	r5, #14
 800565a:	5f49      	ldrsh	r1, [r1, r5]
 800565c:	f000 f830 	bl	80056c0 <_lseek_r>
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	1c42      	adds	r2, r0, #1
 8005664:	d103      	bne.n	800566e <__sseek+0x1a>
 8005666:	4a05      	ldr	r2, [pc, #20]	@ (800567c <__sseek+0x28>)
 8005668:	4013      	ands	r3, r2
 800566a:	81a3      	strh	r3, [r4, #12]
 800566c:	bd70      	pop	{r4, r5, r6, pc}
 800566e:	2280      	movs	r2, #128	@ 0x80
 8005670:	0152      	lsls	r2, r2, #5
 8005672:	4313      	orrs	r3, r2
 8005674:	81a3      	strh	r3, [r4, #12]
 8005676:	6560      	str	r0, [r4, #84]	@ 0x54
 8005678:	e7f8      	b.n	800566c <__sseek+0x18>
 800567a:	46c0      	nop			@ (mov r8, r8)
 800567c:	ffffefff 	.word	0xffffefff

08005680 <__sclose>:
 8005680:	b510      	push	{r4, lr}
 8005682:	230e      	movs	r3, #14
 8005684:	5ec9      	ldrsh	r1, [r1, r3]
 8005686:	f000 f809 	bl	800569c <_close_r>
 800568a:	bd10      	pop	{r4, pc}

0800568c <memset>:
 800568c:	0003      	movs	r3, r0
 800568e:	1882      	adds	r2, r0, r2
 8005690:	4293      	cmp	r3, r2
 8005692:	d100      	bne.n	8005696 <memset+0xa>
 8005694:	4770      	bx	lr
 8005696:	7019      	strb	r1, [r3, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	e7f9      	b.n	8005690 <memset+0x4>

0800569c <_close_r>:
 800569c:	2300      	movs	r3, #0
 800569e:	b570      	push	{r4, r5, r6, lr}
 80056a0:	4d06      	ldr	r5, [pc, #24]	@ (80056bc <_close_r+0x20>)
 80056a2:	0004      	movs	r4, r0
 80056a4:	0008      	movs	r0, r1
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	f7fb fca4 	bl	8000ff4 <_close>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d103      	bne.n	80056b8 <_close_r+0x1c>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d000      	beq.n	80056b8 <_close_r+0x1c>
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	bd70      	pop	{r4, r5, r6, pc}
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	20001bf8 	.word	0x20001bf8

080056c0 <_lseek_r>:
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	0004      	movs	r4, r0
 80056c4:	0008      	movs	r0, r1
 80056c6:	0011      	movs	r1, r2
 80056c8:	001a      	movs	r2, r3
 80056ca:	2300      	movs	r3, #0
 80056cc:	4d05      	ldr	r5, [pc, #20]	@ (80056e4 <_lseek_r+0x24>)
 80056ce:	602b      	str	r3, [r5, #0]
 80056d0:	f7fb fcb1 	bl	8001036 <_lseek>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d103      	bne.n	80056e0 <_lseek_r+0x20>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d000      	beq.n	80056e0 <_lseek_r+0x20>
 80056de:	6023      	str	r3, [r4, #0]
 80056e0:	bd70      	pop	{r4, r5, r6, pc}
 80056e2:	46c0      	nop			@ (mov r8, r8)
 80056e4:	20001bf8 	.word	0x20001bf8

080056e8 <_read_r>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	0004      	movs	r4, r0
 80056ec:	0008      	movs	r0, r1
 80056ee:	0011      	movs	r1, r2
 80056f0:	001a      	movs	r2, r3
 80056f2:	2300      	movs	r3, #0
 80056f4:	4d05      	ldr	r5, [pc, #20]	@ (800570c <_read_r+0x24>)
 80056f6:	602b      	str	r3, [r5, #0]
 80056f8:	f7fb fc43 	bl	8000f82 <_read>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d103      	bne.n	8005708 <_read_r+0x20>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d000      	beq.n	8005708 <_read_r+0x20>
 8005706:	6023      	str	r3, [r4, #0]
 8005708:	bd70      	pop	{r4, r5, r6, pc}
 800570a:	46c0      	nop			@ (mov r8, r8)
 800570c:	20001bf8 	.word	0x20001bf8

08005710 <_write_r>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	0004      	movs	r4, r0
 8005714:	0008      	movs	r0, r1
 8005716:	0011      	movs	r1, r2
 8005718:	001a      	movs	r2, r3
 800571a:	2300      	movs	r3, #0
 800571c:	4d05      	ldr	r5, [pc, #20]	@ (8005734 <_write_r+0x24>)
 800571e:	602b      	str	r3, [r5, #0]
 8005720:	f7fb fc4c 	bl	8000fbc <_write>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d103      	bne.n	8005730 <_write_r+0x20>
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d000      	beq.n	8005730 <_write_r+0x20>
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	bd70      	pop	{r4, r5, r6, pc}
 8005732:	46c0      	nop			@ (mov r8, r8)
 8005734:	20001bf8 	.word	0x20001bf8

08005738 <__errno>:
 8005738:	4b01      	ldr	r3, [pc, #4]	@ (8005740 <__errno+0x8>)
 800573a:	6818      	ldr	r0, [r3, #0]
 800573c:	4770      	bx	lr
 800573e:	46c0      	nop			@ (mov r8, r8)
 8005740:	2000001c 	.word	0x2000001c

08005744 <__libc_init_array>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	2600      	movs	r6, #0
 8005748:	4c0c      	ldr	r4, [pc, #48]	@ (800577c <__libc_init_array+0x38>)
 800574a:	4d0d      	ldr	r5, [pc, #52]	@ (8005780 <__libc_init_array+0x3c>)
 800574c:	1b64      	subs	r4, r4, r5
 800574e:	10a4      	asrs	r4, r4, #2
 8005750:	42a6      	cmp	r6, r4
 8005752:	d109      	bne.n	8005768 <__libc_init_array+0x24>
 8005754:	2600      	movs	r6, #0
 8005756:	f000 fe6b 	bl	8006430 <_init>
 800575a:	4c0a      	ldr	r4, [pc, #40]	@ (8005784 <__libc_init_array+0x40>)
 800575c:	4d0a      	ldr	r5, [pc, #40]	@ (8005788 <__libc_init_array+0x44>)
 800575e:	1b64      	subs	r4, r4, r5
 8005760:	10a4      	asrs	r4, r4, #2
 8005762:	42a6      	cmp	r6, r4
 8005764:	d105      	bne.n	8005772 <__libc_init_array+0x2e>
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	00b3      	lsls	r3, r6, #2
 800576a:	58eb      	ldr	r3, [r5, r3]
 800576c:	4798      	blx	r3
 800576e:	3601      	adds	r6, #1
 8005770:	e7ee      	b.n	8005750 <__libc_init_array+0xc>
 8005772:	00b3      	lsls	r3, r6, #2
 8005774:	58eb      	ldr	r3, [r5, r3]
 8005776:	4798      	blx	r3
 8005778:	3601      	adds	r6, #1
 800577a:	e7f2      	b.n	8005762 <__libc_init_array+0x1e>
 800577c:	08006698 	.word	0x08006698
 8005780:	08006698 	.word	0x08006698
 8005784:	0800669c 	.word	0x0800669c
 8005788:	08006698 	.word	0x08006698

0800578c <__retarget_lock_init_recursive>:
 800578c:	4770      	bx	lr

0800578e <__retarget_lock_acquire_recursive>:
 800578e:	4770      	bx	lr

08005790 <__retarget_lock_release_recursive>:
 8005790:	4770      	bx	lr

08005792 <memcpy>:
 8005792:	2300      	movs	r3, #0
 8005794:	b510      	push	{r4, lr}
 8005796:	429a      	cmp	r2, r3
 8005798:	d100      	bne.n	800579c <memcpy+0xa>
 800579a:	bd10      	pop	{r4, pc}
 800579c:	5ccc      	ldrb	r4, [r1, r3]
 800579e:	54c4      	strb	r4, [r0, r3]
 80057a0:	3301      	adds	r3, #1
 80057a2:	e7f8      	b.n	8005796 <memcpy+0x4>

080057a4 <__assert_func>:
 80057a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80057a6:	0014      	movs	r4, r2
 80057a8:	001a      	movs	r2, r3
 80057aa:	4b09      	ldr	r3, [pc, #36]	@ (80057d0 <__assert_func+0x2c>)
 80057ac:	0005      	movs	r5, r0
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	000e      	movs	r6, r1
 80057b2:	68d8      	ldr	r0, [r3, #12]
 80057b4:	4b07      	ldr	r3, [pc, #28]	@ (80057d4 <__assert_func+0x30>)
 80057b6:	2c00      	cmp	r4, #0
 80057b8:	d101      	bne.n	80057be <__assert_func+0x1a>
 80057ba:	4b07      	ldr	r3, [pc, #28]	@ (80057d8 <__assert_func+0x34>)
 80057bc:	001c      	movs	r4, r3
 80057be:	4907      	ldr	r1, [pc, #28]	@ (80057dc <__assert_func+0x38>)
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	9402      	str	r4, [sp, #8]
 80057c4:	002b      	movs	r3, r5
 80057c6:	9600      	str	r6, [sp, #0]
 80057c8:	f000 f9c2 	bl	8005b50 <fiprintf>
 80057cc:	f000 f9e2 	bl	8005b94 <abort>
 80057d0:	2000001c 	.word	0x2000001c
 80057d4:	08006627 	.word	0x08006627
 80057d8:	08006662 	.word	0x08006662
 80057dc:	08006634 	.word	0x08006634

080057e0 <_free_r>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	0005      	movs	r5, r0
 80057e4:	1e0c      	subs	r4, r1, #0
 80057e6:	d010      	beq.n	800580a <_free_r+0x2a>
 80057e8:	3c04      	subs	r4, #4
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	da00      	bge.n	80057f2 <_free_r+0x12>
 80057f0:	18e4      	adds	r4, r4, r3
 80057f2:	0028      	movs	r0, r5
 80057f4:	f000 f8ea 	bl	80059cc <__malloc_lock>
 80057f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005870 <_free_r+0x90>)
 80057fa:	6813      	ldr	r3, [r2, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d105      	bne.n	800580c <_free_r+0x2c>
 8005800:	6063      	str	r3, [r4, #4]
 8005802:	6014      	str	r4, [r2, #0]
 8005804:	0028      	movs	r0, r5
 8005806:	f000 f8e9 	bl	80059dc <__malloc_unlock>
 800580a:	bd70      	pop	{r4, r5, r6, pc}
 800580c:	42a3      	cmp	r3, r4
 800580e:	d908      	bls.n	8005822 <_free_r+0x42>
 8005810:	6820      	ldr	r0, [r4, #0]
 8005812:	1821      	adds	r1, r4, r0
 8005814:	428b      	cmp	r3, r1
 8005816:	d1f3      	bne.n	8005800 <_free_r+0x20>
 8005818:	6819      	ldr	r1, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	1809      	adds	r1, r1, r0
 800581e:	6021      	str	r1, [r4, #0]
 8005820:	e7ee      	b.n	8005800 <_free_r+0x20>
 8005822:	001a      	movs	r2, r3
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <_free_r+0x4e>
 800582a:	42a3      	cmp	r3, r4
 800582c:	d9f9      	bls.n	8005822 <_free_r+0x42>
 800582e:	6811      	ldr	r1, [r2, #0]
 8005830:	1850      	adds	r0, r2, r1
 8005832:	42a0      	cmp	r0, r4
 8005834:	d10b      	bne.n	800584e <_free_r+0x6e>
 8005836:	6820      	ldr	r0, [r4, #0]
 8005838:	1809      	adds	r1, r1, r0
 800583a:	1850      	adds	r0, r2, r1
 800583c:	6011      	str	r1, [r2, #0]
 800583e:	4283      	cmp	r3, r0
 8005840:	d1e0      	bne.n	8005804 <_free_r+0x24>
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	1841      	adds	r1, r0, r1
 8005848:	6011      	str	r1, [r2, #0]
 800584a:	6053      	str	r3, [r2, #4]
 800584c:	e7da      	b.n	8005804 <_free_r+0x24>
 800584e:	42a0      	cmp	r0, r4
 8005850:	d902      	bls.n	8005858 <_free_r+0x78>
 8005852:	230c      	movs	r3, #12
 8005854:	602b      	str	r3, [r5, #0]
 8005856:	e7d5      	b.n	8005804 <_free_r+0x24>
 8005858:	6820      	ldr	r0, [r4, #0]
 800585a:	1821      	adds	r1, r4, r0
 800585c:	428b      	cmp	r3, r1
 800585e:	d103      	bne.n	8005868 <_free_r+0x88>
 8005860:	6819      	ldr	r1, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	1809      	adds	r1, r1, r0
 8005866:	6021      	str	r1, [r4, #0]
 8005868:	6063      	str	r3, [r4, #4]
 800586a:	6054      	str	r4, [r2, #4]
 800586c:	e7ca      	b.n	8005804 <_free_r+0x24>
 800586e:	46c0      	nop			@ (mov r8, r8)
 8005870:	20001c04 	.word	0x20001c04

08005874 <malloc>:
 8005874:	b510      	push	{r4, lr}
 8005876:	4b03      	ldr	r3, [pc, #12]	@ (8005884 <malloc+0x10>)
 8005878:	0001      	movs	r1, r0
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	f000 f826 	bl	80058cc <_malloc_r>
 8005880:	bd10      	pop	{r4, pc}
 8005882:	46c0      	nop			@ (mov r8, r8)
 8005884:	2000001c 	.word	0x2000001c

08005888 <sbrk_aligned>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	4e0f      	ldr	r6, [pc, #60]	@ (80058c8 <sbrk_aligned+0x40>)
 800588c:	000d      	movs	r5, r1
 800588e:	6831      	ldr	r1, [r6, #0]
 8005890:	0004      	movs	r4, r0
 8005892:	2900      	cmp	r1, #0
 8005894:	d102      	bne.n	800589c <sbrk_aligned+0x14>
 8005896:	f000 f96b 	bl	8005b70 <_sbrk_r>
 800589a:	6030      	str	r0, [r6, #0]
 800589c:	0029      	movs	r1, r5
 800589e:	0020      	movs	r0, r4
 80058a0:	f000 f966 	bl	8005b70 <_sbrk_r>
 80058a4:	1c43      	adds	r3, r0, #1
 80058a6:	d103      	bne.n	80058b0 <sbrk_aligned+0x28>
 80058a8:	2501      	movs	r5, #1
 80058aa:	426d      	negs	r5, r5
 80058ac:	0028      	movs	r0, r5
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
 80058b0:	2303      	movs	r3, #3
 80058b2:	1cc5      	adds	r5, r0, #3
 80058b4:	439d      	bics	r5, r3
 80058b6:	42a8      	cmp	r0, r5
 80058b8:	d0f8      	beq.n	80058ac <sbrk_aligned+0x24>
 80058ba:	1a29      	subs	r1, r5, r0
 80058bc:	0020      	movs	r0, r4
 80058be:	f000 f957 	bl	8005b70 <_sbrk_r>
 80058c2:	3001      	adds	r0, #1
 80058c4:	d1f2      	bne.n	80058ac <sbrk_aligned+0x24>
 80058c6:	e7ef      	b.n	80058a8 <sbrk_aligned+0x20>
 80058c8:	20001c00 	.word	0x20001c00

080058cc <_malloc_r>:
 80058cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058ce:	2203      	movs	r2, #3
 80058d0:	1ccb      	adds	r3, r1, #3
 80058d2:	4393      	bics	r3, r2
 80058d4:	3308      	adds	r3, #8
 80058d6:	0005      	movs	r5, r0
 80058d8:	001f      	movs	r7, r3
 80058da:	2b0c      	cmp	r3, #12
 80058dc:	d234      	bcs.n	8005948 <_malloc_r+0x7c>
 80058de:	270c      	movs	r7, #12
 80058e0:	42b9      	cmp	r1, r7
 80058e2:	d833      	bhi.n	800594c <_malloc_r+0x80>
 80058e4:	0028      	movs	r0, r5
 80058e6:	f000 f871 	bl	80059cc <__malloc_lock>
 80058ea:	4e37      	ldr	r6, [pc, #220]	@ (80059c8 <_malloc_r+0xfc>)
 80058ec:	6833      	ldr	r3, [r6, #0]
 80058ee:	001c      	movs	r4, r3
 80058f0:	2c00      	cmp	r4, #0
 80058f2:	d12f      	bne.n	8005954 <_malloc_r+0x88>
 80058f4:	0039      	movs	r1, r7
 80058f6:	0028      	movs	r0, r5
 80058f8:	f7ff ffc6 	bl	8005888 <sbrk_aligned>
 80058fc:	0004      	movs	r4, r0
 80058fe:	1c43      	adds	r3, r0, #1
 8005900:	d15f      	bne.n	80059c2 <_malloc_r+0xf6>
 8005902:	6834      	ldr	r4, [r6, #0]
 8005904:	9400      	str	r4, [sp, #0]
 8005906:	9b00      	ldr	r3, [sp, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d14a      	bne.n	80059a2 <_malloc_r+0xd6>
 800590c:	2c00      	cmp	r4, #0
 800590e:	d052      	beq.n	80059b6 <_malloc_r+0xea>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	0028      	movs	r0, r5
 8005914:	18e3      	adds	r3, r4, r3
 8005916:	9900      	ldr	r1, [sp, #0]
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	f000 f929 	bl	8005b70 <_sbrk_r>
 800591e:	9b01      	ldr	r3, [sp, #4]
 8005920:	4283      	cmp	r3, r0
 8005922:	d148      	bne.n	80059b6 <_malloc_r+0xea>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	0028      	movs	r0, r5
 8005928:	1aff      	subs	r7, r7, r3
 800592a:	0039      	movs	r1, r7
 800592c:	f7ff ffac 	bl	8005888 <sbrk_aligned>
 8005930:	3001      	adds	r0, #1
 8005932:	d040      	beq.n	80059b6 <_malloc_r+0xea>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	19db      	adds	r3, r3, r7
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	6833      	ldr	r3, [r6, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	2a00      	cmp	r2, #0
 8005940:	d133      	bne.n	80059aa <_malloc_r+0xde>
 8005942:	9b00      	ldr	r3, [sp, #0]
 8005944:	6033      	str	r3, [r6, #0]
 8005946:	e019      	b.n	800597c <_malloc_r+0xb0>
 8005948:	2b00      	cmp	r3, #0
 800594a:	dac9      	bge.n	80058e0 <_malloc_r+0x14>
 800594c:	230c      	movs	r3, #12
 800594e:	602b      	str	r3, [r5, #0]
 8005950:	2000      	movs	r0, #0
 8005952:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005954:	6821      	ldr	r1, [r4, #0]
 8005956:	1bc9      	subs	r1, r1, r7
 8005958:	d420      	bmi.n	800599c <_malloc_r+0xd0>
 800595a:	290b      	cmp	r1, #11
 800595c:	d90a      	bls.n	8005974 <_malloc_r+0xa8>
 800595e:	19e2      	adds	r2, r4, r7
 8005960:	6027      	str	r7, [r4, #0]
 8005962:	42a3      	cmp	r3, r4
 8005964:	d104      	bne.n	8005970 <_malloc_r+0xa4>
 8005966:	6032      	str	r2, [r6, #0]
 8005968:	6863      	ldr	r3, [r4, #4]
 800596a:	6011      	str	r1, [r2, #0]
 800596c:	6053      	str	r3, [r2, #4]
 800596e:	e005      	b.n	800597c <_malloc_r+0xb0>
 8005970:	605a      	str	r2, [r3, #4]
 8005972:	e7f9      	b.n	8005968 <_malloc_r+0x9c>
 8005974:	6862      	ldr	r2, [r4, #4]
 8005976:	42a3      	cmp	r3, r4
 8005978:	d10e      	bne.n	8005998 <_malloc_r+0xcc>
 800597a:	6032      	str	r2, [r6, #0]
 800597c:	0028      	movs	r0, r5
 800597e:	f000 f82d 	bl	80059dc <__malloc_unlock>
 8005982:	0020      	movs	r0, r4
 8005984:	2207      	movs	r2, #7
 8005986:	300b      	adds	r0, #11
 8005988:	1d23      	adds	r3, r4, #4
 800598a:	4390      	bics	r0, r2
 800598c:	1ac2      	subs	r2, r0, r3
 800598e:	4298      	cmp	r0, r3
 8005990:	d0df      	beq.n	8005952 <_malloc_r+0x86>
 8005992:	1a1b      	subs	r3, r3, r0
 8005994:	50a3      	str	r3, [r4, r2]
 8005996:	e7dc      	b.n	8005952 <_malloc_r+0x86>
 8005998:	605a      	str	r2, [r3, #4]
 800599a:	e7ef      	b.n	800597c <_malloc_r+0xb0>
 800599c:	0023      	movs	r3, r4
 800599e:	6864      	ldr	r4, [r4, #4]
 80059a0:	e7a6      	b.n	80058f0 <_malloc_r+0x24>
 80059a2:	9c00      	ldr	r4, [sp, #0]
 80059a4:	6863      	ldr	r3, [r4, #4]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	e7ad      	b.n	8005906 <_malloc_r+0x3a>
 80059aa:	001a      	movs	r2, r3
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	42a3      	cmp	r3, r4
 80059b0:	d1fb      	bne.n	80059aa <_malloc_r+0xde>
 80059b2:	2300      	movs	r3, #0
 80059b4:	e7da      	b.n	800596c <_malloc_r+0xa0>
 80059b6:	230c      	movs	r3, #12
 80059b8:	0028      	movs	r0, r5
 80059ba:	602b      	str	r3, [r5, #0]
 80059bc:	f000 f80e 	bl	80059dc <__malloc_unlock>
 80059c0:	e7c6      	b.n	8005950 <_malloc_r+0x84>
 80059c2:	6007      	str	r7, [r0, #0]
 80059c4:	e7da      	b.n	800597c <_malloc_r+0xb0>
 80059c6:	46c0      	nop			@ (mov r8, r8)
 80059c8:	20001c04 	.word	0x20001c04

080059cc <__malloc_lock>:
 80059cc:	b510      	push	{r4, lr}
 80059ce:	4802      	ldr	r0, [pc, #8]	@ (80059d8 <__malloc_lock+0xc>)
 80059d0:	f7ff fedd 	bl	800578e <__retarget_lock_acquire_recursive>
 80059d4:	bd10      	pop	{r4, pc}
 80059d6:	46c0      	nop			@ (mov r8, r8)
 80059d8:	20001bfc 	.word	0x20001bfc

080059dc <__malloc_unlock>:
 80059dc:	b510      	push	{r4, lr}
 80059de:	4802      	ldr	r0, [pc, #8]	@ (80059e8 <__malloc_unlock+0xc>)
 80059e0:	f7ff fed6 	bl	8005790 <__retarget_lock_release_recursive>
 80059e4:	bd10      	pop	{r4, pc}
 80059e6:	46c0      	nop			@ (mov r8, r8)
 80059e8:	20001bfc 	.word	0x20001bfc

080059ec <__sflush_r>:
 80059ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ee:	220c      	movs	r2, #12
 80059f0:	5e8b      	ldrsh	r3, [r1, r2]
 80059f2:	0005      	movs	r5, r0
 80059f4:	000c      	movs	r4, r1
 80059f6:	071a      	lsls	r2, r3, #28
 80059f8:	d456      	bmi.n	8005aa8 <__sflush_r+0xbc>
 80059fa:	684a      	ldr	r2, [r1, #4]
 80059fc:	2a00      	cmp	r2, #0
 80059fe:	dc02      	bgt.n	8005a06 <__sflush_r+0x1a>
 8005a00:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005a02:	2a00      	cmp	r2, #0
 8005a04:	dd4e      	ble.n	8005aa4 <__sflush_r+0xb8>
 8005a06:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005a08:	2f00      	cmp	r7, #0
 8005a0a:	d04b      	beq.n	8005aa4 <__sflush_r+0xb8>
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2080      	movs	r0, #128	@ 0x80
 8005a10:	682e      	ldr	r6, [r5, #0]
 8005a12:	602a      	str	r2, [r5, #0]
 8005a14:	001a      	movs	r2, r3
 8005a16:	0140      	lsls	r0, r0, #5
 8005a18:	6a21      	ldr	r1, [r4, #32]
 8005a1a:	4002      	ands	r2, r0
 8005a1c:	4203      	tst	r3, r0
 8005a1e:	d033      	beq.n	8005a88 <__sflush_r+0x9c>
 8005a20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	075b      	lsls	r3, r3, #29
 8005a26:	d506      	bpl.n	8005a36 <__sflush_r+0x4a>
 8005a28:	6863      	ldr	r3, [r4, #4]
 8005a2a:	1ad2      	subs	r2, r2, r3
 8005a2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <__sflush_r+0x4a>
 8005a32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a34:	1ad2      	subs	r2, r2, r3
 8005a36:	2300      	movs	r3, #0
 8005a38:	0028      	movs	r0, r5
 8005a3a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005a3c:	6a21      	ldr	r1, [r4, #32]
 8005a3e:	47b8      	blx	r7
 8005a40:	89a2      	ldrh	r2, [r4, #12]
 8005a42:	1c43      	adds	r3, r0, #1
 8005a44:	d106      	bne.n	8005a54 <__sflush_r+0x68>
 8005a46:	6829      	ldr	r1, [r5, #0]
 8005a48:	291d      	cmp	r1, #29
 8005a4a:	d846      	bhi.n	8005ada <__sflush_r+0xee>
 8005a4c:	4b29      	ldr	r3, [pc, #164]	@ (8005af4 <__sflush_r+0x108>)
 8005a4e:	410b      	asrs	r3, r1
 8005a50:	07db      	lsls	r3, r3, #31
 8005a52:	d442      	bmi.n	8005ada <__sflush_r+0xee>
 8005a54:	2300      	movs	r3, #0
 8005a56:	6063      	str	r3, [r4, #4]
 8005a58:	6923      	ldr	r3, [r4, #16]
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	04d2      	lsls	r2, r2, #19
 8005a5e:	d505      	bpl.n	8005a6c <__sflush_r+0x80>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <__sflush_r+0x7e>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d100      	bne.n	8005a6c <__sflush_r+0x80>
 8005a6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a6e:	602e      	str	r6, [r5, #0]
 8005a70:	2900      	cmp	r1, #0
 8005a72:	d017      	beq.n	8005aa4 <__sflush_r+0xb8>
 8005a74:	0023      	movs	r3, r4
 8005a76:	3344      	adds	r3, #68	@ 0x44
 8005a78:	4299      	cmp	r1, r3
 8005a7a:	d002      	beq.n	8005a82 <__sflush_r+0x96>
 8005a7c:	0028      	movs	r0, r5
 8005a7e:	f7ff feaf 	bl	80057e0 <_free_r>
 8005a82:	2300      	movs	r3, #0
 8005a84:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a86:	e00d      	b.n	8005aa4 <__sflush_r+0xb8>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	0028      	movs	r0, r5
 8005a8c:	47b8      	blx	r7
 8005a8e:	0002      	movs	r2, r0
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d1c6      	bne.n	8005a22 <__sflush_r+0x36>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0c3      	beq.n	8005a22 <__sflush_r+0x36>
 8005a9a:	2b1d      	cmp	r3, #29
 8005a9c:	d001      	beq.n	8005aa2 <__sflush_r+0xb6>
 8005a9e:	2b16      	cmp	r3, #22
 8005aa0:	d11a      	bne.n	8005ad8 <__sflush_r+0xec>
 8005aa2:	602e      	str	r6, [r5, #0]
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	e01e      	b.n	8005ae6 <__sflush_r+0xfa>
 8005aa8:	690e      	ldr	r6, [r1, #16]
 8005aaa:	2e00      	cmp	r6, #0
 8005aac:	d0fa      	beq.n	8005aa4 <__sflush_r+0xb8>
 8005aae:	680f      	ldr	r7, [r1, #0]
 8005ab0:	600e      	str	r6, [r1, #0]
 8005ab2:	1bba      	subs	r2, r7, r6
 8005ab4:	9201      	str	r2, [sp, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	079b      	lsls	r3, r3, #30
 8005aba:	d100      	bne.n	8005abe <__sflush_r+0xd2>
 8005abc:	694a      	ldr	r2, [r1, #20]
 8005abe:	60a2      	str	r2, [r4, #8]
 8005ac0:	9b01      	ldr	r3, [sp, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	ddee      	ble.n	8005aa4 <__sflush_r+0xb8>
 8005ac6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005ac8:	0032      	movs	r2, r6
 8005aca:	001f      	movs	r7, r3
 8005acc:	0028      	movs	r0, r5
 8005ace:	9b01      	ldr	r3, [sp, #4]
 8005ad0:	6a21      	ldr	r1, [r4, #32]
 8005ad2:	47b8      	blx	r7
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	dc07      	bgt.n	8005ae8 <__sflush_r+0xfc>
 8005ad8:	89a2      	ldrh	r2, [r4, #12]
 8005ada:	2340      	movs	r3, #64	@ 0x40
 8005adc:	2001      	movs	r0, #1
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	b21b      	sxth	r3, r3
 8005ae2:	81a3      	strh	r3, [r4, #12]
 8005ae4:	4240      	negs	r0, r0
 8005ae6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ae8:	9b01      	ldr	r3, [sp, #4]
 8005aea:	1836      	adds	r6, r6, r0
 8005aec:	1a1b      	subs	r3, r3, r0
 8005aee:	9301      	str	r3, [sp, #4]
 8005af0:	e7e6      	b.n	8005ac0 <__sflush_r+0xd4>
 8005af2:	46c0      	nop			@ (mov r8, r8)
 8005af4:	dfbffffe 	.word	0xdfbffffe

08005af8 <_fflush_r>:
 8005af8:	690b      	ldr	r3, [r1, #16]
 8005afa:	b570      	push	{r4, r5, r6, lr}
 8005afc:	0005      	movs	r5, r0
 8005afe:	000c      	movs	r4, r1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d102      	bne.n	8005b0a <_fflush_r+0x12>
 8005b04:	2500      	movs	r5, #0
 8005b06:	0028      	movs	r0, r5
 8005b08:	bd70      	pop	{r4, r5, r6, pc}
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	d004      	beq.n	8005b18 <_fflush_r+0x20>
 8005b0e:	6a03      	ldr	r3, [r0, #32]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <_fflush_r+0x20>
 8005b14:	f7ff fd3a 	bl	800558c <__sinit>
 8005b18:	220c      	movs	r2, #12
 8005b1a:	5ea3      	ldrsh	r3, [r4, r2]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f1      	beq.n	8005b04 <_fflush_r+0xc>
 8005b20:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b22:	07d2      	lsls	r2, r2, #31
 8005b24:	d404      	bmi.n	8005b30 <_fflush_r+0x38>
 8005b26:	059b      	lsls	r3, r3, #22
 8005b28:	d402      	bmi.n	8005b30 <_fflush_r+0x38>
 8005b2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b2c:	f7ff fe2f 	bl	800578e <__retarget_lock_acquire_recursive>
 8005b30:	0028      	movs	r0, r5
 8005b32:	0021      	movs	r1, r4
 8005b34:	f7ff ff5a 	bl	80059ec <__sflush_r>
 8005b38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b3a:	0005      	movs	r5, r0
 8005b3c:	07db      	lsls	r3, r3, #31
 8005b3e:	d4e2      	bmi.n	8005b06 <_fflush_r+0xe>
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	059b      	lsls	r3, r3, #22
 8005b44:	d4df      	bmi.n	8005b06 <_fflush_r+0xe>
 8005b46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b48:	f7ff fe22 	bl	8005790 <__retarget_lock_release_recursive>
 8005b4c:	e7db      	b.n	8005b06 <_fflush_r+0xe>
	...

08005b50 <fiprintf>:
 8005b50:	b40e      	push	{r1, r2, r3}
 8005b52:	b517      	push	{r0, r1, r2, r4, lr}
 8005b54:	4c05      	ldr	r4, [pc, #20]	@ (8005b6c <fiprintf+0x1c>)
 8005b56:	ab05      	add	r3, sp, #20
 8005b58:	cb04      	ldmia	r3!, {r2}
 8005b5a:	0001      	movs	r1, r0
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	9301      	str	r3, [sp, #4]
 8005b60:	f000 f846 	bl	8005bf0 <_vfiprintf_r>
 8005b64:	bc1e      	pop	{r1, r2, r3, r4}
 8005b66:	bc08      	pop	{r3}
 8005b68:	b003      	add	sp, #12
 8005b6a:	4718      	bx	r3
 8005b6c:	2000001c 	.word	0x2000001c

08005b70 <_sbrk_r>:
 8005b70:	2300      	movs	r3, #0
 8005b72:	b570      	push	{r4, r5, r6, lr}
 8005b74:	4d06      	ldr	r5, [pc, #24]	@ (8005b90 <_sbrk_r+0x20>)
 8005b76:	0004      	movs	r4, r0
 8005b78:	0008      	movs	r0, r1
 8005b7a:	602b      	str	r3, [r5, #0]
 8005b7c:	f7fb fa66 	bl	800104c <_sbrk>
 8005b80:	1c43      	adds	r3, r0, #1
 8005b82:	d103      	bne.n	8005b8c <_sbrk_r+0x1c>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d000      	beq.n	8005b8c <_sbrk_r+0x1c>
 8005b8a:	6023      	str	r3, [r4, #0]
 8005b8c:	bd70      	pop	{r4, r5, r6, pc}
 8005b8e:	46c0      	nop			@ (mov r8, r8)
 8005b90:	20001bf8 	.word	0x20001bf8

08005b94 <abort>:
 8005b94:	2006      	movs	r0, #6
 8005b96:	b510      	push	{r4, lr}
 8005b98:	f000 fb8e 	bl	80062b8 <raise>
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	f7fb f9e3 	bl	8000f68 <_exit>

08005ba2 <__sfputc_r>:
 8005ba2:	6893      	ldr	r3, [r2, #8]
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	6093      	str	r3, [r2, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da04      	bge.n	8005bb8 <__sfputc_r+0x16>
 8005bae:	6994      	ldr	r4, [r2, #24]
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	db07      	blt.n	8005bc4 <__sfputc_r+0x22>
 8005bb4:	290a      	cmp	r1, #10
 8005bb6:	d005      	beq.n	8005bc4 <__sfputc_r+0x22>
 8005bb8:	6813      	ldr	r3, [r2, #0]
 8005bba:	1c58      	adds	r0, r3, #1
 8005bbc:	6010      	str	r0, [r2, #0]
 8005bbe:	7019      	strb	r1, [r3, #0]
 8005bc0:	0008      	movs	r0, r1
 8005bc2:	bd10      	pop	{r4, pc}
 8005bc4:	f000 faae 	bl	8006124 <__swbuf_r>
 8005bc8:	0001      	movs	r1, r0
 8005bca:	e7f9      	b.n	8005bc0 <__sfputc_r+0x1e>

08005bcc <__sfputs_r>:
 8005bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bce:	0006      	movs	r6, r0
 8005bd0:	000f      	movs	r7, r1
 8005bd2:	0014      	movs	r4, r2
 8005bd4:	18d5      	adds	r5, r2, r3
 8005bd6:	42ac      	cmp	r4, r5
 8005bd8:	d101      	bne.n	8005bde <__sfputs_r+0x12>
 8005bda:	2000      	movs	r0, #0
 8005bdc:	e007      	b.n	8005bee <__sfputs_r+0x22>
 8005bde:	7821      	ldrb	r1, [r4, #0]
 8005be0:	003a      	movs	r2, r7
 8005be2:	0030      	movs	r0, r6
 8005be4:	f7ff ffdd 	bl	8005ba2 <__sfputc_r>
 8005be8:	3401      	adds	r4, #1
 8005bea:	1c43      	adds	r3, r0, #1
 8005bec:	d1f3      	bne.n	8005bd6 <__sfputs_r+0xa>
 8005bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005bf0 <_vfiprintf_r>:
 8005bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bf2:	b0a1      	sub	sp, #132	@ 0x84
 8005bf4:	000f      	movs	r7, r1
 8005bf6:	0015      	movs	r5, r2
 8005bf8:	001e      	movs	r6, r3
 8005bfa:	9003      	str	r0, [sp, #12]
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d004      	beq.n	8005c0a <_vfiprintf_r+0x1a>
 8005c00:	6a03      	ldr	r3, [r0, #32]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <_vfiprintf_r+0x1a>
 8005c06:	f7ff fcc1 	bl	800558c <__sinit>
 8005c0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c0c:	07db      	lsls	r3, r3, #31
 8005c0e:	d405      	bmi.n	8005c1c <_vfiprintf_r+0x2c>
 8005c10:	89bb      	ldrh	r3, [r7, #12]
 8005c12:	059b      	lsls	r3, r3, #22
 8005c14:	d402      	bmi.n	8005c1c <_vfiprintf_r+0x2c>
 8005c16:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005c18:	f7ff fdb9 	bl	800578e <__retarget_lock_acquire_recursive>
 8005c1c:	89bb      	ldrh	r3, [r7, #12]
 8005c1e:	071b      	lsls	r3, r3, #28
 8005c20:	d502      	bpl.n	8005c28 <_vfiprintf_r+0x38>
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d113      	bne.n	8005c50 <_vfiprintf_r+0x60>
 8005c28:	0039      	movs	r1, r7
 8005c2a:	9803      	ldr	r0, [sp, #12]
 8005c2c:	f000 fabc 	bl	80061a8 <__swsetup_r>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d00d      	beq.n	8005c50 <_vfiprintf_r+0x60>
 8005c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c36:	07db      	lsls	r3, r3, #31
 8005c38:	d503      	bpl.n	8005c42 <_vfiprintf_r+0x52>
 8005c3a:	2001      	movs	r0, #1
 8005c3c:	4240      	negs	r0, r0
 8005c3e:	b021      	add	sp, #132	@ 0x84
 8005c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c42:	89bb      	ldrh	r3, [r7, #12]
 8005c44:	059b      	lsls	r3, r3, #22
 8005c46:	d4f8      	bmi.n	8005c3a <_vfiprintf_r+0x4a>
 8005c48:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005c4a:	f7ff fda1 	bl	8005790 <__retarget_lock_release_recursive>
 8005c4e:	e7f4      	b.n	8005c3a <_vfiprintf_r+0x4a>
 8005c50:	2300      	movs	r3, #0
 8005c52:	ac08      	add	r4, sp, #32
 8005c54:	6163      	str	r3, [r4, #20]
 8005c56:	3320      	adds	r3, #32
 8005c58:	7663      	strb	r3, [r4, #25]
 8005c5a:	3310      	adds	r3, #16
 8005c5c:	76a3      	strb	r3, [r4, #26]
 8005c5e:	9607      	str	r6, [sp, #28]
 8005c60:	002e      	movs	r6, r5
 8005c62:	7833      	ldrb	r3, [r6, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <_vfiprintf_r+0x7c>
 8005c68:	2b25      	cmp	r3, #37	@ 0x25
 8005c6a:	d148      	bne.n	8005cfe <_vfiprintf_r+0x10e>
 8005c6c:	1b73      	subs	r3, r6, r5
 8005c6e:	9305      	str	r3, [sp, #20]
 8005c70:	42ae      	cmp	r6, r5
 8005c72:	d00b      	beq.n	8005c8c <_vfiprintf_r+0x9c>
 8005c74:	002a      	movs	r2, r5
 8005c76:	0039      	movs	r1, r7
 8005c78:	9803      	ldr	r0, [sp, #12]
 8005c7a:	f7ff ffa7 	bl	8005bcc <__sfputs_r>
 8005c7e:	3001      	adds	r0, #1
 8005c80:	d100      	bne.n	8005c84 <_vfiprintf_r+0x94>
 8005c82:	e0ae      	b.n	8005de2 <_vfiprintf_r+0x1f2>
 8005c84:	6963      	ldr	r3, [r4, #20]
 8005c86:	9a05      	ldr	r2, [sp, #20]
 8005c88:	189b      	adds	r3, r3, r2
 8005c8a:	6163      	str	r3, [r4, #20]
 8005c8c:	7833      	ldrb	r3, [r6, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d100      	bne.n	8005c94 <_vfiprintf_r+0xa4>
 8005c92:	e0a6      	b.n	8005de2 <_vfiprintf_r+0x1f2>
 8005c94:	2201      	movs	r2, #1
 8005c96:	2300      	movs	r3, #0
 8005c98:	4252      	negs	r2, r2
 8005c9a:	6062      	str	r2, [r4, #4]
 8005c9c:	a904      	add	r1, sp, #16
 8005c9e:	3254      	adds	r2, #84	@ 0x54
 8005ca0:	1852      	adds	r2, r2, r1
 8005ca2:	1c75      	adds	r5, r6, #1
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	60e3      	str	r3, [r4, #12]
 8005ca8:	60a3      	str	r3, [r4, #8]
 8005caa:	7013      	strb	r3, [r2, #0]
 8005cac:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005cae:	4b59      	ldr	r3, [pc, #356]	@ (8005e14 <_vfiprintf_r+0x224>)
 8005cb0:	2205      	movs	r2, #5
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	7829      	ldrb	r1, [r5, #0]
 8005cb6:	9305      	str	r3, [sp, #20]
 8005cb8:	f000 fb1e 	bl	80062f8 <memchr>
 8005cbc:	1c6e      	adds	r6, r5, #1
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d11f      	bne.n	8005d02 <_vfiprintf_r+0x112>
 8005cc2:	6822      	ldr	r2, [r4, #0]
 8005cc4:	06d3      	lsls	r3, r2, #27
 8005cc6:	d504      	bpl.n	8005cd2 <_vfiprintf_r+0xe2>
 8005cc8:	2353      	movs	r3, #83	@ 0x53
 8005cca:	a904      	add	r1, sp, #16
 8005ccc:	185b      	adds	r3, r3, r1
 8005cce:	2120      	movs	r1, #32
 8005cd0:	7019      	strb	r1, [r3, #0]
 8005cd2:	0713      	lsls	r3, r2, #28
 8005cd4:	d504      	bpl.n	8005ce0 <_vfiprintf_r+0xf0>
 8005cd6:	2353      	movs	r3, #83	@ 0x53
 8005cd8:	a904      	add	r1, sp, #16
 8005cda:	185b      	adds	r3, r3, r1
 8005cdc:	212b      	movs	r1, #43	@ 0x2b
 8005cde:	7019      	strb	r1, [r3, #0]
 8005ce0:	782b      	ldrb	r3, [r5, #0]
 8005ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ce4:	d016      	beq.n	8005d14 <_vfiprintf_r+0x124>
 8005ce6:	002e      	movs	r6, r5
 8005ce8:	2100      	movs	r1, #0
 8005cea:	200a      	movs	r0, #10
 8005cec:	68e3      	ldr	r3, [r4, #12]
 8005cee:	7832      	ldrb	r2, [r6, #0]
 8005cf0:	1c75      	adds	r5, r6, #1
 8005cf2:	3a30      	subs	r2, #48	@ 0x30
 8005cf4:	2a09      	cmp	r2, #9
 8005cf6:	d950      	bls.n	8005d9a <_vfiprintf_r+0x1aa>
 8005cf8:	2900      	cmp	r1, #0
 8005cfa:	d111      	bne.n	8005d20 <_vfiprintf_r+0x130>
 8005cfc:	e017      	b.n	8005d2e <_vfiprintf_r+0x13e>
 8005cfe:	3601      	adds	r6, #1
 8005d00:	e7af      	b.n	8005c62 <_vfiprintf_r+0x72>
 8005d02:	9b05      	ldr	r3, [sp, #20]
 8005d04:	6822      	ldr	r2, [r4, #0]
 8005d06:	1ac0      	subs	r0, r0, r3
 8005d08:	2301      	movs	r3, #1
 8005d0a:	4083      	lsls	r3, r0
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	0035      	movs	r5, r6
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	e7cc      	b.n	8005cae <_vfiprintf_r+0xbe>
 8005d14:	9b07      	ldr	r3, [sp, #28]
 8005d16:	1d19      	adds	r1, r3, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	9107      	str	r1, [sp, #28]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	db01      	blt.n	8005d24 <_vfiprintf_r+0x134>
 8005d20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d22:	e004      	b.n	8005d2e <_vfiprintf_r+0x13e>
 8005d24:	425b      	negs	r3, r3
 8005d26:	60e3      	str	r3, [r4, #12]
 8005d28:	2302      	movs	r3, #2
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	7833      	ldrb	r3, [r6, #0]
 8005d30:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d32:	d10c      	bne.n	8005d4e <_vfiprintf_r+0x15e>
 8005d34:	7873      	ldrb	r3, [r6, #1]
 8005d36:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d38:	d134      	bne.n	8005da4 <_vfiprintf_r+0x1b4>
 8005d3a:	9b07      	ldr	r3, [sp, #28]
 8005d3c:	3602      	adds	r6, #2
 8005d3e:	1d1a      	adds	r2, r3, #4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	9207      	str	r2, [sp, #28]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	da01      	bge.n	8005d4c <_vfiprintf_r+0x15c>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	425b      	negs	r3, r3
 8005d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d4e:	4d32      	ldr	r5, [pc, #200]	@ (8005e18 <_vfiprintf_r+0x228>)
 8005d50:	2203      	movs	r2, #3
 8005d52:	0028      	movs	r0, r5
 8005d54:	7831      	ldrb	r1, [r6, #0]
 8005d56:	f000 facf 	bl	80062f8 <memchr>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d006      	beq.n	8005d6c <_vfiprintf_r+0x17c>
 8005d5e:	2340      	movs	r3, #64	@ 0x40
 8005d60:	1b40      	subs	r0, r0, r5
 8005d62:	4083      	lsls	r3, r0
 8005d64:	6822      	ldr	r2, [r4, #0]
 8005d66:	3601      	adds	r6, #1
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	6023      	str	r3, [r4, #0]
 8005d6c:	7831      	ldrb	r1, [r6, #0]
 8005d6e:	2206      	movs	r2, #6
 8005d70:	482a      	ldr	r0, [pc, #168]	@ (8005e1c <_vfiprintf_r+0x22c>)
 8005d72:	1c75      	adds	r5, r6, #1
 8005d74:	7621      	strb	r1, [r4, #24]
 8005d76:	f000 fabf 	bl	80062f8 <memchr>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d040      	beq.n	8005e00 <_vfiprintf_r+0x210>
 8005d7e:	4b28      	ldr	r3, [pc, #160]	@ (8005e20 <_vfiprintf_r+0x230>)
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d122      	bne.n	8005dca <_vfiprintf_r+0x1da>
 8005d84:	2207      	movs	r2, #7
 8005d86:	9b07      	ldr	r3, [sp, #28]
 8005d88:	3307      	adds	r3, #7
 8005d8a:	4393      	bics	r3, r2
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	9307      	str	r3, [sp, #28]
 8005d90:	6963      	ldr	r3, [r4, #20]
 8005d92:	9a04      	ldr	r2, [sp, #16]
 8005d94:	189b      	adds	r3, r3, r2
 8005d96:	6163      	str	r3, [r4, #20]
 8005d98:	e762      	b.n	8005c60 <_vfiprintf_r+0x70>
 8005d9a:	4343      	muls	r3, r0
 8005d9c:	002e      	movs	r6, r5
 8005d9e:	2101      	movs	r1, #1
 8005da0:	189b      	adds	r3, r3, r2
 8005da2:	e7a4      	b.n	8005cee <_vfiprintf_r+0xfe>
 8005da4:	2300      	movs	r3, #0
 8005da6:	200a      	movs	r0, #10
 8005da8:	0019      	movs	r1, r3
 8005daa:	3601      	adds	r6, #1
 8005dac:	6063      	str	r3, [r4, #4]
 8005dae:	7832      	ldrb	r2, [r6, #0]
 8005db0:	1c75      	adds	r5, r6, #1
 8005db2:	3a30      	subs	r2, #48	@ 0x30
 8005db4:	2a09      	cmp	r2, #9
 8005db6:	d903      	bls.n	8005dc0 <_vfiprintf_r+0x1d0>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0c8      	beq.n	8005d4e <_vfiprintf_r+0x15e>
 8005dbc:	9109      	str	r1, [sp, #36]	@ 0x24
 8005dbe:	e7c6      	b.n	8005d4e <_vfiprintf_r+0x15e>
 8005dc0:	4341      	muls	r1, r0
 8005dc2:	002e      	movs	r6, r5
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	1889      	adds	r1, r1, r2
 8005dc8:	e7f1      	b.n	8005dae <_vfiprintf_r+0x1be>
 8005dca:	aa07      	add	r2, sp, #28
 8005dcc:	9200      	str	r2, [sp, #0]
 8005dce:	0021      	movs	r1, r4
 8005dd0:	003a      	movs	r2, r7
 8005dd2:	4b14      	ldr	r3, [pc, #80]	@ (8005e24 <_vfiprintf_r+0x234>)
 8005dd4:	9803      	ldr	r0, [sp, #12]
 8005dd6:	e000      	b.n	8005dda <_vfiprintf_r+0x1ea>
 8005dd8:	bf00      	nop
 8005dda:	9004      	str	r0, [sp, #16]
 8005ddc:	9b04      	ldr	r3, [sp, #16]
 8005dde:	3301      	adds	r3, #1
 8005de0:	d1d6      	bne.n	8005d90 <_vfiprintf_r+0x1a0>
 8005de2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005de4:	07db      	lsls	r3, r3, #31
 8005de6:	d405      	bmi.n	8005df4 <_vfiprintf_r+0x204>
 8005de8:	89bb      	ldrh	r3, [r7, #12]
 8005dea:	059b      	lsls	r3, r3, #22
 8005dec:	d402      	bmi.n	8005df4 <_vfiprintf_r+0x204>
 8005dee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005df0:	f7ff fcce 	bl	8005790 <__retarget_lock_release_recursive>
 8005df4:	89bb      	ldrh	r3, [r7, #12]
 8005df6:	065b      	lsls	r3, r3, #25
 8005df8:	d500      	bpl.n	8005dfc <_vfiprintf_r+0x20c>
 8005dfa:	e71e      	b.n	8005c3a <_vfiprintf_r+0x4a>
 8005dfc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005dfe:	e71e      	b.n	8005c3e <_vfiprintf_r+0x4e>
 8005e00:	aa07      	add	r2, sp, #28
 8005e02:	9200      	str	r2, [sp, #0]
 8005e04:	0021      	movs	r1, r4
 8005e06:	003a      	movs	r2, r7
 8005e08:	4b06      	ldr	r3, [pc, #24]	@ (8005e24 <_vfiprintf_r+0x234>)
 8005e0a:	9803      	ldr	r0, [sp, #12]
 8005e0c:	f000 f87c 	bl	8005f08 <_printf_i>
 8005e10:	e7e3      	b.n	8005dda <_vfiprintf_r+0x1ea>
 8005e12:	46c0      	nop			@ (mov r8, r8)
 8005e14:	08006663 	.word	0x08006663
 8005e18:	08006669 	.word	0x08006669
 8005e1c:	0800666d 	.word	0x0800666d
 8005e20:	00000000 	.word	0x00000000
 8005e24:	08005bcd 	.word	0x08005bcd

08005e28 <_printf_common>:
 8005e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e2a:	0016      	movs	r6, r2
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	688a      	ldr	r2, [r1, #8]
 8005e30:	690b      	ldr	r3, [r1, #16]
 8005e32:	000c      	movs	r4, r1
 8005e34:	9000      	str	r0, [sp, #0]
 8005e36:	4293      	cmp	r3, r2
 8005e38:	da00      	bge.n	8005e3c <_printf_common+0x14>
 8005e3a:	0013      	movs	r3, r2
 8005e3c:	0022      	movs	r2, r4
 8005e3e:	6033      	str	r3, [r6, #0]
 8005e40:	3243      	adds	r2, #67	@ 0x43
 8005e42:	7812      	ldrb	r2, [r2, #0]
 8005e44:	2a00      	cmp	r2, #0
 8005e46:	d001      	beq.n	8005e4c <_printf_common+0x24>
 8005e48:	3301      	adds	r3, #1
 8005e4a:	6033      	str	r3, [r6, #0]
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	069b      	lsls	r3, r3, #26
 8005e50:	d502      	bpl.n	8005e58 <_printf_common+0x30>
 8005e52:	6833      	ldr	r3, [r6, #0]
 8005e54:	3302      	adds	r3, #2
 8005e56:	6033      	str	r3, [r6, #0]
 8005e58:	6822      	ldr	r2, [r4, #0]
 8005e5a:	2306      	movs	r3, #6
 8005e5c:	0015      	movs	r5, r2
 8005e5e:	401d      	ands	r5, r3
 8005e60:	421a      	tst	r2, r3
 8005e62:	d027      	beq.n	8005eb4 <_printf_common+0x8c>
 8005e64:	0023      	movs	r3, r4
 8005e66:	3343      	adds	r3, #67	@ 0x43
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	1e5a      	subs	r2, r3, #1
 8005e6c:	4193      	sbcs	r3, r2
 8005e6e:	6822      	ldr	r2, [r4, #0]
 8005e70:	0692      	lsls	r2, r2, #26
 8005e72:	d430      	bmi.n	8005ed6 <_printf_common+0xae>
 8005e74:	0022      	movs	r2, r4
 8005e76:	9901      	ldr	r1, [sp, #4]
 8005e78:	9800      	ldr	r0, [sp, #0]
 8005e7a:	9d08      	ldr	r5, [sp, #32]
 8005e7c:	3243      	adds	r2, #67	@ 0x43
 8005e7e:	47a8      	blx	r5
 8005e80:	3001      	adds	r0, #1
 8005e82:	d025      	beq.n	8005ed0 <_printf_common+0xa8>
 8005e84:	2206      	movs	r2, #6
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	2500      	movs	r5, #0
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d105      	bne.n	8005e9c <_printf_common+0x74>
 8005e90:	6833      	ldr	r3, [r6, #0]
 8005e92:	68e5      	ldr	r5, [r4, #12]
 8005e94:	1aed      	subs	r5, r5, r3
 8005e96:	43eb      	mvns	r3, r5
 8005e98:	17db      	asrs	r3, r3, #31
 8005e9a:	401d      	ands	r5, r3
 8005e9c:	68a3      	ldr	r3, [r4, #8]
 8005e9e:	6922      	ldr	r2, [r4, #16]
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	dd01      	ble.n	8005ea8 <_printf_common+0x80>
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	18ed      	adds	r5, r5, r3
 8005ea8:	2600      	movs	r6, #0
 8005eaa:	42b5      	cmp	r5, r6
 8005eac:	d120      	bne.n	8005ef0 <_printf_common+0xc8>
 8005eae:	2000      	movs	r0, #0
 8005eb0:	e010      	b.n	8005ed4 <_printf_common+0xac>
 8005eb2:	3501      	adds	r5, #1
 8005eb4:	68e3      	ldr	r3, [r4, #12]
 8005eb6:	6832      	ldr	r2, [r6, #0]
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	42ab      	cmp	r3, r5
 8005ebc:	ddd2      	ble.n	8005e64 <_printf_common+0x3c>
 8005ebe:	0022      	movs	r2, r4
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	9901      	ldr	r1, [sp, #4]
 8005ec4:	9800      	ldr	r0, [sp, #0]
 8005ec6:	9f08      	ldr	r7, [sp, #32]
 8005ec8:	3219      	adds	r2, #25
 8005eca:	47b8      	blx	r7
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d1f0      	bne.n	8005eb2 <_printf_common+0x8a>
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	4240      	negs	r0, r0
 8005ed4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ed6:	2030      	movs	r0, #48	@ 0x30
 8005ed8:	18e1      	adds	r1, r4, r3
 8005eda:	3143      	adds	r1, #67	@ 0x43
 8005edc:	7008      	strb	r0, [r1, #0]
 8005ede:	0021      	movs	r1, r4
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	3145      	adds	r1, #69	@ 0x45
 8005ee4:	7809      	ldrb	r1, [r1, #0]
 8005ee6:	18a2      	adds	r2, r4, r2
 8005ee8:	3243      	adds	r2, #67	@ 0x43
 8005eea:	3302      	adds	r3, #2
 8005eec:	7011      	strb	r1, [r2, #0]
 8005eee:	e7c1      	b.n	8005e74 <_printf_common+0x4c>
 8005ef0:	0022      	movs	r2, r4
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	9901      	ldr	r1, [sp, #4]
 8005ef6:	9800      	ldr	r0, [sp, #0]
 8005ef8:	9f08      	ldr	r7, [sp, #32]
 8005efa:	321a      	adds	r2, #26
 8005efc:	47b8      	blx	r7
 8005efe:	3001      	adds	r0, #1
 8005f00:	d0e6      	beq.n	8005ed0 <_printf_common+0xa8>
 8005f02:	3601      	adds	r6, #1
 8005f04:	e7d1      	b.n	8005eaa <_printf_common+0x82>
	...

08005f08 <_printf_i>:
 8005f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f0a:	b08b      	sub	sp, #44	@ 0x2c
 8005f0c:	9206      	str	r2, [sp, #24]
 8005f0e:	000a      	movs	r2, r1
 8005f10:	3243      	adds	r2, #67	@ 0x43
 8005f12:	9307      	str	r3, [sp, #28]
 8005f14:	9005      	str	r0, [sp, #20]
 8005f16:	9203      	str	r2, [sp, #12]
 8005f18:	7e0a      	ldrb	r2, [r1, #24]
 8005f1a:	000c      	movs	r4, r1
 8005f1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f1e:	2a78      	cmp	r2, #120	@ 0x78
 8005f20:	d809      	bhi.n	8005f36 <_printf_i+0x2e>
 8005f22:	2a62      	cmp	r2, #98	@ 0x62
 8005f24:	d80b      	bhi.n	8005f3e <_printf_i+0x36>
 8005f26:	2a00      	cmp	r2, #0
 8005f28:	d100      	bne.n	8005f2c <_printf_i+0x24>
 8005f2a:	e0bc      	b.n	80060a6 <_printf_i+0x19e>
 8005f2c:	497b      	ldr	r1, [pc, #492]	@ (800611c <_printf_i+0x214>)
 8005f2e:	9104      	str	r1, [sp, #16]
 8005f30:	2a58      	cmp	r2, #88	@ 0x58
 8005f32:	d100      	bne.n	8005f36 <_printf_i+0x2e>
 8005f34:	e090      	b.n	8006058 <_printf_i+0x150>
 8005f36:	0025      	movs	r5, r4
 8005f38:	3542      	adds	r5, #66	@ 0x42
 8005f3a:	702a      	strb	r2, [r5, #0]
 8005f3c:	e022      	b.n	8005f84 <_printf_i+0x7c>
 8005f3e:	0010      	movs	r0, r2
 8005f40:	3863      	subs	r0, #99	@ 0x63
 8005f42:	2815      	cmp	r0, #21
 8005f44:	d8f7      	bhi.n	8005f36 <_printf_i+0x2e>
 8005f46:	f7fa f8df 	bl	8000108 <__gnu_thumb1_case_shi>
 8005f4a:	0016      	.short	0x0016
 8005f4c:	fff6001f 	.word	0xfff6001f
 8005f50:	fff6fff6 	.word	0xfff6fff6
 8005f54:	001ffff6 	.word	0x001ffff6
 8005f58:	fff6fff6 	.word	0xfff6fff6
 8005f5c:	fff6fff6 	.word	0xfff6fff6
 8005f60:	003600a1 	.word	0x003600a1
 8005f64:	fff60080 	.word	0xfff60080
 8005f68:	00b2fff6 	.word	0x00b2fff6
 8005f6c:	0036fff6 	.word	0x0036fff6
 8005f70:	fff6fff6 	.word	0xfff6fff6
 8005f74:	0084      	.short	0x0084
 8005f76:	0025      	movs	r5, r4
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	3542      	adds	r5, #66	@ 0x42
 8005f7c:	1d11      	adds	r1, r2, #4
 8005f7e:	6019      	str	r1, [r3, #0]
 8005f80:	6813      	ldr	r3, [r2, #0]
 8005f82:	702b      	strb	r3, [r5, #0]
 8005f84:	2301      	movs	r3, #1
 8005f86:	e0a0      	b.n	80060ca <_printf_i+0x1c2>
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	6809      	ldr	r1, [r1, #0]
 8005f8c:	1d02      	adds	r2, r0, #4
 8005f8e:	060d      	lsls	r5, r1, #24
 8005f90:	d50b      	bpl.n	8005faa <_printf_i+0xa2>
 8005f92:	6806      	ldr	r6, [r0, #0]
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	2e00      	cmp	r6, #0
 8005f98:	da03      	bge.n	8005fa2 <_printf_i+0x9a>
 8005f9a:	232d      	movs	r3, #45	@ 0x2d
 8005f9c:	9a03      	ldr	r2, [sp, #12]
 8005f9e:	4276      	negs	r6, r6
 8005fa0:	7013      	strb	r3, [r2, #0]
 8005fa2:	4b5e      	ldr	r3, [pc, #376]	@ (800611c <_printf_i+0x214>)
 8005fa4:	270a      	movs	r7, #10
 8005fa6:	9304      	str	r3, [sp, #16]
 8005fa8:	e018      	b.n	8005fdc <_printf_i+0xd4>
 8005faa:	6806      	ldr	r6, [r0, #0]
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	0649      	lsls	r1, r1, #25
 8005fb0:	d5f1      	bpl.n	8005f96 <_printf_i+0x8e>
 8005fb2:	b236      	sxth	r6, r6
 8005fb4:	e7ef      	b.n	8005f96 <_printf_i+0x8e>
 8005fb6:	6808      	ldr	r0, [r1, #0]
 8005fb8:	6819      	ldr	r1, [r3, #0]
 8005fba:	c940      	ldmia	r1!, {r6}
 8005fbc:	0605      	lsls	r5, r0, #24
 8005fbe:	d402      	bmi.n	8005fc6 <_printf_i+0xbe>
 8005fc0:	0640      	lsls	r0, r0, #25
 8005fc2:	d500      	bpl.n	8005fc6 <_printf_i+0xbe>
 8005fc4:	b2b6      	uxth	r6, r6
 8005fc6:	6019      	str	r1, [r3, #0]
 8005fc8:	4b54      	ldr	r3, [pc, #336]	@ (800611c <_printf_i+0x214>)
 8005fca:	270a      	movs	r7, #10
 8005fcc:	9304      	str	r3, [sp, #16]
 8005fce:	2a6f      	cmp	r2, #111	@ 0x6f
 8005fd0:	d100      	bne.n	8005fd4 <_printf_i+0xcc>
 8005fd2:	3f02      	subs	r7, #2
 8005fd4:	0023      	movs	r3, r4
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	3343      	adds	r3, #67	@ 0x43
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	6863      	ldr	r3, [r4, #4]
 8005fde:	60a3      	str	r3, [r4, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	db03      	blt.n	8005fec <_printf_i+0xe4>
 8005fe4:	2104      	movs	r1, #4
 8005fe6:	6822      	ldr	r2, [r4, #0]
 8005fe8:	438a      	bics	r2, r1
 8005fea:	6022      	str	r2, [r4, #0]
 8005fec:	2e00      	cmp	r6, #0
 8005fee:	d102      	bne.n	8005ff6 <_printf_i+0xee>
 8005ff0:	9d03      	ldr	r5, [sp, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00c      	beq.n	8006010 <_printf_i+0x108>
 8005ff6:	9d03      	ldr	r5, [sp, #12]
 8005ff8:	0030      	movs	r0, r6
 8005ffa:	0039      	movs	r1, r7
 8005ffc:	f7fa f914 	bl	8000228 <__aeabi_uidivmod>
 8006000:	9b04      	ldr	r3, [sp, #16]
 8006002:	3d01      	subs	r5, #1
 8006004:	5c5b      	ldrb	r3, [r3, r1]
 8006006:	702b      	strb	r3, [r5, #0]
 8006008:	0033      	movs	r3, r6
 800600a:	0006      	movs	r6, r0
 800600c:	429f      	cmp	r7, r3
 800600e:	d9f3      	bls.n	8005ff8 <_printf_i+0xf0>
 8006010:	2f08      	cmp	r7, #8
 8006012:	d109      	bne.n	8006028 <_printf_i+0x120>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	07db      	lsls	r3, r3, #31
 8006018:	d506      	bpl.n	8006028 <_printf_i+0x120>
 800601a:	6862      	ldr	r2, [r4, #4]
 800601c:	6923      	ldr	r3, [r4, #16]
 800601e:	429a      	cmp	r2, r3
 8006020:	dc02      	bgt.n	8006028 <_printf_i+0x120>
 8006022:	2330      	movs	r3, #48	@ 0x30
 8006024:	3d01      	subs	r5, #1
 8006026:	702b      	strb	r3, [r5, #0]
 8006028:	9b03      	ldr	r3, [sp, #12]
 800602a:	1b5b      	subs	r3, r3, r5
 800602c:	6123      	str	r3, [r4, #16]
 800602e:	9b07      	ldr	r3, [sp, #28]
 8006030:	0021      	movs	r1, r4
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	9805      	ldr	r0, [sp, #20]
 8006036:	9b06      	ldr	r3, [sp, #24]
 8006038:	aa09      	add	r2, sp, #36	@ 0x24
 800603a:	f7ff fef5 	bl	8005e28 <_printf_common>
 800603e:	3001      	adds	r0, #1
 8006040:	d148      	bne.n	80060d4 <_printf_i+0x1cc>
 8006042:	2001      	movs	r0, #1
 8006044:	4240      	negs	r0, r0
 8006046:	b00b      	add	sp, #44	@ 0x2c
 8006048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800604a:	2220      	movs	r2, #32
 800604c:	6809      	ldr	r1, [r1, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	6022      	str	r2, [r4, #0]
 8006052:	2278      	movs	r2, #120	@ 0x78
 8006054:	4932      	ldr	r1, [pc, #200]	@ (8006120 <_printf_i+0x218>)
 8006056:	9104      	str	r1, [sp, #16]
 8006058:	0021      	movs	r1, r4
 800605a:	3145      	adds	r1, #69	@ 0x45
 800605c:	700a      	strb	r2, [r1, #0]
 800605e:	6819      	ldr	r1, [r3, #0]
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	c940      	ldmia	r1!, {r6}
 8006064:	0610      	lsls	r0, r2, #24
 8006066:	d402      	bmi.n	800606e <_printf_i+0x166>
 8006068:	0650      	lsls	r0, r2, #25
 800606a:	d500      	bpl.n	800606e <_printf_i+0x166>
 800606c:	b2b6      	uxth	r6, r6
 800606e:	6019      	str	r1, [r3, #0]
 8006070:	07d3      	lsls	r3, r2, #31
 8006072:	d502      	bpl.n	800607a <_printf_i+0x172>
 8006074:	2320      	movs	r3, #32
 8006076:	4313      	orrs	r3, r2
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	2e00      	cmp	r6, #0
 800607c:	d001      	beq.n	8006082 <_printf_i+0x17a>
 800607e:	2710      	movs	r7, #16
 8006080:	e7a8      	b.n	8005fd4 <_printf_i+0xcc>
 8006082:	2220      	movs	r2, #32
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	4393      	bics	r3, r2
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	e7f8      	b.n	800607e <_printf_i+0x176>
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	680d      	ldr	r5, [r1, #0]
 8006090:	1d10      	adds	r0, r2, #4
 8006092:	6949      	ldr	r1, [r1, #20]
 8006094:	6018      	str	r0, [r3, #0]
 8006096:	6813      	ldr	r3, [r2, #0]
 8006098:	062e      	lsls	r6, r5, #24
 800609a:	d501      	bpl.n	80060a0 <_printf_i+0x198>
 800609c:	6019      	str	r1, [r3, #0]
 800609e:	e002      	b.n	80060a6 <_printf_i+0x19e>
 80060a0:	066d      	lsls	r5, r5, #25
 80060a2:	d5fb      	bpl.n	800609c <_printf_i+0x194>
 80060a4:	8019      	strh	r1, [r3, #0]
 80060a6:	2300      	movs	r3, #0
 80060a8:	9d03      	ldr	r5, [sp, #12]
 80060aa:	6123      	str	r3, [r4, #16]
 80060ac:	e7bf      	b.n	800602e <_printf_i+0x126>
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	1d11      	adds	r1, r2, #4
 80060b2:	6019      	str	r1, [r3, #0]
 80060b4:	6815      	ldr	r5, [r2, #0]
 80060b6:	2100      	movs	r1, #0
 80060b8:	0028      	movs	r0, r5
 80060ba:	6862      	ldr	r2, [r4, #4]
 80060bc:	f000 f91c 	bl	80062f8 <memchr>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d001      	beq.n	80060c8 <_printf_i+0x1c0>
 80060c4:	1b40      	subs	r0, r0, r5
 80060c6:	6060      	str	r0, [r4, #4]
 80060c8:	6863      	ldr	r3, [r4, #4]
 80060ca:	6123      	str	r3, [r4, #16]
 80060cc:	2300      	movs	r3, #0
 80060ce:	9a03      	ldr	r2, [sp, #12]
 80060d0:	7013      	strb	r3, [r2, #0]
 80060d2:	e7ac      	b.n	800602e <_printf_i+0x126>
 80060d4:	002a      	movs	r2, r5
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	9906      	ldr	r1, [sp, #24]
 80060da:	9805      	ldr	r0, [sp, #20]
 80060dc:	9d07      	ldr	r5, [sp, #28]
 80060de:	47a8      	blx	r5
 80060e0:	3001      	adds	r0, #1
 80060e2:	d0ae      	beq.n	8006042 <_printf_i+0x13a>
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	079b      	lsls	r3, r3, #30
 80060e8:	d415      	bmi.n	8006116 <_printf_i+0x20e>
 80060ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060ec:	68e0      	ldr	r0, [r4, #12]
 80060ee:	4298      	cmp	r0, r3
 80060f0:	daa9      	bge.n	8006046 <_printf_i+0x13e>
 80060f2:	0018      	movs	r0, r3
 80060f4:	e7a7      	b.n	8006046 <_printf_i+0x13e>
 80060f6:	0022      	movs	r2, r4
 80060f8:	2301      	movs	r3, #1
 80060fa:	9906      	ldr	r1, [sp, #24]
 80060fc:	9805      	ldr	r0, [sp, #20]
 80060fe:	9e07      	ldr	r6, [sp, #28]
 8006100:	3219      	adds	r2, #25
 8006102:	47b0      	blx	r6
 8006104:	3001      	adds	r0, #1
 8006106:	d09c      	beq.n	8006042 <_printf_i+0x13a>
 8006108:	3501      	adds	r5, #1
 800610a:	68e3      	ldr	r3, [r4, #12]
 800610c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800610e:	1a9b      	subs	r3, r3, r2
 8006110:	42ab      	cmp	r3, r5
 8006112:	dcf0      	bgt.n	80060f6 <_printf_i+0x1ee>
 8006114:	e7e9      	b.n	80060ea <_printf_i+0x1e2>
 8006116:	2500      	movs	r5, #0
 8006118:	e7f7      	b.n	800610a <_printf_i+0x202>
 800611a:	46c0      	nop			@ (mov r8, r8)
 800611c:	08006674 	.word	0x08006674
 8006120:	08006685 	.word	0x08006685

08006124 <__swbuf_r>:
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006126:	0006      	movs	r6, r0
 8006128:	000d      	movs	r5, r1
 800612a:	0014      	movs	r4, r2
 800612c:	2800      	cmp	r0, #0
 800612e:	d004      	beq.n	800613a <__swbuf_r+0x16>
 8006130:	6a03      	ldr	r3, [r0, #32]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <__swbuf_r+0x16>
 8006136:	f7ff fa29 	bl	800558c <__sinit>
 800613a:	69a3      	ldr	r3, [r4, #24]
 800613c:	60a3      	str	r3, [r4, #8]
 800613e:	89a3      	ldrh	r3, [r4, #12]
 8006140:	071b      	lsls	r3, r3, #28
 8006142:	d502      	bpl.n	800614a <__swbuf_r+0x26>
 8006144:	6923      	ldr	r3, [r4, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <__swbuf_r+0x3a>
 800614a:	0021      	movs	r1, r4
 800614c:	0030      	movs	r0, r6
 800614e:	f000 f82b 	bl	80061a8 <__swsetup_r>
 8006152:	2800      	cmp	r0, #0
 8006154:	d003      	beq.n	800615e <__swbuf_r+0x3a>
 8006156:	2501      	movs	r5, #1
 8006158:	426d      	negs	r5, r5
 800615a:	0028      	movs	r0, r5
 800615c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	6820      	ldr	r0, [r4, #0]
 8006162:	b2ef      	uxtb	r7, r5
 8006164:	1ac0      	subs	r0, r0, r3
 8006166:	6963      	ldr	r3, [r4, #20]
 8006168:	b2ed      	uxtb	r5, r5
 800616a:	4283      	cmp	r3, r0
 800616c:	dc05      	bgt.n	800617a <__swbuf_r+0x56>
 800616e:	0021      	movs	r1, r4
 8006170:	0030      	movs	r0, r6
 8006172:	f7ff fcc1 	bl	8005af8 <_fflush_r>
 8006176:	2800      	cmp	r0, #0
 8006178:	d1ed      	bne.n	8006156 <__swbuf_r+0x32>
 800617a:	68a3      	ldr	r3, [r4, #8]
 800617c:	3001      	adds	r0, #1
 800617e:	3b01      	subs	r3, #1
 8006180:	60a3      	str	r3, [r4, #8]
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	6022      	str	r2, [r4, #0]
 8006188:	701f      	strb	r7, [r3, #0]
 800618a:	6963      	ldr	r3, [r4, #20]
 800618c:	4283      	cmp	r3, r0
 800618e:	d004      	beq.n	800619a <__swbuf_r+0x76>
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	07db      	lsls	r3, r3, #31
 8006194:	d5e1      	bpl.n	800615a <__swbuf_r+0x36>
 8006196:	2d0a      	cmp	r5, #10
 8006198:	d1df      	bne.n	800615a <__swbuf_r+0x36>
 800619a:	0021      	movs	r1, r4
 800619c:	0030      	movs	r0, r6
 800619e:	f7ff fcab 	bl	8005af8 <_fflush_r>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d0d9      	beq.n	800615a <__swbuf_r+0x36>
 80061a6:	e7d6      	b.n	8006156 <__swbuf_r+0x32>

080061a8 <__swsetup_r>:
 80061a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006260 <__swsetup_r+0xb8>)
 80061aa:	b570      	push	{r4, r5, r6, lr}
 80061ac:	0005      	movs	r5, r0
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	000c      	movs	r4, r1
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d004      	beq.n	80061c0 <__swsetup_r+0x18>
 80061b6:	6a03      	ldr	r3, [r0, #32]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <__swsetup_r+0x18>
 80061bc:	f7ff f9e6 	bl	800558c <__sinit>
 80061c0:	230c      	movs	r3, #12
 80061c2:	5ee2      	ldrsh	r2, [r4, r3]
 80061c4:	0713      	lsls	r3, r2, #28
 80061c6:	d423      	bmi.n	8006210 <__swsetup_r+0x68>
 80061c8:	06d3      	lsls	r3, r2, #27
 80061ca:	d407      	bmi.n	80061dc <__swsetup_r+0x34>
 80061cc:	2309      	movs	r3, #9
 80061ce:	602b      	str	r3, [r5, #0]
 80061d0:	2340      	movs	r3, #64	@ 0x40
 80061d2:	2001      	movs	r0, #1
 80061d4:	4313      	orrs	r3, r2
 80061d6:	81a3      	strh	r3, [r4, #12]
 80061d8:	4240      	negs	r0, r0
 80061da:	e03a      	b.n	8006252 <__swsetup_r+0xaa>
 80061dc:	0752      	lsls	r2, r2, #29
 80061de:	d513      	bpl.n	8006208 <__swsetup_r+0x60>
 80061e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061e2:	2900      	cmp	r1, #0
 80061e4:	d008      	beq.n	80061f8 <__swsetup_r+0x50>
 80061e6:	0023      	movs	r3, r4
 80061e8:	3344      	adds	r3, #68	@ 0x44
 80061ea:	4299      	cmp	r1, r3
 80061ec:	d002      	beq.n	80061f4 <__swsetup_r+0x4c>
 80061ee:	0028      	movs	r0, r5
 80061f0:	f7ff faf6 	bl	80057e0 <_free_r>
 80061f4:	2300      	movs	r3, #0
 80061f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80061f8:	2224      	movs	r2, #36	@ 0x24
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	4393      	bics	r3, r2
 80061fe:	81a3      	strh	r3, [r4, #12]
 8006200:	2300      	movs	r3, #0
 8006202:	6063      	str	r3, [r4, #4]
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	6023      	str	r3, [r4, #0]
 8006208:	2308      	movs	r3, #8
 800620a:	89a2      	ldrh	r2, [r4, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	81a3      	strh	r3, [r4, #12]
 8006210:	6923      	ldr	r3, [r4, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10b      	bne.n	800622e <__swsetup_r+0x86>
 8006216:	21a0      	movs	r1, #160	@ 0xa0
 8006218:	2280      	movs	r2, #128	@ 0x80
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	0089      	lsls	r1, r1, #2
 800621e:	0092      	lsls	r2, r2, #2
 8006220:	400b      	ands	r3, r1
 8006222:	4293      	cmp	r3, r2
 8006224:	d003      	beq.n	800622e <__swsetup_r+0x86>
 8006226:	0021      	movs	r1, r4
 8006228:	0028      	movs	r0, r5
 800622a:	f000 f89b 	bl	8006364 <__smakebuf_r>
 800622e:	230c      	movs	r3, #12
 8006230:	5ee2      	ldrsh	r2, [r4, r3]
 8006232:	2101      	movs	r1, #1
 8006234:	0013      	movs	r3, r2
 8006236:	400b      	ands	r3, r1
 8006238:	420a      	tst	r2, r1
 800623a:	d00b      	beq.n	8006254 <__swsetup_r+0xac>
 800623c:	2300      	movs	r3, #0
 800623e:	60a3      	str	r3, [r4, #8]
 8006240:	6963      	ldr	r3, [r4, #20]
 8006242:	425b      	negs	r3, r3
 8006244:	61a3      	str	r3, [r4, #24]
 8006246:	2000      	movs	r0, #0
 8006248:	6923      	ldr	r3, [r4, #16]
 800624a:	4283      	cmp	r3, r0
 800624c:	d101      	bne.n	8006252 <__swsetup_r+0xaa>
 800624e:	0613      	lsls	r3, r2, #24
 8006250:	d4be      	bmi.n	80061d0 <__swsetup_r+0x28>
 8006252:	bd70      	pop	{r4, r5, r6, pc}
 8006254:	0791      	lsls	r1, r2, #30
 8006256:	d400      	bmi.n	800625a <__swsetup_r+0xb2>
 8006258:	6963      	ldr	r3, [r4, #20]
 800625a:	60a3      	str	r3, [r4, #8]
 800625c:	e7f3      	b.n	8006246 <__swsetup_r+0x9e>
 800625e:	46c0      	nop			@ (mov r8, r8)
 8006260:	2000001c 	.word	0x2000001c

08006264 <_raise_r>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	0004      	movs	r4, r0
 8006268:	000d      	movs	r5, r1
 800626a:	291f      	cmp	r1, #31
 800626c:	d904      	bls.n	8006278 <_raise_r+0x14>
 800626e:	2316      	movs	r3, #22
 8006270:	6003      	str	r3, [r0, #0]
 8006272:	2001      	movs	r0, #1
 8006274:	4240      	negs	r0, r0
 8006276:	bd70      	pop	{r4, r5, r6, pc}
 8006278:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <_raise_r+0x24>
 800627e:	008a      	lsls	r2, r1, #2
 8006280:	189b      	adds	r3, r3, r2
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	2a00      	cmp	r2, #0
 8006286:	d108      	bne.n	800629a <_raise_r+0x36>
 8006288:	0020      	movs	r0, r4
 800628a:	f000 f831 	bl	80062f0 <_getpid_r>
 800628e:	002a      	movs	r2, r5
 8006290:	0001      	movs	r1, r0
 8006292:	0020      	movs	r0, r4
 8006294:	f000 f81a 	bl	80062cc <_kill_r>
 8006298:	e7ed      	b.n	8006276 <_raise_r+0x12>
 800629a:	2a01      	cmp	r2, #1
 800629c:	d009      	beq.n	80062b2 <_raise_r+0x4e>
 800629e:	1c51      	adds	r1, r2, #1
 80062a0:	d103      	bne.n	80062aa <_raise_r+0x46>
 80062a2:	2316      	movs	r3, #22
 80062a4:	6003      	str	r3, [r0, #0]
 80062a6:	2001      	movs	r0, #1
 80062a8:	e7e5      	b.n	8006276 <_raise_r+0x12>
 80062aa:	2100      	movs	r1, #0
 80062ac:	0028      	movs	r0, r5
 80062ae:	6019      	str	r1, [r3, #0]
 80062b0:	4790      	blx	r2
 80062b2:	2000      	movs	r0, #0
 80062b4:	e7df      	b.n	8006276 <_raise_r+0x12>
	...

080062b8 <raise>:
 80062b8:	b510      	push	{r4, lr}
 80062ba:	4b03      	ldr	r3, [pc, #12]	@ (80062c8 <raise+0x10>)
 80062bc:	0001      	movs	r1, r0
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	f7ff ffd0 	bl	8006264 <_raise_r>
 80062c4:	bd10      	pop	{r4, pc}
 80062c6:	46c0      	nop			@ (mov r8, r8)
 80062c8:	2000001c 	.word	0x2000001c

080062cc <_kill_r>:
 80062cc:	2300      	movs	r3, #0
 80062ce:	b570      	push	{r4, r5, r6, lr}
 80062d0:	4d06      	ldr	r5, [pc, #24]	@ (80062ec <_kill_r+0x20>)
 80062d2:	0004      	movs	r4, r0
 80062d4:	0008      	movs	r0, r1
 80062d6:	0011      	movs	r1, r2
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	f7fa fe35 	bl	8000f48 <_kill>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	d103      	bne.n	80062ea <_kill_r+0x1e>
 80062e2:	682b      	ldr	r3, [r5, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d000      	beq.n	80062ea <_kill_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	20001bf8 	.word	0x20001bf8

080062f0 <_getpid_r>:
 80062f0:	b510      	push	{r4, lr}
 80062f2:	f7fa fe23 	bl	8000f3c <_getpid>
 80062f6:	bd10      	pop	{r4, pc}

080062f8 <memchr>:
 80062f8:	b2c9      	uxtb	r1, r1
 80062fa:	1882      	adds	r2, r0, r2
 80062fc:	4290      	cmp	r0, r2
 80062fe:	d101      	bne.n	8006304 <memchr+0xc>
 8006300:	2000      	movs	r0, #0
 8006302:	4770      	bx	lr
 8006304:	7803      	ldrb	r3, [r0, #0]
 8006306:	428b      	cmp	r3, r1
 8006308:	d0fb      	beq.n	8006302 <memchr+0xa>
 800630a:	3001      	adds	r0, #1
 800630c:	e7f6      	b.n	80062fc <memchr+0x4>
	...

08006310 <__swhatbuf_r>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	000e      	movs	r6, r1
 8006314:	001d      	movs	r5, r3
 8006316:	230e      	movs	r3, #14
 8006318:	5ec9      	ldrsh	r1, [r1, r3]
 800631a:	0014      	movs	r4, r2
 800631c:	b096      	sub	sp, #88	@ 0x58
 800631e:	2900      	cmp	r1, #0
 8006320:	da0c      	bge.n	800633c <__swhatbuf_r+0x2c>
 8006322:	89b2      	ldrh	r2, [r6, #12]
 8006324:	2380      	movs	r3, #128	@ 0x80
 8006326:	0011      	movs	r1, r2
 8006328:	4019      	ands	r1, r3
 800632a:	421a      	tst	r2, r3
 800632c:	d114      	bne.n	8006358 <__swhatbuf_r+0x48>
 800632e:	2380      	movs	r3, #128	@ 0x80
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	2000      	movs	r0, #0
 8006334:	6029      	str	r1, [r5, #0]
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	b016      	add	sp, #88	@ 0x58
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	466a      	mov	r2, sp
 800633e:	f000 f853 	bl	80063e8 <_fstat_r>
 8006342:	2800      	cmp	r0, #0
 8006344:	dbed      	blt.n	8006322 <__swhatbuf_r+0x12>
 8006346:	23f0      	movs	r3, #240	@ 0xf0
 8006348:	9901      	ldr	r1, [sp, #4]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	4019      	ands	r1, r3
 800634e:	4b04      	ldr	r3, [pc, #16]	@ (8006360 <__swhatbuf_r+0x50>)
 8006350:	18c9      	adds	r1, r1, r3
 8006352:	424b      	negs	r3, r1
 8006354:	4159      	adcs	r1, r3
 8006356:	e7ea      	b.n	800632e <__swhatbuf_r+0x1e>
 8006358:	2100      	movs	r1, #0
 800635a:	2340      	movs	r3, #64	@ 0x40
 800635c:	e7e9      	b.n	8006332 <__swhatbuf_r+0x22>
 800635e:	46c0      	nop			@ (mov r8, r8)
 8006360:	ffffe000 	.word	0xffffe000

08006364 <__smakebuf_r>:
 8006364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006366:	2602      	movs	r6, #2
 8006368:	898b      	ldrh	r3, [r1, #12]
 800636a:	0005      	movs	r5, r0
 800636c:	000c      	movs	r4, r1
 800636e:	b085      	sub	sp, #20
 8006370:	4233      	tst	r3, r6
 8006372:	d007      	beq.n	8006384 <__smakebuf_r+0x20>
 8006374:	0023      	movs	r3, r4
 8006376:	3347      	adds	r3, #71	@ 0x47
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	6123      	str	r3, [r4, #16]
 800637c:	2301      	movs	r3, #1
 800637e:	6163      	str	r3, [r4, #20]
 8006380:	b005      	add	sp, #20
 8006382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006384:	ab03      	add	r3, sp, #12
 8006386:	aa02      	add	r2, sp, #8
 8006388:	f7ff ffc2 	bl	8006310 <__swhatbuf_r>
 800638c:	9f02      	ldr	r7, [sp, #8]
 800638e:	9001      	str	r0, [sp, #4]
 8006390:	0039      	movs	r1, r7
 8006392:	0028      	movs	r0, r5
 8006394:	f7ff fa9a 	bl	80058cc <_malloc_r>
 8006398:	2800      	cmp	r0, #0
 800639a:	d108      	bne.n	80063ae <__smakebuf_r+0x4a>
 800639c:	220c      	movs	r2, #12
 800639e:	5ea3      	ldrsh	r3, [r4, r2]
 80063a0:	059a      	lsls	r2, r3, #22
 80063a2:	d4ed      	bmi.n	8006380 <__smakebuf_r+0x1c>
 80063a4:	2203      	movs	r2, #3
 80063a6:	4393      	bics	r3, r2
 80063a8:	431e      	orrs	r6, r3
 80063aa:	81a6      	strh	r6, [r4, #12]
 80063ac:	e7e2      	b.n	8006374 <__smakebuf_r+0x10>
 80063ae:	2380      	movs	r3, #128	@ 0x80
 80063b0:	89a2      	ldrh	r2, [r4, #12]
 80063b2:	6020      	str	r0, [r4, #0]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	81a3      	strh	r3, [r4, #12]
 80063b8:	9b03      	ldr	r3, [sp, #12]
 80063ba:	6120      	str	r0, [r4, #16]
 80063bc:	6167      	str	r7, [r4, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00c      	beq.n	80063dc <__smakebuf_r+0x78>
 80063c2:	0028      	movs	r0, r5
 80063c4:	230e      	movs	r3, #14
 80063c6:	5ee1      	ldrsh	r1, [r4, r3]
 80063c8:	f000 f820 	bl	800640c <_isatty_r>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d005      	beq.n	80063dc <__smakebuf_r+0x78>
 80063d0:	2303      	movs	r3, #3
 80063d2:	89a2      	ldrh	r2, [r4, #12]
 80063d4:	439a      	bics	r2, r3
 80063d6:	3b02      	subs	r3, #2
 80063d8:	4313      	orrs	r3, r2
 80063da:	81a3      	strh	r3, [r4, #12]
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	9a01      	ldr	r2, [sp, #4]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	81a3      	strh	r3, [r4, #12]
 80063e4:	e7cc      	b.n	8006380 <__smakebuf_r+0x1c>
	...

080063e8 <_fstat_r>:
 80063e8:	2300      	movs	r3, #0
 80063ea:	b570      	push	{r4, r5, r6, lr}
 80063ec:	4d06      	ldr	r5, [pc, #24]	@ (8006408 <_fstat_r+0x20>)
 80063ee:	0004      	movs	r4, r0
 80063f0:	0008      	movs	r0, r1
 80063f2:	0011      	movs	r1, r2
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	f7fa fe07 	bl	8001008 <_fstat>
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	d103      	bne.n	8006406 <_fstat_r+0x1e>
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d000      	beq.n	8006406 <_fstat_r+0x1e>
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	20001bf8 	.word	0x20001bf8

0800640c <_isatty_r>:
 800640c:	2300      	movs	r3, #0
 800640e:	b570      	push	{r4, r5, r6, lr}
 8006410:	4d06      	ldr	r5, [pc, #24]	@ (800642c <_isatty_r+0x20>)
 8006412:	0004      	movs	r4, r0
 8006414:	0008      	movs	r0, r1
 8006416:	602b      	str	r3, [r5, #0]
 8006418:	f7fa fe04 	bl	8001024 <_isatty>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d103      	bne.n	8006428 <_isatty_r+0x1c>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d000      	beq.n	8006428 <_isatty_r+0x1c>
 8006426:	6023      	str	r3, [r4, #0]
 8006428:	bd70      	pop	{r4, r5, r6, pc}
 800642a:	46c0      	nop			@ (mov r8, r8)
 800642c:	20001bf8 	.word	0x20001bf8

08006430 <_init>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	46c0      	nop			@ (mov r8, r8)
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr

0800643c <_fini>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	46c0      	nop			@ (mov r8, r8)
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr
