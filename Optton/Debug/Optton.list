
Optton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e28  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08003ee4  08003ee4  00004ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004094  08004094  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  08004094  08004094  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004094  08004094  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004094  08004094  00005094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004098  08004098  00005098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800409c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  08004104  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004104  000062b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008295  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1b  00000000  00000000  0000e325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  00010040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000067a  00000000  00000000  000108f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186d3  00000000  00000000  00010f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6c9  00000000  00000000  0002963d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a48  00000000  00000000  00033d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c874e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000272c  00000000  00000000  000c8794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000caec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003ecc 	.word	0x08003ecc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08003ecc 	.word	0x08003ecc

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_lmul>:
 8000404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000406:	46ce      	mov	lr, r9
 8000408:	4699      	mov	r9, r3
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	469c      	mov	ip, r3
 800040e:	0413      	lsls	r3, r2, #16
 8000410:	4647      	mov	r7, r8
 8000412:	0c1b      	lsrs	r3, r3, #16
 8000414:	001d      	movs	r5, r3
 8000416:	000e      	movs	r6, r1
 8000418:	4661      	mov	r1, ip
 800041a:	0404      	lsls	r4, r0, #16
 800041c:	0c24      	lsrs	r4, r4, #16
 800041e:	b580      	push	{r7, lr}
 8000420:	0007      	movs	r7, r0
 8000422:	0c10      	lsrs	r0, r2, #16
 8000424:	434b      	muls	r3, r1
 8000426:	4365      	muls	r5, r4
 8000428:	4341      	muls	r1, r0
 800042a:	4360      	muls	r0, r4
 800042c:	0c2c      	lsrs	r4, r5, #16
 800042e:	18c0      	adds	r0, r0, r3
 8000430:	1824      	adds	r4, r4, r0
 8000432:	468c      	mov	ip, r1
 8000434:	42a3      	cmp	r3, r4
 8000436:	d903      	bls.n	8000440 <__aeabi_lmul+0x3c>
 8000438:	2380      	movs	r3, #128	@ 0x80
 800043a:	025b      	lsls	r3, r3, #9
 800043c:	4698      	mov	r8, r3
 800043e:	44c4      	add	ip, r8
 8000440:	4649      	mov	r1, r9
 8000442:	4379      	muls	r1, r7
 8000444:	4356      	muls	r6, r2
 8000446:	0c23      	lsrs	r3, r4, #16
 8000448:	042d      	lsls	r5, r5, #16
 800044a:	0c2d      	lsrs	r5, r5, #16
 800044c:	1989      	adds	r1, r1, r6
 800044e:	4463      	add	r3, ip
 8000450:	0424      	lsls	r4, r4, #16
 8000452:	1960      	adds	r0, r4, r5
 8000454:	18c9      	adds	r1, r1, r3
 8000456:	bcc0      	pop	{r6, r7}
 8000458:	46b9      	mov	r9, r7
 800045a:	46b0      	mov	r8, r6
 800045c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)

08000460 <WaitForStart>:
#define IOCON 0x0A

int TEST;
extern SPI_HandleTypeDef hspi1;

void WaitForStart() {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
    uint32_t start_time = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, LED_on_Pin, GPIO_PIN_RESET);
 800046a:	4b30      	ldr	r3, [pc, #192]	@ (800052c <WaitForStart+0xcc>)
 800046c:	2200      	movs	r2, #0
 800046e:	2180      	movs	r1, #128	@ 0x80
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fb44 	bl	8001afe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_onB8_Pin, GPIO_PIN_RESET);
 8000476:	2380      	movs	r3, #128	@ 0x80
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	482c      	ldr	r0, [pc, #176]	@ (800052c <WaitForStart+0xcc>)
 800047c:	2200      	movs	r2, #0
 800047e:	0019      	movs	r1, r3
 8000480:	f001 fb3d 	bl	8001afe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, LED_off_Pin, GPIO_PIN_SET);
 8000484:	2380      	movs	r3, #128	@ 0x80
 8000486:	01db      	lsls	r3, r3, #7
 8000488:	4829      	ldr	r0, [pc, #164]	@ (8000530 <WaitForStart+0xd0>)
 800048a:	2201      	movs	r2, #1
 800048c:	0019      	movs	r1, r3
 800048e:	f001 fb36 	bl	8001afe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, LED_offC15_Pin, GPIO_PIN_SET);
 8000492:	2380      	movs	r3, #128	@ 0x80
 8000494:	021b      	lsls	r3, r3, #8
 8000496:	4826      	ldr	r0, [pc, #152]	@ (8000530 <WaitForStart+0xd0>)
 8000498:	2201      	movs	r2, #1
 800049a:	0019      	movs	r1, r3
 800049c:	f001 fb2f 	bl	8001afe <HAL_GPIO_WritePin>

    LED_Status(1, 1);
 80004a0:	2101      	movs	r1, #1
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 f894 	bl	80005d0 <LED_Status>
    LED_Status(3, 1);
 80004a8:	2101      	movs	r1, #1
 80004aa:	2003      	movs	r0, #3
 80004ac:	f000 f890 	bl	80005d0 <LED_Status>

    while (!started) {
 80004b0:	e032      	b.n	8000518 <WaitForStart+0xb8>
        if (HAL_GPIO_ReadPin(GPIOA, OP1_Pin) && HAL_GPIO_ReadPin(GPIOA, OP3_Pin)) {
 80004b2:	2380      	movs	r3, #128	@ 0x80
 80004b4:	005a      	lsls	r2, r3, #1
 80004b6:	23a0      	movs	r3, #160	@ 0xa0
 80004b8:	05db      	lsls	r3, r3, #23
 80004ba:	0011      	movs	r1, r2
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fb01 	bl	8001ac4 <HAL_GPIO_ReadPin>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d026      	beq.n	8000514 <WaitForStart+0xb4>
 80004c6:	2380      	movs	r3, #128	@ 0x80
 80004c8:	015a      	lsls	r2, r3, #5
 80004ca:	23a0      	movs	r3, #160	@ 0xa0
 80004cc:	05db      	lsls	r3, r3, #23
 80004ce:	0011      	movs	r1, r2
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 faf7 	bl	8001ac4 <HAL_GPIO_ReadPin>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d01c      	beq.n	8000514 <WaitForStart+0xb4>
            if (start_time == 0) {
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d103      	bne.n	80004e8 <WaitForStart+0x88>
                start_time = HAL_GetTick();
 80004e0:	f000 fe8a 	bl	80011f8 <HAL_GetTick>
 80004e4:	0003      	movs	r3, r0
 80004e6:	607b      	str	r3, [r7, #4]
            }
            if (HAL_GetTick() - start_time >= 5000) {
 80004e8:	f000 fe86 	bl	80011f8 <HAL_GetTick>
 80004ec:	0002      	movs	r2, r0
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	4a10      	ldr	r2, [pc, #64]	@ (8000534 <WaitForStart+0xd4>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d90f      	bls.n	8000518 <WaitForStart+0xb8>
                started = 1;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <WaitForStart+0xd8>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	601a      	str	r2, [r3, #0]
                LED_Status(1, 0);
 80004fe:	2100      	movs	r1, #0
 8000500:	2001      	movs	r0, #1
 8000502:	f000 f865 	bl	80005d0 <LED_Status>
                LED_Status(3, 0);
 8000506:	2100      	movs	r1, #0
 8000508:	2003      	movs	r0, #3
 800050a:	f000 f861 	bl	80005d0 <LED_Status>
                GeneratePattern();
 800050e:	f000 f815 	bl	800053c <GeneratePattern>
            if (HAL_GetTick() - start_time >= 5000) {
 8000512:	e001      	b.n	8000518 <WaitForStart+0xb8>
            }
        } else {
            start_time = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
    while (!started) {
 8000518:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <WaitForStart+0xd8>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0c8      	beq.n	80004b2 <WaitForStart+0x52>
        }
    }
}
 8000520:	46c0      	nop			@ (mov r8, r8)
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b002      	add	sp, #8
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	50000400 	.word	0x50000400
 8000530:	50000800 	.word	0x50000800
 8000534:	00001387 	.word	0x00001387
 8000538:	20000098 	.word	0x20000098

0800053c <GeneratePattern>:

void GeneratePattern() {
 800053c:	b580      	push	{r7, lr}
 800053e:	b0a6      	sub	sp, #152	@ 0x98
 8000540:	af00      	add	r7, sp, #0
    int patterns[12][3] = {
 8000542:	003a      	movs	r2, r7
 8000544:	4b1f      	ldr	r3, [pc, #124]	@ (80005c4 <GeneratePattern+0x88>)
 8000546:	0010      	movs	r0, r2
 8000548:	0019      	movs	r1, r3
 800054a:	2390      	movs	r3, #144	@ 0x90
 800054c:	001a      	movs	r2, r3
 800054e:	f002 fe6e 	bl	800322e <memcpy>
        {1, 2, 1}, {1, 2, 3}, {1, 3, 1}, {1, 3, 2},
        {2, 1, 2}, {2, 1, 3}, {2, 3, 1}, {2, 3, 2},
        {3, 1, 2}, {3, 1, 3}, {3, 2, 1}, {3, 2, 3}
    };
    srand(HAL_GetTick());
 8000552:	f000 fe51 	bl	80011f8 <HAL_GetTick>
 8000556:	0003      	movs	r3, r0
 8000558:	0018      	movs	r0, r3
 800055a:	f002 fc67 	bl	8002e2c <srand>
    int index = rand() % 12;
 800055e:	f002 fc95 	bl	8002e8c <rand>
 8000562:	0003      	movs	r3, r0
 8000564:	210c      	movs	r1, #12
 8000566:	0018      	movs	r0, r3
 8000568:	f7ff ff46 	bl	80003f8 <__aeabi_idivmod>
 800056c:	000b      	movs	r3, r1
 800056e:	2290      	movs	r2, #144	@ 0x90
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 3; i++) {
 8000574:	2300      	movs	r3, #0
 8000576:	2294      	movs	r2, #148	@ 0x94
 8000578:	18ba      	adds	r2, r7, r2
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	e016      	b.n	80005ac <GeneratePattern+0x70>
        pattern[i] = patterns[index][i];
 800057e:	0039      	movs	r1, r7
 8000580:	2390      	movs	r3, #144	@ 0x90
 8000582:	18fb      	adds	r3, r7, r3
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	0013      	movs	r3, r2
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	189b      	adds	r3, r3, r2
 800058c:	2094      	movs	r0, #148	@ 0x94
 800058e:	183a      	adds	r2, r7, r0
 8000590:	6812      	ldr	r2, [r2, #0]
 8000592:	189b      	adds	r3, r3, r2
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	5859      	ldr	r1, [r3, r1]
 8000598:	4b0b      	ldr	r3, [pc, #44]	@ (80005c8 <GeneratePattern+0x8c>)
 800059a:	183a      	adds	r2, r7, r0
 800059c:	6812      	ldr	r2, [r2, #0]
 800059e:	0092      	lsls	r2, r2, #2
 80005a0:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < 3; i++) {
 80005a2:	183b      	adds	r3, r7, r0
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	3301      	adds	r3, #1
 80005a8:	183a      	adds	r2, r7, r0
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	2394      	movs	r3, #148	@ 0x94
 80005ae:	18fb      	adds	r3, r7, r3
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	dde3      	ble.n	800057e <GeneratePattern+0x42>
    }
    step = 0;
 80005b6:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <GeneratePattern+0x90>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
}
 80005bc:	46c0      	nop			@ (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b026      	add	sp, #152	@ 0x98
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	08003ee4 	.word	0x08003ee4
 80005c8:	20000088 	.word	0x20000088
 80005cc:	20000094 	.word	0x20000094

080005d0 <LED_Status>:

void LED_Status(int index, int state) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
    GPIO_TypeDef *port;
    uint16_t pin;
    uint16_t pin1;

    switch (index) {
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d01f      	beq.n	8000620 <LED_Status+0x50>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	dc40      	bgt.n	8000668 <LED_Status+0x98>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d003      	beq.n	80005f4 <LED_Status+0x24>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d00b      	beq.n	800060a <LED_Status+0x3a>
        case 1: port = GPIOB; pin = LED_1B1_Pin; pin1 = LED_1_Pin; break;
        case 2: port = GPIOB; pin = LED_2B6_Pin; pin1 = LED_2_Pin;break;
        case 3: port = GPIOB; pin = LED_3B4_Pin; pin1 = LED_3_Pin;break;
        default: return;
 80005f2:	e039      	b.n	8000668 <LED_Status+0x98>
        case 1: port = GPIOB; pin = LED_1B1_Pin; pin1 = LED_1_Pin; break;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <LED_Status+0xa0>)
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	230a      	movs	r3, #10
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	2202      	movs	r2, #2
 80005fe:	801a      	strh	r2, [r3, #0]
 8000600:	2308      	movs	r3, #8
 8000602:	18fb      	adds	r3, r7, r3
 8000604:	2201      	movs	r2, #1
 8000606:	801a      	strh	r2, [r3, #0]
 8000608:	e015      	b.n	8000636 <LED_Status+0x66>
        case 2: port = GPIOB; pin = LED_2B6_Pin; pin1 = LED_2_Pin;break;
 800060a:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <LED_Status+0xa0>)
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	230a      	movs	r3, #10
 8000610:	18fb      	adds	r3, r7, r3
 8000612:	2240      	movs	r2, #64	@ 0x40
 8000614:	801a      	strh	r2, [r3, #0]
 8000616:	2308      	movs	r3, #8
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	2220      	movs	r2, #32
 800061c:	801a      	strh	r2, [r3, #0]
 800061e:	e00a      	b.n	8000636 <LED_Status+0x66>
        case 3: port = GPIOB; pin = LED_3B4_Pin; pin1 = LED_3_Pin;break;
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <LED_Status+0xa0>)
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	230a      	movs	r3, #10
 8000626:	18fb      	adds	r3, r7, r3
 8000628:	2210      	movs	r2, #16
 800062a:	801a      	strh	r2, [r3, #0]
 800062c:	2308      	movs	r3, #8
 800062e:	18fb      	adds	r3, r7, r3
 8000630:	2208      	movs	r2, #8
 8000632:	801a      	strh	r2, [r3, #0]
 8000634:	46c0      	nop			@ (mov r8, r8)
    }
    HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	4193      	sbcs	r3, r2
 800063c:	b2db      	uxtb	r3, r3
 800063e:	001a      	movs	r2, r3
 8000640:	230a      	movs	r3, #10
 8000642:	18fb      	adds	r3, r7, r3
 8000644:	8819      	ldrh	r1, [r3, #0]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fa58 	bl	8001afe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(port, pin1, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	1e5a      	subs	r2, r3, #1
 8000652:	4193      	sbcs	r3, r2
 8000654:	b2db      	uxtb	r3, r3
 8000656:	001a      	movs	r2, r3
 8000658:	2308      	movs	r3, #8
 800065a:	18fb      	adds	r3, r7, r3
 800065c:	8819      	ldrh	r1, [r3, #0]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fa4c 	bl	8001afe <HAL_GPIO_WritePin>
 8000666:	e000      	b.n	800066a <LED_Status+0x9a>
        default: return;
 8000668:	46c0      	nop			@ (mov r8, r8)
}
 800066a:	46bd      	mov	sp, r7
 800066c:	b004      	add	sp, #16
 800066e:	bd80      	pop	{r7, pc}
 8000670:	50000400 	.word	0x50000400

08000674 <TurnOffAllLEDs>:

void TurnOffAllLEDs(int delay) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    LED_Status(1, 0);
 800067c:	2100      	movs	r1, #0
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff ffa6 	bl	80005d0 <LED_Status>
    LED_Status(2, 0);
 8000684:	2100      	movs	r1, #0
 8000686:	2002      	movs	r0, #2
 8000688:	f7ff ffa2 	bl	80005d0 <LED_Status>
    LED_Status(3, 0);
 800068c:	2100      	movs	r1, #0
 800068e:	2003      	movs	r0, #3
 8000690:	f7ff ff9e 	bl	80005d0 <LED_Status>
    HAL_Delay(delay);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fdb8 	bl	800120c <HAL_Delay>
}
 800069c:	46c0      	nop			@ (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b002      	add	sp, #8
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <ProcessPattern>:

void ProcessPattern() {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0

    if (started == 1) {
 80006aa:	4b73      	ldr	r3, [pc, #460]	@ (8000878 <ProcessPattern+0x1d4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d000      	beq.n	80006b4 <ProcessPattern+0x10>
 80006b2:	e0da      	b.n	800086a <ProcessPattern+0x1c6>
        TurnOffAllLEDs(1000);
 80006b4:	23fa      	movs	r3, #250	@ 0xfa
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f7ff ffdb 	bl	8000674 <TurnOffAllLEDs>

        for (int i = 0; i < 3; i++) {
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	e02f      	b.n	8000724 <ProcessPattern+0x80>
            LED_Status(pattern[i], 1);
 80006c4:	4b6d      	ldr	r3, [pc, #436]	@ (800087c <ProcessPattern+0x1d8>)
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	0092      	lsls	r2, r2, #2
 80006ca:	58d3      	ldr	r3, [r2, r3]
 80006cc:	2101      	movs	r1, #1
 80006ce:	0018      	movs	r0, r3
 80006d0:	f7ff ff7e 	bl	80005d0 <LED_Status>
            while (!ReadButton(GPIOA, (pattern[i] == 1 ? OP1_Pin : pattern[i] == 2 ? OP2_Pin : OP3_Pin)));
 80006d4:	46c0      	nop			@ (mov r8, r8)
 80006d6:	4b69      	ldr	r3, [pc, #420]	@ (800087c <ProcessPattern+0x1d8>)
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	0092      	lsls	r2, r2, #2
 80006dc:	58d3      	ldr	r3, [r2, r3]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d00b      	beq.n	80006fa <ProcessPattern+0x56>
 80006e2:	4b66      	ldr	r3, [pc, #408]	@ (800087c <ProcessPattern+0x1d8>)
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	0092      	lsls	r2, r2, #2
 80006e8:	58d3      	ldr	r3, [r2, r3]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d102      	bne.n	80006f4 <ProcessPattern+0x50>
 80006ee:	2380      	movs	r3, #128	@ 0x80
 80006f0:	021b      	lsls	r3, r3, #8
 80006f2:	e004      	b.n	80006fe <ProcessPattern+0x5a>
 80006f4:	2380      	movs	r3, #128	@ 0x80
 80006f6:	015b      	lsls	r3, r3, #5
 80006f8:	e001      	b.n	80006fe <ProcessPattern+0x5a>
 80006fa:	2380      	movs	r3, #128	@ 0x80
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	22a0      	movs	r2, #160	@ 0xa0
 8000700:	05d2      	lsls	r2, r2, #23
 8000702:	0019      	movs	r1, r3
 8000704:	0010      	movs	r0, r2
 8000706:	f000 f8c3 	bl	8000890 <ReadButton>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d0e3      	beq.n	80006d6 <ProcessPattern+0x32>
            LED_Status(pattern[i], 0);
 800070e:	4b5b      	ldr	r3, [pc, #364]	@ (800087c <ProcessPattern+0x1d8>)
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	0092      	lsls	r2, r2, #2
 8000714:	58d3      	ldr	r3, [r2, r3]
 8000716:	2100      	movs	r1, #0
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff ff59 	bl	80005d0 <LED_Status>
        for (int i = 0; i < 3; i++) {
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2b02      	cmp	r3, #2
 8000728:	ddcc      	ble.n	80006c4 <ProcessPattern+0x20>
        }
        pattern_count = 1;
 800072a:	4b55      	ldr	r3, [pc, #340]	@ (8000880 <ProcessPattern+0x1dc>)
 800072c:	2201      	movs	r2, #1
 800072e:	601a      	str	r2, [r3, #0]

        HAL_GPIO_WritePin(GPIOB, LED_on_Pin, GPIO_PIN_SET);
 8000730:	4b54      	ldr	r3, [pc, #336]	@ (8000884 <ProcessPattern+0x1e0>)
 8000732:	2201      	movs	r2, #1
 8000734:	2180      	movs	r1, #128	@ 0x80
 8000736:	0018      	movs	r0, r3
 8000738:	f001 f9e1 	bl	8001afe <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_onB8_Pin, GPIO_PIN_SET);
 800073c:	2380      	movs	r3, #128	@ 0x80
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4850      	ldr	r0, [pc, #320]	@ (8000884 <ProcessPattern+0x1e0>)
 8000742:	2201      	movs	r2, #1
 8000744:	0019      	movs	r1, r3
 8000746:	f001 f9da 	bl	8001afe <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, LED_off_Pin, GPIO_PIN_RESET);
 800074a:	2380      	movs	r3, #128	@ 0x80
 800074c:	01db      	lsls	r3, r3, #7
 800074e:	484e      	ldr	r0, [pc, #312]	@ (8000888 <ProcessPattern+0x1e4>)
 8000750:	2200      	movs	r2, #0
 8000752:	0019      	movs	r1, r3
 8000754:	f001 f9d3 	bl	8001afe <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, LED_offC15_Pin, GPIO_PIN_RESET);
 8000758:	2380      	movs	r3, #128	@ 0x80
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	484a      	ldr	r0, [pc, #296]	@ (8000888 <ProcessPattern+0x1e4>)
 800075e:	2200      	movs	r2, #0
 8000760:	0019      	movs	r1, r3
 8000762:	f001 f9cc 	bl	8001afe <HAL_GPIO_WritePin>

        for(int m = 0 ; m < 1000 ; m++){
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	e004      	b.n	8000776 <ProcessPattern+0xd2>
        Send_dataA();
 800076c:	f000 f92a 	bl	80009c4 <Send_dataA>
        for(int m = 0 ; m < 1000 ; m++){
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	3301      	adds	r3, #1
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	23fa      	movs	r3, #250	@ 0xfa
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	429a      	cmp	r2, r3
 800077e:	dbf5      	blt.n	800076c <ProcessPattern+0xc8>
        }

        TurnOffAllLEDs(1500);
 8000780:	4b42      	ldr	r3, [pc, #264]	@ (800088c <ProcessPattern+0x1e8>)
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff ff76 	bl	8000674 <TurnOffAllLEDs>

        for (int i = 0; i < 3; i++) {
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	e02f      	b.n	80007ee <ProcessPattern+0x14a>
            LED_Status(pattern[i], 1);
 800078e:	4b3b      	ldr	r3, [pc, #236]	@ (800087c <ProcessPattern+0x1d8>)
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	0092      	lsls	r2, r2, #2
 8000794:	58d3      	ldr	r3, [r2, r3]
 8000796:	2101      	movs	r1, #1
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff ff19 	bl	80005d0 <LED_Status>
            while (!ReadButton(GPIOA, (pattern[i] == 1 ? OP1_Pin : pattern[i] == 2 ? OP2_Pin : OP3_Pin)));
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	4b36      	ldr	r3, [pc, #216]	@ (800087c <ProcessPattern+0x1d8>)
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	0092      	lsls	r2, r2, #2
 80007a6:	58d3      	ldr	r3, [r2, r3]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d00b      	beq.n	80007c4 <ProcessPattern+0x120>
 80007ac:	4b33      	ldr	r3, [pc, #204]	@ (800087c <ProcessPattern+0x1d8>)
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	0092      	lsls	r2, r2, #2
 80007b2:	58d3      	ldr	r3, [r2, r3]
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d102      	bne.n	80007be <ProcessPattern+0x11a>
 80007b8:	2380      	movs	r3, #128	@ 0x80
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	e004      	b.n	80007c8 <ProcessPattern+0x124>
 80007be:	2380      	movs	r3, #128	@ 0x80
 80007c0:	015b      	lsls	r3, r3, #5
 80007c2:	e001      	b.n	80007c8 <ProcessPattern+0x124>
 80007c4:	2380      	movs	r3, #128	@ 0x80
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	22a0      	movs	r2, #160	@ 0xa0
 80007ca:	05d2      	lsls	r2, r2, #23
 80007cc:	0019      	movs	r1, r3
 80007ce:	0010      	movs	r0, r2
 80007d0:	f000 f85e 	bl	8000890 <ReadButton>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d0e3      	beq.n	80007a0 <ProcessPattern+0xfc>
            LED_Status(pattern[i], 0);
 80007d8:	4b28      	ldr	r3, [pc, #160]	@ (800087c <ProcessPattern+0x1d8>)
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	0092      	lsls	r2, r2, #2
 80007de:	58d3      	ldr	r3, [r2, r3]
 80007e0:	2100      	movs	r1, #0
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff fef4 	bl	80005d0 <LED_Status>
        for (int i = 0; i < 3; i++) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3301      	adds	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	ddcc      	ble.n	800078e <ProcessPattern+0xea>
        }
        pattern_count = 0;
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <ProcessPattern+0x1dc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, LED_on_Pin, GPIO_PIN_RESET);
 80007fa:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <ProcessPattern+0x1e0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	2180      	movs	r1, #128	@ 0x80
 8000800:	0018      	movs	r0, r3
 8000802:	f001 f97c 	bl	8001afe <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_onB8_Pin, GPIO_PIN_RESET);
 8000806:	2380      	movs	r3, #128	@ 0x80
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	481e      	ldr	r0, [pc, #120]	@ (8000884 <ProcessPattern+0x1e0>)
 800080c:	2200      	movs	r2, #0
 800080e:	0019      	movs	r1, r3
 8000810:	f001 f975 	bl	8001afe <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, LED_off_Pin, GPIO_PIN_SET);
 8000814:	2380      	movs	r3, #128	@ 0x80
 8000816:	01db      	lsls	r3, r3, #7
 8000818:	481b      	ldr	r0, [pc, #108]	@ (8000888 <ProcessPattern+0x1e4>)
 800081a:	2201      	movs	r2, #1
 800081c:	0019      	movs	r1, r3
 800081e:	f001 f96e 	bl	8001afe <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, LED_offC15_Pin, GPIO_PIN_SET);
 8000822:	2380      	movs	r3, #128	@ 0x80
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	4818      	ldr	r0, [pc, #96]	@ (8000888 <ProcessPattern+0x1e4>)
 8000828:	2201      	movs	r2, #1
 800082a:	0019      	movs	r1, r3
 800082c:	f001 f967 	bl	8001afe <HAL_GPIO_WritePin>

        for(int n = 0 ; n < 1000 ; n++){
 8000830:	2300      	movs	r3, #0
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	e004      	b.n	8000840 <ProcessPattern+0x19c>
        Send_dataB();
 8000836:	f000 f8d2 	bl	80009de <Send_dataB>
        for(int n = 0 ; n < 1000 ; n++){
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683a      	ldr	r2, [r7, #0]
 8000842:	23fa      	movs	r3, #250	@ 0xfa
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	429a      	cmp	r2, r3
 8000848:	dbf5      	blt.n	8000836 <ProcessPattern+0x192>
        }

        TurnOffAllLEDs(1500);
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <ProcessPattern+0x1e8>)
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff ff11 	bl	8000674 <TurnOffAllLEDs>

        started = 0;
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <ProcessPattern+0x1d4>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
        WaitForStart();
 8000858:	f7ff fe02 	bl	8000460 <WaitForStart>

        if (pattern_count == 0) {
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <ProcessPattern+0x1dc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d104      	bne.n	800086e <ProcessPattern+0x1ca>
            WaitForStart();
 8000864:	f7ff fdfc 	bl	8000460 <WaitForStart>
        }
    } else {
        WaitForStart();
    }
}
 8000868:	e001      	b.n	800086e <ProcessPattern+0x1ca>
        WaitForStart();
 800086a:	f7ff fdf9 	bl	8000460 <WaitForStart>
}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b004      	add	sp, #16
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	20000098 	.word	0x20000098
 800087c:	20000088 	.word	0x20000088
 8000880:	2000009c 	.word	0x2000009c
 8000884:	50000400 	.word	0x50000400
 8000888:	50000800 	.word	0x50000800
 800088c:	000005dc 	.word	0x000005dc

08000890 <ReadButton>:

uint8_t ReadButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	000a      	movs	r2, r1
 800089a:	1cbb      	adds	r3, r7, #2
 800089c:	801a      	strh	r2, [r3, #0]
    uint32_t start_time = HAL_GetTick();
 800089e:	f000 fcab 	bl	80011f8 <HAL_GetTick>
 80008a2:	0003      	movs	r3, r0
 80008a4:	60fb      	str	r3, [r7, #12]
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 80008a6:	e015      	b.n	80008d4 <ReadButton+0x44>
        if (HAL_GetTick() - start_time >= 500) {
 80008a8:	f000 fca6 	bl	80011f8 <HAL_GetTick>
 80008ac:	0002      	movs	r2, r0
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	1ad2      	subs	r2, r2, r3
 80008b2:	23fa      	movs	r3, #250	@ 0xfa
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d30c      	bcc.n	80008d4 <ReadButton+0x44>
            while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET);  // รอจนปล่อยปุ่ม
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	1cbb      	adds	r3, r7, #2
 80008be:	881a      	ldrh	r2, [r3, #0]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	0011      	movs	r1, r2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f001 f8fd 	bl	8001ac4 <HAL_GPIO_ReadPin>
 80008ca:	0003      	movs	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d0f5      	beq.n	80008bc <ReadButton+0x2c>
            return 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e00a      	b.n	80008ea <ReadButton+0x5a>
    while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET) {
 80008d4:	1cbb      	adds	r3, r7, #2
 80008d6:	881a      	ldrh	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	0011      	movs	r1, r2
 80008dc:	0018      	movs	r0, r3
 80008de:	f001 f8f1 	bl	8001ac4 <HAL_GPIO_ReadPin>
 80008e2:	0003      	movs	r3, r0
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d0df      	beq.n	80008a8 <ReadButton+0x18>
        }
    }
    return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	0018      	movs	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b004      	add	sp, #16
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <MCP23S17_Write>:

void MCP23S17_Write(uint8_t reg, uint8_t value) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	0002      	movs	r2, r0
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	701a      	strb	r2, [r3, #0]
 8000900:	1dbb      	adds	r3, r7, #6
 8000902:	1c0a      	adds	r2, r1, #0
 8000904:	701a      	strb	r2, [r3, #0]

    data[0] = MCP23S17_ADDR;
 8000906:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <MCP23S17_Write+0x60>)
 8000908:	2240      	movs	r2, #64	@ 0x40
 800090a:	701a      	strb	r2, [r3, #0]
    data[1] = 0x00;
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MCP23S17_Write+0x60>)
 800090e:	2200      	movs	r2, #0
 8000910:	705a      	strb	r2, [r3, #1]
    data[2] = reg;
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <MCP23S17_Write+0x60>)
 8000914:	1dfa      	adds	r2, r7, #7
 8000916:	7812      	ldrb	r2, [r2, #0]
 8000918:	709a      	strb	r2, [r3, #2]
    data[3] = value;
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MCP23S17_Write+0x60>)
 800091c:	1dba      	adds	r2, r7, #6
 800091e:	7812      	ldrb	r2, [r2, #0]
 8000920:	70da      	strb	r2, [r3, #3]

    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000922:	23a0      	movs	r3, #160	@ 0xa0
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	2200      	movs	r2, #0
 8000928:	2180      	movs	r1, #128	@ 0x80
 800092a:	0018      	movs	r0, r3
 800092c:	f001 f8e7 	bl	8001afe <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, 4, HAL_MAX_DELAY);
 8000930:	2301      	movs	r3, #1
 8000932:	425b      	negs	r3, r3
 8000934:	4907      	ldr	r1, [pc, #28]	@ (8000954 <MCP23S17_Write+0x60>)
 8000936:	4808      	ldr	r0, [pc, #32]	@ (8000958 <MCP23S17_Write+0x64>)
 8000938:	2204      	movs	r2, #4
 800093a:	f001 fe99 	bl	8002670 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800093e:	23a0      	movs	r3, #160	@ 0xa0
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	2201      	movs	r2, #1
 8000944:	2180      	movs	r1, #128	@ 0x80
 8000946:	0018      	movs	r0, r3
 8000948:	f001 f8d9 	bl	8001afe <HAL_GPIO_WritePin>

}
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000084 	.word	0x20000084
 8000958:	200000a0 	.word	0x200000a0

0800095c <MCP23S17_Init>:

void MCP23S17_Init() {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000960:	23a0      	movs	r3, #160	@ 0xa0
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	2201      	movs	r2, #1
 8000966:	2180      	movs	r1, #128	@ 0x80
 8000968:	0018      	movs	r0, r3
 800096a:	f001 f8c8 	bl	8001afe <HAL_GPIO_WritePin>
    MCP23S17_Write(IODIRA, 0b11110000);
 800096e:	21f0      	movs	r1, #240	@ 0xf0
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff ffbf 	bl	80008f4 <MCP23S17_Write>
    MCP23S17_Write(GPIOMCPA, 0b11111111);
 8000976:	21ff      	movs	r1, #255	@ 0xff
 8000978:	2012      	movs	r0, #18
 800097a:	f7ff ffbb 	bl	80008f4 <MCP23S17_Write>
    MCP23S17_Write(GPIOMCPB, 0b11111111);
 800097e:	21ff      	movs	r1, #255	@ 0xff
 8000980:	2013      	movs	r0, #19
 8000982:	f7ff ffb7 	bl	80008f4 <MCP23S17_Write>
}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <Send_data>:

void Send_data(){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
if(pattern_count == 1){
 8000990:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <Send_data+0x34>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d108      	bne.n	80009aa <Send_data+0x1e>
	MCP23S17_Write(GPIOMCPA, 0b11110000);
 8000998:	21f0      	movs	r1, #240	@ 0xf0
 800099a:	2012      	movs	r0, #18
 800099c:	f7ff ffaa 	bl	80008f4 <MCP23S17_Write>
    MCP23S17_Write(GPIOMCPB, 0b11110000);
 80009a0:	21f0      	movs	r1, #240	@ 0xf0
 80009a2:	2013      	movs	r0, #19
 80009a4:	f7ff ffa6 	bl	80008f4 <MCP23S17_Write>
}
else{
    MCP23S17_Write(GPIOMCPA, 0b00001111);
    MCP23S17_Write(GPIOMCPB, 0b00001111);
	}
}
 80009a8:	e007      	b.n	80009ba <Send_data+0x2e>
    MCP23S17_Write(GPIOMCPA, 0b00001111);
 80009aa:	210f      	movs	r1, #15
 80009ac:	2012      	movs	r0, #18
 80009ae:	f7ff ffa1 	bl	80008f4 <MCP23S17_Write>
    MCP23S17_Write(GPIOMCPB, 0b00001111);
 80009b2:	210f      	movs	r1, #15
 80009b4:	2013      	movs	r0, #19
 80009b6:	f7ff ff9d 	bl	80008f4 <MCP23S17_Write>
}
 80009ba:	46c0      	nop			@ (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000009c 	.word	0x2000009c

080009c4 <Send_dataA>:

void Send_dataA() {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
		MCP23S17_Write(GPIOMCPA, 0b11110000); // ปิด
 80009c8:	21f0      	movs	r1, #240	@ 0xf0
 80009ca:	2012      	movs	r0, #18
 80009cc:	f7ff ff92 	bl	80008f4 <MCP23S17_Write>
        MCP23S17_Write(GPIOMCPB, 0b11110000);
 80009d0:	21f0      	movs	r1, #240	@ 0xf0
 80009d2:	2013      	movs	r0, #19
 80009d4:	f7ff ff8e 	bl	80008f4 <MCP23S17_Write>
    }
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <Send_dataB>:

void Send_dataB(){
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
        MCP23S17_Write(GPIOMCPA, 0b00001111); // เปิด
 80009e2:	210f      	movs	r1, #15
 80009e4:	2012      	movs	r0, #18
 80009e6:	f7ff ff85 	bl	80008f4 <MCP23S17_Write>
        MCP23S17_Write(GPIOMCPB, 0b00001111);
 80009ea:	210f      	movs	r1, #15
 80009ec:	2013      	movs	r0, #19
 80009ee:	f7ff ff81 	bl	80008f4 <MCP23S17_Write>
}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fc:	f000 fb80 	bl	8001100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a00:	f000 f810 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a04:	f000 f8e8 	bl	8000bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a08:	f000 f8c8 	bl	8000b9c <MX_DMA_Init>
  MX_SPI1_Init();
 8000a0c:	f000 f868 	bl	8000ae0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MCP23S17_Init();
 8000a10:	f7ff ffa4 	bl	800095c <MCP23S17_Init>
	        HAL_GPIO_WritePin(GPIOB, LED_onB8_Pin, GPIO_PIN_RESET);
	        HAL_GPIO_WritePin(GPIOC, LED_off_Pin, GPIO_PIN_SET);
	        HAL_GPIO_WritePin(GPIOC, LED_offC15_Pin, GPIO_PIN_SET);
		Send_dataB();
	  }*/
	  Send_data();
 8000a14:	f7ff ffba 	bl	800098c <Send_data>
	  ProcessPattern();
 8000a18:	f7ff fe44 	bl	80006a4 <ProcessPattern>
	  Send_data();
 8000a1c:	f7ff ffb6 	bl	800098c <Send_data>
	  Send_data();
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	e7f7      	b.n	8000a14 <main+0x1c>

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b093      	sub	sp, #76	@ 0x4c
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	2410      	movs	r4, #16
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	0018      	movs	r0, r3
 8000a30:	2338      	movs	r3, #56	@ 0x38
 8000a32:	001a      	movs	r2, r3
 8000a34:	2100      	movs	r1, #0
 8000a36:	f002 fb77 	bl	8003128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	2310      	movs	r3, #16
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f002 fb70 	bl	8003128 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a48:	2380      	movs	r3, #128	@ 0x80
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f001 f873 	bl	8001b38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	2202      	movs	r2, #2
 8000a56:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	0052      	lsls	r2, r2, #1
 8000a5e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a60:	0021      	movs	r1, r4
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2240      	movs	r2, #64	@ 0x40
 8000a6c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2202      	movs	r2, #2
 8000a72:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2202      	movs	r2, #2
 8000a78:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2208      	movs	r2, #8
 8000a84:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2280      	movs	r2, #128	@ 0x80
 8000a8a:	0292      	lsls	r2, r2, #10
 8000a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2280      	movs	r2, #128	@ 0x80
 8000a92:	0492      	lsls	r2, r2, #18
 8000a94:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2280      	movs	r2, #128	@ 0x80
 8000a9a:	0592      	lsls	r2, r2, #22
 8000a9c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f001 f889 	bl	8001bb8 <HAL_RCC_OscConfig>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000aaa:	f000 f95f 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	003b      	movs	r3, r7
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aba:	003b      	movs	r3, r7
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac0:	003b      	movs	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac6:	003b      	movs	r3, r7
 8000ac8:	2102      	movs	r1, #2
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 fb8e 	bl	80021ec <HAL_RCC_ClockConfig>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ad4:	f000 f94a 	bl	8000d6c <Error_Handler>
  }
}
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b013      	add	sp, #76	@ 0x4c
 8000ade:	bd90      	pop	{r4, r7, pc}

08000ae0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */
	__HAL_RCC_SPI1_CLK_ENABLE(); // เ�?ิด Clock �?ห�? SPI1
 8000ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b90 <MX_SPI1_Init+0xb0>)
 8000ae8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000aea:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <MX_SPI1_Init+0xb0>)
 8000aec:	2180      	movs	r1, #128	@ 0x80
 8000aee:	0149      	lsls	r1, r1, #5
 8000af0:	430a      	orrs	r2, r1
 8000af2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000af4:	4b26      	ldr	r3, [pc, #152]	@ (8000b90 <MX_SPI1_Init+0xb0>)
 8000af6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	015b      	lsls	r3, r3, #5
 8000afc:	4013      	ands	r3, r2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b23      	ldr	r3, [pc, #140]	@ (8000b90 <MX_SPI1_Init+0xb0>)
 8000b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b06:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <MX_SPI1_Init+0xb0>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b0e:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <MX_SPI1_Init+0xb0>)
 8000b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b12:	2201      	movs	r2, #1
 8000b14:	4013      	ands	r3, r2
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000b98 <MX_SPI1_Init+0xb8>)
 8000b1e:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b22:	2282      	movs	r2, #130	@ 0x82
 8000b24:	0052      	lsls	r2, r2, #1
 8000b26:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b2a:	2280      	movs	r2, #128	@ 0x80
 8000b2c:	0212      	lsls	r2, r2, #8
 8000b2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b30:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b32:	22e0      	movs	r2, #224	@ 0xe0
 8000b34:	00d2      	lsls	r2, r2, #3
 8000b36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b38:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b44:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b46:	2280      	movs	r2, #128	@ 0x80
 8000b48:	0092      	lsls	r2, r2, #2
 8000b4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b4e:	2218      	movs	r2, #24
 8000b50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b64:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b66:	2207      	movs	r2, #7
 8000b68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b76:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <MX_SPI1_Init+0xb4>)
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f001 fcc1 	bl	8002500 <HAL_SPI_Init>
 8000b7e:	1e03      	subs	r3, r0, #0
 8000b80:	d001      	beq.n	8000b86 <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 8000b82:	f000 f8f3 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	40021000 	.word	0x40021000
 8000b94:	200000a0 	.word	0x200000a0
 8000b98:	40013000 	.word	0x40013000

08000b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <MX_DMA_Init+0x38>)
 8000ba4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <MX_DMA_Init+0x38>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	430a      	orrs	r2, r1
 8000bac:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <MX_DMA_Init+0x38>)
 8000bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2009      	movs	r0, #9
 8000bc0:	f000 fbf4 	bl	80013ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bc4:	2009      	movs	r0, #9
 8000bc6:	f000 fc06 	bl	80013d6 <HAL_NVIC_EnableIRQ>

}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b08b      	sub	sp, #44	@ 0x2c
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	2414      	movs	r4, #20
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	0018      	movs	r0, r3
 8000be4:	2314      	movs	r3, #20
 8000be6:	001a      	movs	r2, r3
 8000be8:	2100      	movs	r1, #0
 8000bea:	f002 fa9d 	bl	8003128 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b5b      	ldr	r3, [pc, #364]	@ (8000d5c <MX_GPIO_Init+0x184>)
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bf2:	4b5a      	ldr	r3, [pc, #360]	@ (8000d5c <MX_GPIO_Init+0x184>)
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bfa:	4b58      	ldr	r3, [pc, #352]	@ (8000d5c <MX_GPIO_Init+0x184>)
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bfe:	2204      	movs	r2, #4
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c06:	4b55      	ldr	r3, [pc, #340]	@ (8000d5c <MX_GPIO_Init+0x184>)
 8000c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c0a:	4b54      	ldr	r3, [pc, #336]	@ (8000d5c <MX_GPIO_Init+0x184>)
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c12:	4b52      	ldr	r3, [pc, #328]	@ (8000d5c <MX_GPIO_Init+0x184>)
 8000c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c16:	2220      	movs	r2, #32
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d5c <MX_GPIO_Init+0x184>)
 8000c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c22:	4b4e      	ldr	r3, [pc, #312]	@ (8000d5c <MX_GPIO_Init+0x184>)
 8000c24:	2101      	movs	r1, #1
 8000c26:	430a      	orrs	r2, r1
 8000c28:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c2a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d5c <MX_GPIO_Init+0x184>)
 8000c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b49      	ldr	r3, [pc, #292]	@ (8000d5c <MX_GPIO_Init+0x184>)
 8000c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c3a:	4b48      	ldr	r3, [pc, #288]	@ (8000d5c <MX_GPIO_Init+0x184>)
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c42:	4b46      	ldr	r3, [pc, #280]	@ (8000d5c <MX_GPIO_Init+0x184>)
 8000c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c46:	2202      	movs	r2, #2
 8000c48:	4013      	ands	r3, r2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_off_Pin|LED_offC15_Pin, GPIO_PIN_RESET);
 8000c4e:	23c0      	movs	r3, #192	@ 0xc0
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	4843      	ldr	r0, [pc, #268]	@ (8000d60 <MX_GPIO_Init+0x188>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	0019      	movs	r1, r3
 8000c58:	f000 ff51 	bl	8001afe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000c5c:	23a0      	movs	r3, #160	@ 0xa0
 8000c5e:	05db      	lsls	r3, r3, #23
 8000c60:	2200      	movs	r2, #0
 8000c62:	2180      	movs	r1, #128	@ 0x80
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 ff4a 	bl	8001afe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_1B1_Pin|LED_3_Pin|LED_3B4_Pin
 8000c6a:	23fc      	movs	r3, #252	@ 0xfc
 8000c6c:	33ff      	adds	r3, #255	@ 0xff
 8000c6e:	483d      	ldr	r0, [pc, #244]	@ (8000d64 <MX_GPIO_Init+0x18c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	0019      	movs	r1, r3
 8000c74:	f000 ff43 	bl	8001afe <HAL_GPIO_WritePin>
                          |LED_2_Pin|LED_2B6_Pin|LED_on_Pin|LED_onB8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_off_Pin LED_offC15_Pin */
  GPIO_InitStruct.Pin = LED_off_Pin|LED_offC15_Pin;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	22c0      	movs	r2, #192	@ 0xc0
 8000c7c:	0212      	lsls	r2, r2, #8
 8000c7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	193b      	adds	r3, r7, r4
 8000c82:	2201      	movs	r2, #1
 8000c84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	4a32      	ldr	r2, [pc, #200]	@ (8000d60 <MX_GPIO_Init+0x188>)
 8000c96:	0019      	movs	r1, r3
 8000c98:	0010      	movs	r0, r2
 8000c9a:	f000 fdaf 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8000d68 <MX_GPIO_Init+0x190>)
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	0010      	movs	r0, r2
 8000cb8:	f000 fda0 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2280      	movs	r2, #128	@ 0x80
 8000cc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	193a      	adds	r2, r7, r4
 8000cd6:	23a0      	movs	r3, #160	@ 0xa0
 8000cd8:	05db      	lsls	r3, r3, #23
 8000cda:	0011      	movs	r1, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f000 fd8d 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_1B1_Pin LED_3_Pin LED_3B4_Pin
                           LED_2_Pin LED_2B6_Pin LED_on_Pin LED_onB8_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_1B1_Pin|LED_3_Pin|LED_3B4_Pin
 8000ce2:	0021      	movs	r1, r4
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	22fc      	movs	r2, #252	@ 0xfc
 8000ce8:	32ff      	adds	r2, #255	@ 0xff
 8000cea:	601a      	str	r2, [r3, #0]
                          |LED_2_Pin|LED_2B6_Pin|LED_on_Pin|LED_onB8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	000c      	movs	r4, r1
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	4a18      	ldr	r2, [pc, #96]	@ (8000d64 <MX_GPIO_Init+0x18c>)
 8000d04:	0019      	movs	r1, r3
 8000d06:	0010      	movs	r0, r2
 8000d08:	f000 fd78 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OP1_Pin OP3_Pin OP2_Pin */
  GPIO_InitStruct.Pin = OP1_Pin|OP3_Pin|OP2_Pin;
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	2291      	movs	r2, #145	@ 0x91
 8000d10:	0212      	lsls	r2, r2, #8
 8000d12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	193a      	adds	r2, r7, r4
 8000d22:	23a0      	movs	r3, #160	@ 0xa0
 8000d24:	05db      	lsls	r3, r3, #23
 8000d26:	0011      	movs	r1, r2
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f000 fd67 	bl	80017fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000d2e:	0021      	movs	r1, r4
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	22a0      	movs	r2, #160	@ 0xa0
 8000d34:	0152      	lsls	r2, r2, #5
 8000d36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	187a      	adds	r2, r7, r1
 8000d46:	23a0      	movs	r3, #160	@ 0xa0
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 fd55 	bl	80017fc <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b00b      	add	sp, #44	@ 0x2c
 8000d58:	bd90      	pop	{r4, r7, pc}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	50000800 	.word	0x50000800
 8000d64:	50000400 	.word	0x50000400
 8000d68:	50001400 	.word	0x50001400

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	46c0      	nop			@ (mov r8, r8)
 8000d76:	e7fd      	b.n	8000d74 <Error_Handler+0x8>

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d84:	2101      	movs	r1, #1
 8000d86:	430a      	orrs	r2, r1
 8000d88:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4013      	ands	r3, r2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d9c:	2180      	movs	r1, #128	@ 0x80
 8000d9e:	0549      	lsls	r1, r1, #21
 8000da0:	430a      	orrs	r2, r1
 8000da2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000da4:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <HAL_MspInit+0x44>)
 8000da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000da8:	2380      	movs	r3, #128	@ 0x80
 8000daa:	055b      	lsls	r3, r3, #21
 8000dac:	4013      	ands	r3, r2
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b08b      	sub	sp, #44	@ 0x2c
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	2414      	movs	r4, #20
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	0018      	movs	r0, r3
 8000dce:	2314      	movs	r3, #20
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	f002 f9a8 	bl	8003128 <memset>
  if(hspi->Instance==SPI1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a34      	ldr	r2, [pc, #208]	@ (8000eb0 <HAL_SPI_MspInit+0xf0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d161      	bne.n	8000ea6 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000de2:	4b34      	ldr	r3, [pc, #208]	@ (8000eb4 <HAL_SPI_MspInit+0xf4>)
 8000de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000de6:	4b33      	ldr	r3, [pc, #204]	@ (8000eb4 <HAL_SPI_MspInit+0xf4>)
 8000de8:	2180      	movs	r1, #128	@ 0x80
 8000dea:	0149      	lsls	r1, r1, #5
 8000dec:	430a      	orrs	r2, r1
 8000dee:	641a      	str	r2, [r3, #64]	@ 0x40
 8000df0:	4b30      	ldr	r3, [pc, #192]	@ (8000eb4 <HAL_SPI_MspInit+0xf4>)
 8000df2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000df4:	2380      	movs	r3, #128	@ 0x80
 8000df6:	015b      	lsls	r3, r3, #5
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb4 <HAL_SPI_MspInit+0xf4>)
 8000e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e02:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb4 <HAL_SPI_MspInit+0xf4>)
 8000e04:	2101      	movs	r1, #1
 8000e06:	430a      	orrs	r2, r1
 8000e08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb4 <HAL_SPI_MspInit+0xf4>)
 8000e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4013      	ands	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000e16:	0021      	movs	r1, r4
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2206      	movs	r2, #6
 8000e1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2202      	movs	r2, #2
 8000e22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	187a      	adds	r2, r7, r1
 8000e38:	23a0      	movs	r3, #160	@ 0xa0
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	0011      	movs	r1, r2
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 fcdc 	bl	80017fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000e44:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <HAL_SPI_MspInit+0xf8>)
 8000e46:	4a1d      	ldr	r2, [pc, #116]	@ (8000ebc <HAL_SPI_MspInit+0xfc>)
 8000e48:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <HAL_SPI_MspInit+0xf8>)
 8000e4c:	2211      	movs	r2, #17
 8000e4e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e50:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <HAL_SPI_MspInit+0xf8>)
 8000e52:	2210      	movs	r2, #16
 8000e54:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e56:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <HAL_SPI_MspInit+0xf8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <HAL_SPI_MspInit+0xf8>)
 8000e5e:	2280      	movs	r2, #128	@ 0x80
 8000e60:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <HAL_SPI_MspInit+0xf8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e68:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <HAL_SPI_MspInit+0xf8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_SPI_MspInit+0xf8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e74:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <HAL_SPI_MspInit+0xf8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <HAL_SPI_MspInit+0xf8>)
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f000 fac7 	bl	8001410 <HAL_DMA_Init>
 8000e82:	1e03      	subs	r3, r0, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000e86:	f7ff ff71 	bl	8000d6c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <HAL_SPI_MspInit+0xf8>)
 8000e8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e90:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <HAL_SPI_MspInit+0xf8>)
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2019      	movs	r0, #25
 8000e9c:	f000 fa86 	bl	80013ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ea0:	2019      	movs	r0, #25
 8000ea2:	f000 fa98 	bl	80013d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b00b      	add	sp, #44	@ 0x2c
 8000eac:	bd90      	pop	{r4, r7, pc}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	40013000 	.word	0x40013000
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	20000104 	.word	0x20000104
 8000ebc:	40020008 	.word	0x40020008

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec4:	46c0      	nop			@ (mov r8, r8)
 8000ec6:	e7fd      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	e7fd      	b.n	8000ecc <HardFault_Handler+0x4>

08000ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee8:	f000 f974 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eec:	46c0      	nop			@ (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <DMA1_Channel1_IRQHandler+0x14>)
 8000efa:	0018      	movs	r0, r3
 8000efc:	f000 fb7c 	bl	80015f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f00:	46c0      	nop			@ (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	20000104 	.word	0x20000104

08000f0c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <SPI1_IRQHandler+0x14>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f001 fd0c 	bl	8002930 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	200000a0 	.word	0x200000a0

08000f24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  return 1;
 8000f28:	2301      	movs	r3, #1
}
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_kill>:

int _kill(int pid, int sig)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f3a:	f002 f94b 	bl	80031d4 <__errno>
 8000f3e:	0003      	movs	r3, r0
 8000f40:	2216      	movs	r2, #22
 8000f42:	601a      	str	r2, [r3, #0]
  return -1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	425b      	negs	r3, r3
}
 8000f48:	0018      	movs	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_exit>:

void _exit (int status)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f58:	2301      	movs	r3, #1
 8000f5a:	425a      	negs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff ffe5 	bl	8000f30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	e7fd      	b.n	8000f66 <_exit+0x16>

08000f6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	e00a      	b.n	8000f92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f7c:	e000      	b.n	8000f80 <_read+0x16>
 8000f7e:	bf00      	nop
 8000f80:	0001      	movs	r1, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	60ba      	str	r2, [r7, #8]
 8000f88:	b2ca      	uxtb	r2, r1
 8000f8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dbf0      	blt.n	8000f7c <_read+0x12>
  }

  return len;
 8000f9a:	687b      	ldr	r3, [r7, #4]
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b006      	add	sp, #24
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e009      	b.n	8000fca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	60ba      	str	r2, [r7, #8]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	e000      	b.n	8000fc4 <_write+0x20>
 8000fc2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dbf1      	blt.n	8000fb6 <_write+0x12>
  }
  return len;
 8000fd2:	687b      	ldr	r3, [r7, #4]
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b006      	add	sp, #24
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <_close>:

int _close(int file)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	425b      	negs	r3, r3
}
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b002      	add	sp, #8
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	2280      	movs	r2, #128	@ 0x80
 8000ffe:	0192      	lsls	r2, r2, #6
 8001000:	605a      	str	r2, [r3, #4]
  return 0;
 8001002:	2300      	movs	r3, #0
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}

0800100c <_isatty>:

int _isatty(int file)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001014:	2301      	movs	r3, #1
}
 8001016:	0018      	movs	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	b002      	add	sp, #8
 800101c:	bd80      	pop	{r7, pc}

0800101e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	60f8      	str	r0, [r7, #12]
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800102a:	2300      	movs	r3, #0
}
 800102c:	0018      	movs	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	b004      	add	sp, #16
 8001032:	bd80      	pop	{r7, pc}

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	18d3      	adds	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001064:	f002 f8b6 	bl	80031d4 <__errno>
 8001068:	0003      	movs	r3, r0
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	2301      	movs	r3, #1
 8001070:	425b      	negs	r3, r3
 8001072:	e009      	b.n	8001088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	18d2      	adds	r2, r2, r3
 8001082:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <_sbrk+0x64>)
 8001084:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b006      	add	sp, #24
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20009000 	.word	0x20009000
 8001094:	00000400 	.word	0x00000400
 8001098:	20000160 	.word	0x20000160
 800109c:	200002b8 	.word	0x200002b8

080010a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	46c0      	nop			@ (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010ac:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b0:	f7ff fff6 	bl	80010a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	@ (80010ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <LoopForever+0xe>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	@ (80010f8 <LoopForever+0x16>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010da:	f002 f881 	bl	80031e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010de:	f7ff fc8b 	bl	80009f8 <main>

080010e2 <LoopForever>:

LoopForever:
  b LoopForever
 80010e2:	e7fe      	b.n	80010e2 <LoopForever>
  ldr   r0, =_estack
 80010e4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010f0:	0800409c 	.word	0x0800409c
  ldr r2, =_sbss
 80010f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010f8:	200002b4 	.word	0x200002b4

080010fc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC1_COMP_IRQHandler>
	...

08001100 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <HAL_Init+0x3c>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <HAL_Init+0x3c>)
 8001112:	2180      	movs	r1, #128	@ 0x80
 8001114:	0049      	lsls	r1, r1, #1
 8001116:	430a      	orrs	r2, r1
 8001118:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800111a:	2003      	movs	r0, #3
 800111c:	f000 f810 	bl	8001140 <HAL_InitTick>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d003      	beq.n	800112c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	e001      	b.n	8001130 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f7ff fe24 	bl	8000d78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	781b      	ldrb	r3, [r3, #0]
}
 8001134:	0018      	movs	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	b002      	add	sp, #8
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40022000 	.word	0x40022000

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001148:	230f      	movs	r3, #15
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001150:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <HAL_InitTick+0x88>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d02b      	beq.n	80011b0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001158:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <HAL_InitTick+0x8c>)
 800115a:	681c      	ldr	r4, [r3, #0]
 800115c:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <HAL_InitTick+0x88>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	0019      	movs	r1, r3
 8001162:	23fa      	movs	r3, #250	@ 0xfa
 8001164:	0098      	lsls	r0, r3, #2
 8001166:	f7fe ffd7 	bl	8000118 <__udivsi3>
 800116a:	0003      	movs	r3, r0
 800116c:	0019      	movs	r1, r3
 800116e:	0020      	movs	r0, r4
 8001170:	f7fe ffd2 	bl	8000118 <__udivsi3>
 8001174:	0003      	movs	r3, r0
 8001176:	0018      	movs	r0, r3
 8001178:	f000 f93d 	bl	80013f6 <HAL_SYSTICK_Config>
 800117c:	1e03      	subs	r3, r0, #0
 800117e:	d112      	bne.n	80011a6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b03      	cmp	r3, #3
 8001184:	d80a      	bhi.n	800119c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	2301      	movs	r3, #1
 800118a:	425b      	negs	r3, r3
 800118c:	2200      	movs	r2, #0
 800118e:	0018      	movs	r0, r3
 8001190:	f000 f90c 	bl	80013ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001194:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <HAL_InitTick+0x90>)
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	e00d      	b.n	80011b8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800119c:	230f      	movs	r3, #15
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	e008      	b.n	80011b8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011a6:	230f      	movs	r3, #15
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	e003      	b.n	80011b8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b0:	230f      	movs	r3, #15
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011b8:	230f      	movs	r3, #15
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	781b      	ldrb	r3, [r3, #0]
}
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b005      	add	sp, #20
 80011c4:	bd90      	pop	{r4, r7, pc}
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <HAL_IncTick+0x1c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	001a      	movs	r2, r3
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <HAL_IncTick+0x20>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	18d2      	adds	r2, r2, r3
 80011e4:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <HAL_IncTick+0x20>)
 80011e6:	601a      	str	r2, [r3, #0]
}
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000164 	.word	0x20000164

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b02      	ldr	r3, [pc, #8]	@ (8001208 <HAL_GetTick+0x10>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	20000164 	.word	0x20000164

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff fff0 	bl	80011f8 <HAL_GetTick>
 8001218:	0003      	movs	r3, r0
 800121a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3301      	adds	r3, #1
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	001a      	movs	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	189b      	adds	r3, r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	f7ff ffe0 	bl	80011f8 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	46c0      	nop			@ (mov r8, r8)
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b004      	add	sp, #16
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	20000008 	.word	0x20000008

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	0002      	movs	r2, r0
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001260:	1dfb      	adds	r3, r7, #7
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b7f      	cmp	r3, #127	@ 0x7f
 8001266:	d809      	bhi.n	800127c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001268:	1dfb      	adds	r3, r7, #7
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	001a      	movs	r2, r3
 800126e:	231f      	movs	r3, #31
 8001270:	401a      	ands	r2, r3
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <__NVIC_EnableIRQ+0x30>)
 8001274:	2101      	movs	r1, #1
 8001276:	4091      	lsls	r1, r2
 8001278:	000a      	movs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	0002      	movs	r2, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b7f      	cmp	r3, #127	@ 0x7f
 800129c:	d828      	bhi.n	80012f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129e:	4a2f      	ldr	r2, [pc, #188]	@ (800135c <__NVIC_SetPriority+0xd4>)
 80012a0:	1dfb      	adds	r3, r7, #7
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	33c0      	adds	r3, #192	@ 0xc0
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	589b      	ldr	r3, [r3, r2]
 80012ae:	1dfa      	adds	r2, r7, #7
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	0011      	movs	r1, r2
 80012b4:	2203      	movs	r2, #3
 80012b6:	400a      	ands	r2, r1
 80012b8:	00d2      	lsls	r2, r2, #3
 80012ba:	21ff      	movs	r1, #255	@ 0xff
 80012bc:	4091      	lsls	r1, r2
 80012be:	000a      	movs	r2, r1
 80012c0:	43d2      	mvns	r2, r2
 80012c2:	401a      	ands	r2, r3
 80012c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	019b      	lsls	r3, r3, #6
 80012ca:	22ff      	movs	r2, #255	@ 0xff
 80012cc:	401a      	ands	r2, r3
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	0018      	movs	r0, r3
 80012d4:	2303      	movs	r3, #3
 80012d6:	4003      	ands	r3, r0
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012dc:	481f      	ldr	r0, [pc, #124]	@ (800135c <__NVIC_SetPriority+0xd4>)
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	430a      	orrs	r2, r1
 80012e8:	33c0      	adds	r3, #192	@ 0xc0
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ee:	e031      	b.n	8001354 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001360 <__NVIC_SetPriority+0xd8>)
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	0019      	movs	r1, r3
 80012f8:	230f      	movs	r3, #15
 80012fa:	400b      	ands	r3, r1
 80012fc:	3b08      	subs	r3, #8
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3306      	adds	r3, #6
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	18d3      	adds	r3, r2, r3
 8001306:	3304      	adds	r3, #4
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	1dfa      	adds	r2, r7, #7
 800130c:	7812      	ldrb	r2, [r2, #0]
 800130e:	0011      	movs	r1, r2
 8001310:	2203      	movs	r2, #3
 8001312:	400a      	ands	r2, r1
 8001314:	00d2      	lsls	r2, r2, #3
 8001316:	21ff      	movs	r1, #255	@ 0xff
 8001318:	4091      	lsls	r1, r2
 800131a:	000a      	movs	r2, r1
 800131c:	43d2      	mvns	r2, r2
 800131e:	401a      	ands	r2, r3
 8001320:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	019b      	lsls	r3, r3, #6
 8001326:	22ff      	movs	r2, #255	@ 0xff
 8001328:	401a      	ands	r2, r3
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	0018      	movs	r0, r3
 8001330:	2303      	movs	r3, #3
 8001332:	4003      	ands	r3, r0
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001338:	4809      	ldr	r0, [pc, #36]	@ (8001360 <__NVIC_SetPriority+0xd8>)
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	001c      	movs	r4, r3
 8001340:	230f      	movs	r3, #15
 8001342:	4023      	ands	r3, r4
 8001344:	3b08      	subs	r3, #8
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	430a      	orrs	r2, r1
 800134a:	3306      	adds	r3, #6
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	18c3      	adds	r3, r0, r3
 8001350:	3304      	adds	r3, #4
 8001352:	601a      	str	r2, [r3, #0]
}
 8001354:	46c0      	nop			@ (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b003      	add	sp, #12
 800135a:	bd90      	pop	{r4, r7, pc}
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	1e5a      	subs	r2, r3, #1
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	045b      	lsls	r3, r3, #17
 8001374:	429a      	cmp	r2, r3
 8001376:	d301      	bcc.n	800137c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001378:	2301      	movs	r3, #1
 800137a:	e010      	b.n	800139e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <SysTick_Config+0x44>)
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	3a01      	subs	r2, #1
 8001382:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001384:	2301      	movs	r3, #1
 8001386:	425b      	negs	r3, r3
 8001388:	2103      	movs	r1, #3
 800138a:	0018      	movs	r0, r3
 800138c:	f7ff ff7c 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001390:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <SysTick_Config+0x44>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001396:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <SysTick_Config+0x44>)
 8001398:	2207      	movs	r2, #7
 800139a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800139c:	2300      	movs	r3, #0
}
 800139e:	0018      	movs	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b002      	add	sp, #8
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	e000e010 	.word	0xe000e010

080013ac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	210f      	movs	r1, #15
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	1c02      	adds	r2, r0, #0
 80013bc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	0011      	movs	r1, r2
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff ff5d 	bl	8001288 <__NVIC_SetPriority>
}
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b004      	add	sp, #16
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	0002      	movs	r2, r0
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff ff33 	bl	8001254 <__NVIC_EnableIRQ>
}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	0018      	movs	r0, r3
 8001402:	f7ff ffaf 	bl	8001364 <SysTick_Config>
 8001406:	0003      	movs	r3, r0
}
 8001408:	0018      	movs	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	b002      	add	sp, #8
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e077      	b.n	8001512 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a3d      	ldr	r2, [pc, #244]	@ (800151c <HAL_DMA_Init+0x10c>)
 8001428:	4694      	mov	ip, r2
 800142a:	4463      	add	r3, ip
 800142c:	2114      	movs	r1, #20
 800142e:	0018      	movs	r0, r3
 8001430:	f7fe fe72 	bl	8000118 <__udivsi3>
 8001434:	0003      	movs	r3, r0
 8001436:	009a      	lsls	r2, r3, #2
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2225      	movs	r2, #37	@ 0x25
 8001440:	2102      	movs	r1, #2
 8001442:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4934      	ldr	r1, [pc, #208]	@ (8001520 <HAL_DMA_Init+0x110>)
 8001450:	400a      	ands	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6819      	ldr	r1, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	0018      	movs	r0, r3
 800148e:	f000 f965 	bl	800175c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	2380      	movs	r3, #128	@ 0x80
 8001498:	01db      	lsls	r3, r3, #7
 800149a:	429a      	cmp	r2, r3
 800149c:	d102      	bne.n	80014a4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ac:	213f      	movs	r1, #63	@ 0x3f
 80014ae:	400a      	ands	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80014ba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d011      	beq.n	80014e8 <HAL_DMA_Init+0xd8>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d80d      	bhi.n	80014e8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	0018      	movs	r0, r3
 80014d0:	f000 f970 	bl	80017b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	e008      	b.n	80014fa <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2225      	movs	r2, #37	@ 0x25
 8001504:	2101      	movs	r1, #1
 8001506:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2224      	movs	r2, #36	@ 0x24
 800150c:	2100      	movs	r1, #0
 800150e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	0018      	movs	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	b002      	add	sp, #8
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	bffdfff8 	.word	0xbffdfff8
 8001520:	ffff800f 	.word	0xffff800f

08001524 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800152c:	210f      	movs	r1, #15
 800152e:	187b      	adds	r3, r7, r1
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2225      	movs	r2, #37	@ 0x25
 8001538:	5c9b      	ldrb	r3, [r3, r2]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d006      	beq.n	800154e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2204      	movs	r2, #4
 8001544:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	e049      	b.n	80015e2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	210e      	movs	r1, #14
 800155a:	438a      	bics	r2, r1
 800155c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2101      	movs	r1, #1
 800156a:	438a      	bics	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001578:	491d      	ldr	r1, [pc, #116]	@ (80015f0 <HAL_DMA_Abort_IT+0xcc>)
 800157a:	400a      	ands	r2, r1
 800157c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800157e:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <HAL_DMA_Abort_IT+0xd0>)
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	221c      	movs	r2, #28
 8001588:	4013      	ands	r3, r2
 800158a:	2201      	movs	r2, #1
 800158c:	409a      	lsls	r2, r3
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_DMA_Abort_IT+0xd0>)
 8001590:	430a      	orrs	r2, r1
 8001592:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800159c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00c      	beq.n	80015c0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b0:	490f      	ldr	r1, [pc, #60]	@ (80015f0 <HAL_DMA_Abort_IT+0xcc>)
 80015b2:	400a      	ands	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80015be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2225      	movs	r2, #37	@ 0x25
 80015c4:	2101      	movs	r1, #1
 80015c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2224      	movs	r2, #36	@ 0x24
 80015cc:	2100      	movs	r1, #0
 80015ce:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d004      	beq.n	80015e2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	0010      	movs	r0, r2
 80015e0:	4798      	blx	r3
    }
  }
  return status;
 80015e2:	230f      	movs	r3, #15
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	781b      	ldrb	r3, [r3, #0]
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b004      	add	sp, #16
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	fffffeff 	.word	0xfffffeff
 80015f4:	40020000 	.word	0x40020000

080015f8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001600:	4b55      	ldr	r3, [pc, #340]	@ (8001758 <HAL_DMA_IRQHandler+0x160>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	221c      	movs	r2, #28
 8001614:	4013      	ands	r3, r2
 8001616:	2204      	movs	r2, #4
 8001618:	409a      	lsls	r2, r3
 800161a:	0013      	movs	r3, r2
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4013      	ands	r3, r2
 8001620:	d027      	beq.n	8001672 <HAL_DMA_IRQHandler+0x7a>
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2204      	movs	r2, #4
 8001626:	4013      	ands	r3, r2
 8001628:	d023      	beq.n	8001672 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2220      	movs	r2, #32
 8001632:	4013      	ands	r3, r2
 8001634:	d107      	bne.n	8001646 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2104      	movs	r1, #4
 8001642:	438a      	bics	r2, r1
 8001644:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001646:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <HAL_DMA_IRQHandler+0x160>)
 8001648:	6859      	ldr	r1, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	221c      	movs	r2, #28
 8001650:	4013      	ands	r3, r2
 8001652:	2204      	movs	r2, #4
 8001654:	409a      	lsls	r2, r3
 8001656:	4b40      	ldr	r3, [pc, #256]	@ (8001758 <HAL_DMA_IRQHandler+0x160>)
 8001658:	430a      	orrs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001660:	2b00      	cmp	r3, #0
 8001662:	d100      	bne.n	8001666 <HAL_DMA_IRQHandler+0x6e>
 8001664:	e073      	b.n	800174e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	0010      	movs	r0, r2
 800166e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001670:	e06d      	b.n	800174e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	221c      	movs	r2, #28
 8001678:	4013      	ands	r3, r2
 800167a:	2202      	movs	r2, #2
 800167c:	409a      	lsls	r2, r3
 800167e:	0013      	movs	r3, r2
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4013      	ands	r3, r2
 8001684:	d02e      	beq.n	80016e4 <HAL_DMA_IRQHandler+0xec>
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2202      	movs	r2, #2
 800168a:	4013      	ands	r3, r2
 800168c:	d02a      	beq.n	80016e4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2220      	movs	r2, #32
 8001696:	4013      	ands	r3, r2
 8001698:	d10b      	bne.n	80016b2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	210a      	movs	r1, #10
 80016a6:	438a      	bics	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2225      	movs	r2, #37	@ 0x25
 80016ae:	2101      	movs	r1, #1
 80016b0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80016b2:	4b29      	ldr	r3, [pc, #164]	@ (8001758 <HAL_DMA_IRQHandler+0x160>)
 80016b4:	6859      	ldr	r1, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	221c      	movs	r2, #28
 80016bc:	4013      	ands	r3, r2
 80016be:	2202      	movs	r2, #2
 80016c0:	409a      	lsls	r2, r3
 80016c2:	4b25      	ldr	r3, [pc, #148]	@ (8001758 <HAL_DMA_IRQHandler+0x160>)
 80016c4:	430a      	orrs	r2, r1
 80016c6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2224      	movs	r2, #36	@ 0x24
 80016cc:	2100      	movs	r1, #0
 80016ce:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d03a      	beq.n	800174e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	0010      	movs	r0, r2
 80016e0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80016e2:	e034      	b.n	800174e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	221c      	movs	r2, #28
 80016ea:	4013      	ands	r3, r2
 80016ec:	2208      	movs	r2, #8
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4013      	ands	r3, r2
 80016f6:	d02b      	beq.n	8001750 <HAL_DMA_IRQHandler+0x158>
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2208      	movs	r2, #8
 80016fc:	4013      	ands	r3, r2
 80016fe:	d027      	beq.n	8001750 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	210e      	movs	r1, #14
 800170c:	438a      	bics	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <HAL_DMA_IRQHandler+0x160>)
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	221c      	movs	r2, #28
 800171a:	4013      	ands	r3, r2
 800171c:	2201      	movs	r2, #1
 800171e:	409a      	lsls	r2, r3
 8001720:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <HAL_DMA_IRQHandler+0x160>)
 8001722:	430a      	orrs	r2, r1
 8001724:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2225      	movs	r2, #37	@ 0x25
 8001730:	2101      	movs	r1, #1
 8001732:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2224      	movs	r2, #36	@ 0x24
 8001738:	2100      	movs	r1, #0
 800173a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	0010      	movs	r0, r2
 800174c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	46c0      	nop			@ (mov r8, r8)
}
 8001752:	46bd      	mov	sp, r7
 8001754:	b004      	add	sp, #16
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40020000 	.word	0x40020000

0800175c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	4a10      	ldr	r2, [pc, #64]	@ (80017ac <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800176c:	4694      	mov	ip, r2
 800176e:	4463      	add	r3, ip
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	001a      	movs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	001a      	movs	r2, r3
 800177e:	23ff      	movs	r3, #255	@ 0xff
 8001780:	4013      	ands	r3, r2
 8001782:	3b08      	subs	r3, #8
 8001784:	2114      	movs	r1, #20
 8001786:	0018      	movs	r0, r3
 8001788:	f7fe fcc6 	bl	8000118 <__udivsi3>
 800178c:	0003      	movs	r3, r0
 800178e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a07      	ldr	r2, [pc, #28]	@ (80017b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001794:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	221f      	movs	r2, #31
 800179a:	4013      	ands	r3, r2
 800179c:	2201      	movs	r2, #1
 800179e:	409a      	lsls	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80017a4:	46c0      	nop			@ (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b004      	add	sp, #16
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	10008200 	.word	0x10008200
 80017b0:	40020880 	.word	0x40020880

080017b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	223f      	movs	r2, #63	@ 0x3f
 80017c2:	4013      	ands	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017ca:	4694      	mov	ip, r2
 80017cc:	4463      	add	r3, ip
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	001a      	movs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a07      	ldr	r2, [pc, #28]	@ (80017f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3b01      	subs	r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	4013      	ands	r3, r2
 80017e4:	2201      	movs	r2, #1
 80017e6:	409a      	lsls	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80017ec:	46c0      	nop			@ (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b004      	add	sp, #16
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	1000823f 	.word	0x1000823f
 80017f8:	40020940 	.word	0x40020940

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180a:	e147      	b.n	8001a9c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4091      	lsls	r1, r2
 8001816:	000a      	movs	r2, r1
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d100      	bne.n	8001824 <HAL_GPIO_Init+0x28>
 8001822:	e138      	b.n	8001a96 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2203      	movs	r2, #3
 800182a:	4013      	ands	r3, r2
 800182c:	2b01      	cmp	r3, #1
 800182e:	d005      	beq.n	800183c <HAL_GPIO_Init+0x40>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2203      	movs	r2, #3
 8001836:	4013      	ands	r3, r2
 8001838:	2b02      	cmp	r3, #2
 800183a:	d130      	bne.n	800189e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	409a      	lsls	r2, r3
 800184a:	0013      	movs	r3, r2
 800184c:	43da      	mvns	r2, r3
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	409a      	lsls	r2, r3
 800185e:	0013      	movs	r3, r2
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001872:	2201      	movs	r2, #1
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
 8001878:	0013      	movs	r3, r2
 800187a:	43da      	mvns	r2, r3
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	091b      	lsrs	r3, r3, #4
 8001888:	2201      	movs	r2, #1
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
 8001890:	0013      	movs	r3, r2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2203      	movs	r2, #3
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d017      	beq.n	80018da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	409a      	lsls	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	43da      	mvns	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	409a      	lsls	r2, r3
 80018cc:	0013      	movs	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2203      	movs	r2, #3
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d123      	bne.n	800192e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	0092      	lsls	r2, r2, #2
 80018f0:	58d3      	ldr	r3, [r2, r3]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2207      	movs	r2, #7
 80018f8:	4013      	ands	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	220f      	movs	r2, #15
 80018fe:	409a      	lsls	r2, r3
 8001900:	0013      	movs	r3, r2
 8001902:	43da      	mvns	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	691a      	ldr	r2, [r3, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2107      	movs	r1, #7
 8001912:	400b      	ands	r3, r1
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	409a      	lsls	r2, r3
 8001918:	0013      	movs	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	08da      	lsrs	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3208      	adds	r2, #8
 8001928:	0092      	lsls	r2, r2, #2
 800192a:	6939      	ldr	r1, [r7, #16]
 800192c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	409a      	lsls	r2, r3
 800193c:	0013      	movs	r3, r2
 800193e:	43da      	mvns	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2203      	movs	r2, #3
 800194c:	401a      	ands	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	23c0      	movs	r3, #192	@ 0xc0
 8001968:	029b      	lsls	r3, r3, #10
 800196a:	4013      	ands	r3, r2
 800196c:	d100      	bne.n	8001970 <HAL_GPIO_Init+0x174>
 800196e:	e092      	b.n	8001a96 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001970:	4a50      	ldr	r2, [pc, #320]	@ (8001ab4 <HAL_GPIO_Init+0x2b8>)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	3318      	adds	r3, #24
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	589b      	ldr	r3, [r3, r2]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2203      	movs	r2, #3
 8001982:	4013      	ands	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	220f      	movs	r2, #15
 8001988:	409a      	lsls	r2, r3
 800198a:	0013      	movs	r3, r2
 800198c:	43da      	mvns	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	23a0      	movs	r3, #160	@ 0xa0
 8001998:	05db      	lsls	r3, r3, #23
 800199a:	429a      	cmp	r2, r3
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0x1ca>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a45      	ldr	r2, [pc, #276]	@ (8001ab8 <HAL_GPIO_Init+0x2bc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00d      	beq.n	80019c2 <HAL_GPIO_Init+0x1c6>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a44      	ldr	r2, [pc, #272]	@ (8001abc <HAL_GPIO_Init+0x2c0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d007      	beq.n	80019be <HAL_GPIO_Init+0x1c2>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a43      	ldr	r2, [pc, #268]	@ (8001ac0 <HAL_GPIO_Init+0x2c4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_GPIO_Init+0x1be>
 80019b6:	2303      	movs	r3, #3
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x1cc>
 80019ba:	2305      	movs	r3, #5
 80019bc:	e004      	b.n	80019c8 <HAL_GPIO_Init+0x1cc>
 80019be:	2302      	movs	r3, #2
 80019c0:	e002      	b.n	80019c8 <HAL_GPIO_Init+0x1cc>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_GPIO_Init+0x1cc>
 80019c6:	2300      	movs	r3, #0
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	2103      	movs	r1, #3
 80019cc:	400a      	ands	r2, r1
 80019ce:	00d2      	lsls	r2, r2, #3
 80019d0:	4093      	lsls	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80019d8:	4936      	ldr	r1, [pc, #216]	@ (8001ab4 <HAL_GPIO_Init+0x2b8>)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3318      	adds	r3, #24
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e6:	4b33      	ldr	r3, [pc, #204]	@ (8001ab4 <HAL_GPIO_Init+0x2b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43da      	mvns	r2, r3
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	2380      	movs	r3, #128	@ 0x80
 80019fc:	035b      	lsls	r3, r3, #13
 80019fe:	4013      	ands	r3, r2
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab4 <HAL_GPIO_Init+0x2b8>)
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001a10:	4b28      	ldr	r3, [pc, #160]	@ (8001ab4 <HAL_GPIO_Init+0x2b8>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	43da      	mvns	r2, r3
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	2380      	movs	r3, #128	@ 0x80
 8001a26:	039b      	lsls	r3, r3, #14
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a34:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <HAL_GPIO_Init+0x2b8>)
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab4 <HAL_GPIO_Init+0x2b8>)
 8001a3c:	2384      	movs	r3, #132	@ 0x84
 8001a3e:	58d3      	ldr	r3, [r2, r3]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	43da      	mvns	r2, r3
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	2380      	movs	r3, #128	@ 0x80
 8001a52:	029b      	lsls	r3, r3, #10
 8001a54:	4013      	ands	r3, r2
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a60:	4914      	ldr	r1, [pc, #80]	@ (8001ab4 <HAL_GPIO_Init+0x2b8>)
 8001a62:	2284      	movs	r2, #132	@ 0x84
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001a68:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <HAL_GPIO_Init+0x2b8>)
 8001a6a:	2380      	movs	r3, #128	@ 0x80
 8001a6c:	58d3      	ldr	r3, [r2, r3]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43da      	mvns	r2, r3
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	025b      	lsls	r3, r3, #9
 8001a82:	4013      	ands	r3, r2
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a8e:	4909      	ldr	r1, [pc, #36]	@ (8001ab4 <HAL_GPIO_Init+0x2b8>)
 8001a90:	2280      	movs	r2, #128	@ 0x80
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	40da      	lsrs	r2, r3
 8001aa4:	1e13      	subs	r3, r2, #0
 8001aa6:	d000      	beq.n	8001aaa <HAL_GPIO_Init+0x2ae>
 8001aa8:	e6b0      	b.n	800180c <HAL_GPIO_Init+0x10>
  }
}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	46c0      	nop			@ (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b006      	add	sp, #24
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021800 	.word	0x40021800
 8001ab8:	50000400 	.word	0x50000400
 8001abc:	50000800 	.word	0x50000800
 8001ac0:	50000c00 	.word	0x50000c00

08001ac4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	000a      	movs	r2, r1
 8001ace:	1cbb      	adds	r3, r7, #2
 8001ad0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	1cba      	adds	r2, r7, #2
 8001ad8:	8812      	ldrh	r2, [r2, #0]
 8001ada:	4013      	ands	r3, r2
 8001adc:	d004      	beq.n	8001ae8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001ade:	230f      	movs	r3, #15
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	e003      	b.n	8001af0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ae8:	230f      	movs	r3, #15
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001af0:	230f      	movs	r3, #15
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	781b      	ldrb	r3, [r3, #0]
}
 8001af6:	0018      	movs	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b004      	add	sp, #16
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	0008      	movs	r0, r1
 8001b08:	0011      	movs	r1, r2
 8001b0a:	1cbb      	adds	r3, r7, #2
 8001b0c:	1c02      	adds	r2, r0, #0
 8001b0e:	801a      	strh	r2, [r3, #0]
 8001b10:	1c7b      	adds	r3, r7, #1
 8001b12:	1c0a      	adds	r2, r1, #0
 8001b14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b16:	1c7b      	adds	r3, r7, #1
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d004      	beq.n	8001b28 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b1e:	1cbb      	adds	r3, r7, #2
 8001b20:	881a      	ldrh	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b26:	e003      	b.n	8001b30 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b28:	1cbb      	adds	r3, r7, #2
 8001b2a:	881a      	ldrh	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b30:	46c0      	nop			@ (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b002      	add	sp, #8
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a19      	ldr	r2, [pc, #100]	@ (8001bac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	4b17      	ldr	r3, [pc, #92]	@ (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	2380      	movs	r3, #128	@ 0x80
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d11f      	bne.n	8001b9c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b5c:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	0013      	movs	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	189b      	adds	r3, r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4912      	ldr	r1, [pc, #72]	@ (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f7fe fad4 	bl	8000118 <__udivsi3>
 8001b70:	0003      	movs	r3, r0
 8001b72:	3301      	adds	r3, #1
 8001b74:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b76:	e008      	b.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	e001      	b.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e009      	b.n	8001b9e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ba8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	401a      	ands	r2, r3
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d0ed      	beq.n	8001b78 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b004      	add	sp, #16
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	fffff9ff 	.word	0xfffff9ff
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	000f4240 	.word	0x000f4240

08001bb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e2fe      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d100      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x1e>
 8001bd4:	e07c      	b.n	8001cd0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd6:	4bc3      	ldr	r3, [pc, #780]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2238      	movs	r2, #56	@ 0x38
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be0:	4bc0      	ldr	r3, [pc, #768]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2203      	movs	r2, #3
 8001be6:	4013      	ands	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	d102      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3e>
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d002      	beq.n	8001bfc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d10b      	bne.n	8001c14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	4bb9      	ldr	r3, [pc, #740]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	029b      	lsls	r3, r3, #10
 8001c04:	4013      	ands	r3, r2
 8001c06:	d062      	beq.n	8001cce <HAL_RCC_OscConfig+0x116>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d15e      	bne.n	8001cce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e2d9      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	025b      	lsls	r3, r3, #9
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_OscConfig+0x78>
 8001c20:	4bb0      	ldr	r3, [pc, #704]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4baf      	ldr	r3, [pc, #700]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c26:	2180      	movs	r1, #128	@ 0x80
 8001c28:	0249      	lsls	r1, r1, #9
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	e020      	b.n	8001c72 <HAL_RCC_OscConfig+0xba>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	23a0      	movs	r3, #160	@ 0xa0
 8001c36:	02db      	lsls	r3, r3, #11
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d10e      	bne.n	8001c5a <HAL_RCC_OscConfig+0xa2>
 8001c3c:	4ba9      	ldr	r3, [pc, #676]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4ba8      	ldr	r3, [pc, #672]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c42:	2180      	movs	r1, #128	@ 0x80
 8001c44:	02c9      	lsls	r1, r1, #11
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	4ba6      	ldr	r3, [pc, #664]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4ba5      	ldr	r3, [pc, #660]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c50:	2180      	movs	r1, #128	@ 0x80
 8001c52:	0249      	lsls	r1, r1, #9
 8001c54:	430a      	orrs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e00b      	b.n	8001c72 <HAL_RCC_OscConfig+0xba>
 8001c5a:	4ba2      	ldr	r3, [pc, #648]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4ba1      	ldr	r3, [pc, #644]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c60:	49a1      	ldr	r1, [pc, #644]	@ (8001ee8 <HAL_RCC_OscConfig+0x330>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	4b9f      	ldr	r3, [pc, #636]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b9e      	ldr	r3, [pc, #632]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c6c:	499f      	ldr	r1, [pc, #636]	@ (8001eec <HAL_RCC_OscConfig+0x334>)
 8001c6e:	400a      	ands	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d014      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fabd 	bl	80011f8 <HAL_GetTick>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fab8 	bl	80011f8 <HAL_GetTick>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	@ 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e298      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c96:	4b93      	ldr	r3, [pc, #588]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	029b      	lsls	r3, r3, #10
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0xcc>
 8001ca2:	e015      	b.n	8001cd0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff faa8 	bl	80011f8 <HAL_GetTick>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cae:	f7ff faa3 	bl	80011f8 <HAL_GetTick>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b64      	cmp	r3, #100	@ 0x64
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e283      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cc0:	4b88      	ldr	r3, [pc, #544]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2380      	movs	r3, #128	@ 0x80
 8001cc6:	029b      	lsls	r3, r3, #10
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0xf6>
 8001ccc:	e000      	b.n	8001cd0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d100      	bne.n	8001cdc <HAL_RCC_OscConfig+0x124>
 8001cda:	e099      	b.n	8001e10 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cdc:	4b81      	ldr	r3, [pc, #516]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2238      	movs	r2, #56	@ 0x38
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2203      	movs	r2, #3
 8001cec:	4013      	ands	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d102      	bne.n	8001cfc <HAL_RCC_OscConfig+0x144>
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d002      	beq.n	8001d02 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d135      	bne.n	8001d6e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d02:	4b78      	ldr	r3, [pc, #480]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d005      	beq.n	8001d1a <HAL_RCC_OscConfig+0x162>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e256      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1a:	4b72      	ldr	r3, [pc, #456]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4a74      	ldr	r2, [pc, #464]	@ (8001ef0 <HAL_RCC_OscConfig+0x338>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	0019      	movs	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	021a      	lsls	r2, r3, #8
 8001d2a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d112      	bne.n	8001d5c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d36:	4b6b      	ldr	r3, [pc, #428]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef4 <HAL_RCC_OscConfig+0x33c>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	4b67      	ldr	r3, [pc, #412]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d46:	430a      	orrs	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d4a:	4b66      	ldr	r3, [pc, #408]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	0adb      	lsrs	r3, r3, #11
 8001d50:	2207      	movs	r2, #7
 8001d52:	4013      	ands	r3, r2
 8001d54:	4a68      	ldr	r2, [pc, #416]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001d56:	40da      	lsrs	r2, r3
 8001d58:	4b68      	ldr	r3, [pc, #416]	@ (8001efc <HAL_RCC_OscConfig+0x344>)
 8001d5a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d5c:	4b68      	ldr	r3, [pc, #416]	@ (8001f00 <HAL_RCC_OscConfig+0x348>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff f9ed 	bl	8001140 <HAL_InitTick>
 8001d66:	1e03      	subs	r3, r0, #0
 8001d68:	d051      	beq.n	8001e0e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e22c      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d030      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d76:	4b5b      	ldr	r3, [pc, #364]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ef4 <HAL_RCC_OscConfig+0x33c>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	0019      	movs	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	4b57      	ldr	r3, [pc, #348]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d86:	430a      	orrs	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001d8a:	4b56      	ldr	r3, [pc, #344]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b55      	ldr	r3, [pc, #340]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001d90:	2180      	movs	r1, #128	@ 0x80
 8001d92:	0049      	lsls	r1, r1, #1
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff fa2e 	bl	80011f8 <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da2:	f7ff fa29 	bl	80011f8 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e209      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc0:	4b48      	ldr	r3, [pc, #288]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4a4a      	ldr	r2, [pc, #296]	@ (8001ef0 <HAL_RCC_OscConfig+0x338>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	021a      	lsls	r2, r3, #8
 8001dd0:	4b44      	ldr	r3, [pc, #272]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	e01b      	b.n	8001e10 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001dd8:	4b42      	ldr	r3, [pc, #264]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b41      	ldr	r3, [pc, #260]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001dde:	4949      	ldr	r1, [pc, #292]	@ (8001f04 <HAL_RCC_OscConfig+0x34c>)
 8001de0:	400a      	ands	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff fa08 	bl	80011f8 <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dee:	f7ff fa03 	bl	80011f8 <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e1e3      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e00:	4b38      	ldr	r3, [pc, #224]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	@ 0x80
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d1f0      	bne.n	8001dee <HAL_RCC_OscConfig+0x236>
 8001e0c:	e000      	b.n	8001e10 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e0e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2208      	movs	r2, #8
 8001e16:	4013      	ands	r3, r2
 8001e18:	d047      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e1a:	4b32      	ldr	r3, [pc, #200]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2238      	movs	r2, #56	@ 0x38
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b18      	cmp	r3, #24
 8001e24:	d10a      	bne.n	8001e3c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001e26:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d03c      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2f2>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d138      	bne.n	8001eaa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e1c5      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d019      	beq.n	8001e78 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e44:	4b27      	ldr	r3, [pc, #156]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e48:	4b26      	ldr	r3, [pc, #152]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff f9d2 	bl	80011f8 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7ff f9cd 	bl	80011f8 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e1ad      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e70:	2202      	movs	r2, #2
 8001e72:	4013      	ands	r3, r2
 8001e74:	d0f1      	beq.n	8001e5a <HAL_RCC_OscConfig+0x2a2>
 8001e76:	e018      	b.n	8001eaa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e7a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	2101      	movs	r1, #1
 8001e80:	438a      	bics	r2, r1
 8001e82:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff f9b8 	bl	80011f8 <HAL_GetTick>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f9b3 	bl	80011f8 <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e193      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea0:	4b10      	ldr	r3, [pc, #64]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d1f1      	bne.n	8001e8e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2204      	movs	r2, #4
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x2fe>
 8001eb4:	e0c6      	b.n	8002044 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb6:	231f      	movs	r3, #31
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ebe:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2238      	movs	r2, #56	@ 0x38
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d11e      	bne.n	8001f08 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_RCC_OscConfig+0x32c>)
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ece:	2202      	movs	r2, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d100      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x31e>
 8001ed4:	e0b6      	b.n	8002044 <HAL_RCC_OscConfig+0x48c>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d000      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x328>
 8001ede:	e0b1      	b.n	8002044 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e171      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	fffeffff 	.word	0xfffeffff
 8001eec:	fffbffff 	.word	0xfffbffff
 8001ef0:	ffff80ff 	.word	0xffff80ff
 8001ef4:	ffffc7ff 	.word	0xffffc7ff
 8001ef8:	00f42400 	.word	0x00f42400
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000004 	.word	0x20000004
 8001f04:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f08:	4bb1      	ldr	r3, [pc, #708]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001f0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	055b      	lsls	r3, r3, #21
 8001f10:	4013      	ands	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_OscConfig+0x360>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x362>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d011      	beq.n	8001f42 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4bac      	ldr	r3, [pc, #688]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f22:	4bab      	ldr	r3, [pc, #684]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001f24:	2180      	movs	r1, #128	@ 0x80
 8001f26:	0549      	lsls	r1, r1, #21
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f2c:	4ba8      	ldr	r3, [pc, #672]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001f2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f30:	2380      	movs	r3, #128	@ 0x80
 8001f32:	055b      	lsls	r3, r3, #21
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001f3a:	231f      	movs	r3, #31
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f42:	4ba4      	ldr	r3, [pc, #656]	@ (80021d4 <HAL_RCC_OscConfig+0x61c>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d11a      	bne.n	8001f84 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f4e:	4ba1      	ldr	r3, [pc, #644]	@ (80021d4 <HAL_RCC_OscConfig+0x61c>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4ba0      	ldr	r3, [pc, #640]	@ (80021d4 <HAL_RCC_OscConfig+0x61c>)
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0049      	lsls	r1, r1, #1
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff f94c 	bl	80011f8 <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f66:	f7ff f947 	bl	80011f8 <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e127      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f78:	4b96      	ldr	r3, [pc, #600]	@ (80021d4 <HAL_RCC_OscConfig+0x61c>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d106      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3e2>
 8001f8c:	4b90      	ldr	r3, [pc, #576]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001f8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f90:	4b8f      	ldr	r3, [pc, #572]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001f92:	2101      	movs	r1, #1
 8001f94:	430a      	orrs	r2, r1
 8001f96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f98:	e01c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x41c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x404>
 8001fa2:	4b8b      	ldr	r3, [pc, #556]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001fa4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fa6:	4b8a      	ldr	r3, [pc, #552]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001fa8:	2104      	movs	r1, #4
 8001faa:	430a      	orrs	r2, r1
 8001fac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fae:	4b88      	ldr	r3, [pc, #544]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001fb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fb2:	4b87      	ldr	r3, [pc, #540]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCC_OscConfig+0x41c>
 8001fbc:	4b84      	ldr	r3, [pc, #528]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001fbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fc0:	4b83      	ldr	r3, [pc, #524]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fc8:	4b81      	ldr	r3, [pc, #516]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001fca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fcc:	4b80      	ldr	r3, [pc, #512]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001fce:	2104      	movs	r1, #4
 8001fd0:	438a      	bics	r2, r1
 8001fd2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d014      	beq.n	8002006 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f90c 	bl	80011f8 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe4:	e009      	b.n	8001ffa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff f907 	bl	80011f8 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	4a79      	ldr	r2, [pc, #484]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e0e6      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffa:	4b75      	ldr	r3, [pc, #468]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffe:	2202      	movs	r2, #2
 8002000:	4013      	ands	r3, r2
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x42e>
 8002004:	e013      	b.n	800202e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002006:	f7ff f8f7 	bl	80011f8 <HAL_GetTick>
 800200a:	0003      	movs	r3, r0
 800200c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800200e:	e009      	b.n	8002024 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002010:	f7ff f8f2 	bl	80011f8 <HAL_GetTick>
 8002014:	0002      	movs	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	4a6f      	ldr	r2, [pc, #444]	@ (80021d8 <HAL_RCC_OscConfig+0x620>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e0d1      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002024:	4b6a      	ldr	r3, [pc, #424]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8002026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002028:	2202      	movs	r2, #2
 800202a:	4013      	ands	r3, r2
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800202e:	231f      	movs	r3, #31
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d105      	bne.n	8002044 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002038:	4b65      	ldr	r3, [pc, #404]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 800203a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800203c:	4b64      	ldr	r3, [pc, #400]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 800203e:	4967      	ldr	r1, [pc, #412]	@ (80021dc <HAL_RCC_OscConfig+0x624>)
 8002040:	400a      	ands	r2, r1
 8002042:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d100      	bne.n	800204e <HAL_RCC_OscConfig+0x496>
 800204c:	e0bb      	b.n	80021c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800204e:	4b60      	ldr	r3, [pc, #384]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2238      	movs	r2, #56	@ 0x38
 8002054:	4013      	ands	r3, r2
 8002056:	2b10      	cmp	r3, #16
 8002058:	d100      	bne.n	800205c <HAL_RCC_OscConfig+0x4a4>
 800205a:	e07b      	b.n	8002154 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d156      	bne.n	8002112 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002064:	4b5a      	ldr	r3, [pc, #360]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b59      	ldr	r3, [pc, #356]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 800206a:	495d      	ldr	r1, [pc, #372]	@ (80021e0 <HAL_RCC_OscConfig+0x628>)
 800206c:	400a      	ands	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff f8c2 	bl	80011f8 <HAL_GetTick>
 8002074:	0003      	movs	r3, r0
 8002076:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207a:	f7ff f8bd 	bl	80011f8 <HAL_GetTick>
 800207e:	0002      	movs	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e09d      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800208c:	4b50      	ldr	r3, [pc, #320]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	2380      	movs	r3, #128	@ 0x80
 8002092:	049b      	lsls	r3, r3, #18
 8002094:	4013      	ands	r3, r2
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002098:	4b4d      	ldr	r3, [pc, #308]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4a51      	ldr	r2, [pc, #324]	@ (80021e4 <HAL_RCC_OscConfig+0x62c>)
 800209e:	4013      	ands	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1a      	ldr	r2, [r3, #32]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c4:	431a      	orrs	r2, r3
 80020c6:	4b42      	ldr	r3, [pc, #264]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 80020c8:	430a      	orrs	r2, r1
 80020ca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020cc:	4b40      	ldr	r3, [pc, #256]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b3f      	ldr	r3, [pc, #252]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 80020d2:	2180      	movs	r1, #128	@ 0x80
 80020d4:	0449      	lsls	r1, r1, #17
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80020da:	4b3d      	ldr	r3, [pc, #244]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	4b3c      	ldr	r3, [pc, #240]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 80020e0:	2180      	movs	r1, #128	@ 0x80
 80020e2:	0549      	lsls	r1, r1, #21
 80020e4:	430a      	orrs	r2, r1
 80020e6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7ff f886 	bl	80011f8 <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f2:	f7ff f881 	bl	80011f8 <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e061      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002104:	4b32      	ldr	r3, [pc, #200]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	049b      	lsls	r3, r3, #18
 800210c:	4013      	ands	r3, r2
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x53a>
 8002110:	e059      	b.n	80021c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	4b2f      	ldr	r3, [pc, #188]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4b2e      	ldr	r3, [pc, #184]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8002118:	4931      	ldr	r1, [pc, #196]	@ (80021e0 <HAL_RCC_OscConfig+0x628>)
 800211a:	400a      	ands	r2, r1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7ff f86b 	bl	80011f8 <HAL_GetTick>
 8002122:	0003      	movs	r3, r0
 8002124:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002128:	f7ff f866 	bl	80011f8 <HAL_GetTick>
 800212c:	0002      	movs	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e046      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213a:	4b25      	ldr	r3, [pc, #148]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	049b      	lsls	r3, r3, #18
 8002142:	4013      	ands	r3, r2
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002146:	4b22      	ldr	r3, [pc, #136]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	4b21      	ldr	r3, [pc, #132]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 800214c:	4926      	ldr	r1, [pc, #152]	@ (80021e8 <HAL_RCC_OscConfig+0x630>)
 800214e:	400a      	ands	r2, r1
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	e038      	b.n	80021c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e033      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002160:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <HAL_RCC_OscConfig+0x618>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2203      	movs	r2, #3
 800216a:	401a      	ands	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	429a      	cmp	r2, r3
 8002172:	d126      	bne.n	80021c2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2270      	movs	r2, #112	@ 0x70
 8002178:	401a      	ands	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d11f      	bne.n	80021c2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	23fe      	movs	r3, #254	@ 0xfe
 8002186:	01db      	lsls	r3, r3, #7
 8002188:	401a      	ands	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d116      	bne.n	80021c2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	23f8      	movs	r3, #248	@ 0xf8
 8002198:	039b      	lsls	r3, r3, #14
 800219a:	401a      	ands	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d10e      	bne.n	80021c2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	23e0      	movs	r3, #224	@ 0xe0
 80021a8:	051b      	lsls	r3, r3, #20
 80021aa:	401a      	ands	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	0f5b      	lsrs	r3, r3, #29
 80021b8:	075a      	lsls	r2, r3, #29
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d001      	beq.n	80021c6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b008      	add	sp, #32
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40007000 	.word	0x40007000
 80021d8:	00001388 	.word	0x00001388
 80021dc:	efffffff 	.word	0xefffffff
 80021e0:	feffffff 	.word	0xfeffffff
 80021e4:	11c1808c 	.word	0x11c1808c
 80021e8:	eefefffc 	.word	0xeefefffc

080021ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0e9      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b76      	ldr	r3, [pc, #472]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2207      	movs	r2, #7
 8002206:	4013      	ands	r3, r2
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d91e      	bls.n	800224c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b73      	ldr	r3, [pc, #460]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2207      	movs	r2, #7
 8002214:	4393      	bics	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	4b70      	ldr	r3, [pc, #448]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002220:	f7fe ffea 	bl	80011f8 <HAL_GetTick>
 8002224:	0003      	movs	r3, r0
 8002226:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002228:	e009      	b.n	800223e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222a:	f7fe ffe5 	bl	80011f8 <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	4a6a      	ldr	r2, [pc, #424]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e0ca      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800223e:	4b67      	ldr	r3, [pc, #412]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2207      	movs	r2, #7
 8002244:	4013      	ands	r3, r2
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d1ee      	bne.n	800222a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2202      	movs	r2, #2
 8002252:	4013      	ands	r3, r2
 8002254:	d015      	beq.n	8002282 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2204      	movs	r2, #4
 800225c:	4013      	ands	r3, r2
 800225e:	d006      	beq.n	800226e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002260:	4b60      	ldr	r3, [pc, #384]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	4b5f      	ldr	r3, [pc, #380]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002266:	21e0      	movs	r1, #224	@ 0xe0
 8002268:	01c9      	lsls	r1, r1, #7
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226e:	4b5d      	ldr	r3, [pc, #372]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	4a5d      	ldr	r2, [pc, #372]	@ (80023e8 <HAL_RCC_ClockConfig+0x1fc>)
 8002274:	4013      	ands	r3, r2
 8002276:	0019      	movs	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	4b59      	ldr	r3, [pc, #356]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 800227e:	430a      	orrs	r2, r1
 8002280:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2201      	movs	r2, #1
 8002288:	4013      	ands	r3, r2
 800228a:	d057      	beq.n	800233c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d107      	bne.n	80022a4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002294:	4b53      	ldr	r3, [pc, #332]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2380      	movs	r3, #128	@ 0x80
 800229a:	029b      	lsls	r3, r3, #10
 800229c:	4013      	ands	r3, r2
 800229e:	d12b      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e097      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ac:	4b4d      	ldr	r3, [pc, #308]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2380      	movs	r3, #128	@ 0x80
 80022b2:	049b      	lsls	r3, r3, #18
 80022b4:	4013      	ands	r3, r2
 80022b6:	d11f      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e08b      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c4:	4b47      	ldr	r3, [pc, #284]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	@ 0x80
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4013      	ands	r3, r2
 80022ce:	d113      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e07f      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d106      	bne.n	80022ea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022dc:	4b41      	ldr	r3, [pc, #260]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 80022de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e0:	2202      	movs	r2, #2
 80022e2:	4013      	ands	r3, r2
 80022e4:	d108      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e074      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ea:	4b3e      	ldr	r3, [pc, #248]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 80022ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ee:	2202      	movs	r2, #2
 80022f0:	4013      	ands	r3, r2
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e06d      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022f8:	4b3a      	ldr	r3, [pc, #232]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2207      	movs	r2, #7
 80022fe:	4393      	bics	r3, r2
 8002300:	0019      	movs	r1, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	4b37      	ldr	r3, [pc, #220]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002308:	430a      	orrs	r2, r1
 800230a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800230c:	f7fe ff74 	bl	80011f8 <HAL_GetTick>
 8002310:	0003      	movs	r3, r0
 8002312:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002314:	e009      	b.n	800232a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002316:	f7fe ff6f 	bl	80011f8 <HAL_GetTick>
 800231a:	0002      	movs	r2, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	4a2f      	ldr	r2, [pc, #188]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e054      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	4b2e      	ldr	r3, [pc, #184]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2238      	movs	r2, #56	@ 0x38
 8002330:	401a      	ands	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	429a      	cmp	r2, r3
 800233a:	d1ec      	bne.n	8002316 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800233c:	4b27      	ldr	r3, [pc, #156]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2207      	movs	r2, #7
 8002342:	4013      	ands	r3, r2
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d21e      	bcs.n	8002388 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b24      	ldr	r3, [pc, #144]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2207      	movs	r2, #7
 8002350:	4393      	bics	r3, r2
 8002352:	0019      	movs	r1, r3
 8002354:	4b21      	ldr	r3, [pc, #132]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800235c:	f7fe ff4c 	bl	80011f8 <HAL_GetTick>
 8002360:	0003      	movs	r3, r0
 8002362:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002364:	e009      	b.n	800237a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002366:	f7fe ff47 	bl	80011f8 <HAL_GetTick>
 800236a:	0002      	movs	r2, r0
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	4a1b      	ldr	r2, [pc, #108]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e02c      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800237a:	4b18      	ldr	r3, [pc, #96]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2207      	movs	r2, #7
 8002380:	4013      	ands	r3, r2
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d1ee      	bne.n	8002366 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2204      	movs	r2, #4
 800238e:	4013      	ands	r3, r2
 8002390:	d009      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002392:	4b14      	ldr	r3, [pc, #80]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	4a15      	ldr	r2, [pc, #84]	@ (80023ec <HAL_RCC_ClockConfig+0x200>)
 8002398:	4013      	ands	r3, r2
 800239a:	0019      	movs	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023a2:	430a      	orrs	r2, r1
 80023a4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80023a6:	f000 f829 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023aa:	0001      	movs	r1, r0
 80023ac:	4b0d      	ldr	r3, [pc, #52]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	220f      	movs	r2, #15
 80023b4:	401a      	ands	r2, r3
 80023b6:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <HAL_RCC_ClockConfig+0x204>)
 80023b8:	0092      	lsls	r2, r2, #2
 80023ba:	58d3      	ldr	r3, [r2, r3]
 80023bc:	221f      	movs	r2, #31
 80023be:	4013      	ands	r3, r2
 80023c0:	000a      	movs	r2, r1
 80023c2:	40da      	lsrs	r2, r3
 80023c4:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <HAL_RCC_ClockConfig+0x208>)
 80023c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023c8:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <HAL_RCC_ClockConfig+0x20c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7fe feb7 	bl	8001140 <HAL_InitTick>
 80023d2:	0003      	movs	r3, r0
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b004      	add	sp, #16
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40022000 	.word	0x40022000
 80023e0:	00001388 	.word	0x00001388
 80023e4:	40021000 	.word	0x40021000
 80023e8:	fffff0ff 	.word	0xfffff0ff
 80023ec:	ffff8fff 	.word	0xffff8fff
 80023f0:	08003f74 	.word	0x08003f74
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002402:	4b3c      	ldr	r3, [pc, #240]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2238      	movs	r2, #56	@ 0x38
 8002408:	4013      	ands	r3, r2
 800240a:	d10f      	bne.n	800242c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800240c:	4b39      	ldr	r3, [pc, #228]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	0adb      	lsrs	r3, r3, #11
 8002412:	2207      	movs	r2, #7
 8002414:	4013      	ands	r3, r2
 8002416:	2201      	movs	r2, #1
 8002418:	409a      	lsls	r2, r3
 800241a:	0013      	movs	r3, r2
 800241c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800241e:	6839      	ldr	r1, [r7, #0]
 8002420:	4835      	ldr	r0, [pc, #212]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002422:	f7fd fe79 	bl	8000118 <__udivsi3>
 8002426:	0003      	movs	r3, r0
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	e05d      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800242c:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2238      	movs	r2, #56	@ 0x38
 8002432:	4013      	ands	r3, r2
 8002434:	2b08      	cmp	r3, #8
 8002436:	d102      	bne.n	800243e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002438:	4b30      	ldr	r3, [pc, #192]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x100>)
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	e054      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800243e:	4b2d      	ldr	r3, [pc, #180]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2238      	movs	r2, #56	@ 0x38
 8002444:	4013      	ands	r3, r2
 8002446:	2b10      	cmp	r3, #16
 8002448:	d138      	bne.n	80024bc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800244a:	4b2a      	ldr	r3, [pc, #168]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2203      	movs	r2, #3
 8002450:	4013      	ands	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002454:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	2207      	movs	r2, #7
 800245c:	4013      	ands	r3, r2
 800245e:	3301      	adds	r3, #1
 8002460:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d10d      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	4824      	ldr	r0, [pc, #144]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x100>)
 800246c:	f7fd fe54 	bl	8000118 <__udivsi3>
 8002470:	0003      	movs	r3, r0
 8002472:	0019      	movs	r1, r3
 8002474:	4b1f      	ldr	r3, [pc, #124]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	227f      	movs	r2, #127	@ 0x7f
 800247c:	4013      	ands	r3, r2
 800247e:	434b      	muls	r3, r1
 8002480:	617b      	str	r3, [r7, #20]
        break;
 8002482:	e00d      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	481c      	ldr	r0, [pc, #112]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002488:	f7fd fe46 	bl	8000118 <__udivsi3>
 800248c:	0003      	movs	r3, r0
 800248e:	0019      	movs	r1, r3
 8002490:	4b18      	ldr	r3, [pc, #96]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	227f      	movs	r2, #127	@ 0x7f
 8002498:	4013      	ands	r3, r2
 800249a:	434b      	muls	r3, r1
 800249c:	617b      	str	r3, [r7, #20]
        break;
 800249e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80024a0:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0f5b      	lsrs	r3, r3, #29
 80024a6:	2207      	movs	r2, #7
 80024a8:	4013      	ands	r3, r2
 80024aa:	3301      	adds	r3, #1
 80024ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	6978      	ldr	r0, [r7, #20]
 80024b2:	f7fd fe31 	bl	8000118 <__udivsi3>
 80024b6:	0003      	movs	r3, r0
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	e015      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024bc:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2238      	movs	r2, #56	@ 0x38
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d103      	bne.n	80024d0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80024c8:	2380      	movs	r3, #128	@ 0x80
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	e00b      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024d0:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2238      	movs	r2, #56	@ 0x38
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b18      	cmp	r3, #24
 80024da:	d103      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80024dc:	23fa      	movs	r3, #250	@ 0xfa
 80024de:	01db      	lsls	r3, r3, #7
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	e001      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024e8:	693b      	ldr	r3, [r7, #16]
}
 80024ea:	0018      	movs	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b006      	add	sp, #24
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			@ (mov r8, r8)
 80024f4:	40021000 	.word	0x40021000
 80024f8:	00f42400 	.word	0x00f42400
 80024fc:	007a1200 	.word	0x007a1200

08002500 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0a8      	b.n	8002664 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	2382      	movs	r3, #130	@ 0x82
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	429a      	cmp	r2, r3
 8002524:	d009      	beq.n	800253a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	61da      	str	r2, [r3, #28]
 800252c:	e005      	b.n	800253a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	225d      	movs	r2, #93	@ 0x5d
 8002544:	5c9b      	ldrb	r3, [r3, r2]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	225c      	movs	r2, #92	@ 0x5c
 8002550:	2100      	movs	r1, #0
 8002552:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	0018      	movs	r0, r3
 8002558:	f7fe fc32 	bl	8000dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	225d      	movs	r2, #93	@ 0x5d
 8002560:	2102      	movs	r1, #2
 8002562:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2140      	movs	r1, #64	@ 0x40
 8002570:	438a      	bics	r2, r1
 8002572:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	23e0      	movs	r3, #224	@ 0xe0
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	429a      	cmp	r2, r3
 800257e:	d902      	bls.n	8002586 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	e002      	b.n	800258c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002586:	2380      	movs	r3, #128	@ 0x80
 8002588:	015b      	lsls	r3, r3, #5
 800258a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	23f0      	movs	r3, #240	@ 0xf0
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	429a      	cmp	r2, r3
 8002596:	d008      	beq.n	80025aa <HAL_SPI_Init+0xaa>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	23e0      	movs	r3, #224	@ 0xe0
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d002      	beq.n	80025aa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	2382      	movs	r3, #130	@ 0x82
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	401a      	ands	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6899      	ldr	r1, [r3, #8]
 80025b8:	2384      	movs	r3, #132	@ 0x84
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	400b      	ands	r3, r1
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2102      	movs	r1, #2
 80025c6:	400b      	ands	r3, r1
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	2101      	movs	r1, #1
 80025d0:	400b      	ands	r3, r1
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6999      	ldr	r1, [r3, #24]
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	400b      	ands	r3, r1
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2138      	movs	r1, #56	@ 0x38
 80025e6:	400b      	ands	r3, r1
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	2180      	movs	r1, #128	@ 0x80
 80025f0:	400b      	ands	r3, r1
 80025f2:	431a      	orrs	r2, r3
 80025f4:	0011      	movs	r1, r2
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025fa:	2380      	movs	r3, #128	@ 0x80
 80025fc:	019b      	lsls	r3, r3, #6
 80025fe:	401a      	ands	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	0c1b      	lsrs	r3, r3, #16
 800260e:	2204      	movs	r2, #4
 8002610:	401a      	ands	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	2110      	movs	r1, #16
 8002618:	400b      	ands	r3, r1
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002620:	2108      	movs	r1, #8
 8002622:	400b      	ands	r3, r1
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68d9      	ldr	r1, [r3, #12]
 800262a:	23f0      	movs	r3, #240	@ 0xf0
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	400b      	ands	r3, r1
 8002630:	431a      	orrs	r2, r3
 8002632:	0011      	movs	r1, r2
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	2380      	movs	r3, #128	@ 0x80
 8002638:	015b      	lsls	r3, r3, #5
 800263a:	401a      	ands	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4907      	ldr	r1, [pc, #28]	@ (800266c <HAL_SPI_Init+0x16c>)
 8002650:	400a      	ands	r2, r1
 8002652:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	225d      	movs	r2, #93	@ 0x5d
 800265e:	2101      	movs	r1, #1
 8002660:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	0018      	movs	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	b004      	add	sp, #16
 800266a:	bd80      	pop	{r7, pc}
 800266c:	fffff7ff 	.word	0xfffff7ff

08002670 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	1dbb      	adds	r3, r7, #6
 800267e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002680:	231f      	movs	r3, #31
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	225c      	movs	r2, #92	@ 0x5c
 800268c:	5c9b      	ldrb	r3, [r3, r2]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_SPI_Transmit+0x26>
 8002692:	2302      	movs	r3, #2
 8002694:	e147      	b.n	8002926 <HAL_SPI_Transmit+0x2b6>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	225c      	movs	r2, #92	@ 0x5c
 800269a:	2101      	movs	r1, #1
 800269c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800269e:	f7fe fdab 	bl	80011f8 <HAL_GetTick>
 80026a2:	0003      	movs	r3, r0
 80026a4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80026a6:	2316      	movs	r3, #22
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	1dba      	adds	r2, r7, #6
 80026ac:	8812      	ldrh	r2, [r2, #0]
 80026ae:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	225d      	movs	r2, #93	@ 0x5d
 80026b4:	5c9b      	ldrb	r3, [r3, r2]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d004      	beq.n	80026c6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80026bc:	231f      	movs	r3, #31
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2202      	movs	r2, #2
 80026c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80026c4:	e128      	b.n	8002918 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_SPI_Transmit+0x64>
 80026cc:	1dbb      	adds	r3, r7, #6
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d104      	bne.n	80026de <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80026d4:	231f      	movs	r3, #31
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
    goto error;
 80026dc:	e11c      	b.n	8002918 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	225d      	movs	r2, #93	@ 0x5d
 80026e2:	2103      	movs	r1, #3
 80026e4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1dba      	adds	r2, r7, #6
 80026f6:	8812      	ldrh	r2, [r2, #0]
 80026f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1dba      	adds	r2, r7, #6
 80026fe:	8812      	ldrh	r2, [r2, #0]
 8002700:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2244      	movs	r2, #68	@ 0x44
 800270c:	2100      	movs	r1, #0
 800270e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2246      	movs	r2, #70	@ 0x46
 8002714:	2100      	movs	r1, #0
 8002716:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	2380      	movs	r3, #128	@ 0x80
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	429a      	cmp	r2, r3
 800272e:	d110      	bne.n	8002752 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2140      	movs	r1, #64	@ 0x40
 800273c:	438a      	bics	r2, r1
 800273e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2180      	movs	r1, #128	@ 0x80
 800274c:	01c9      	lsls	r1, r1, #7
 800274e:	430a      	orrs	r2, r1
 8002750:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2240      	movs	r2, #64	@ 0x40
 800275a:	4013      	ands	r3, r2
 800275c:	2b40      	cmp	r3, #64	@ 0x40
 800275e:	d007      	beq.n	8002770 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2140      	movs	r1, #64	@ 0x40
 800276c:	430a      	orrs	r2, r1
 800276e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	23e0      	movs	r3, #224	@ 0xe0
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	429a      	cmp	r2, r3
 800277a:	d952      	bls.n	8002822 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <HAL_SPI_Transmit+0x11e>
 8002784:	2316      	movs	r3, #22
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d143      	bne.n	8002816 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002792:	881a      	ldrh	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800279e:	1c9a      	adds	r2, r3, #2
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027b2:	e030      	b.n	8002816 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d112      	bne.n	80027e8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c6:	881a      	ldrh	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d2:	1c9a      	adds	r2, r3, #2
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027e6:	e016      	b.n	8002816 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027e8:	f7fe fd06 	bl	80011f8 <HAL_GetTick>
 80027ec:	0002      	movs	r2, r0
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d802      	bhi.n	80027fe <HAL_SPI_Transmit+0x18e>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	3301      	adds	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_SPI_Transmit+0x194>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d108      	bne.n	8002816 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002804:	231f      	movs	r3, #31
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2203      	movs	r2, #3
 800280a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	225d      	movs	r2, #93	@ 0x5d
 8002810:	2101      	movs	r1, #1
 8002812:	5499      	strb	r1, [r3, r2]
          goto error;
 8002814:	e080      	b.n	8002918 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1c9      	bne.n	80027b4 <HAL_SPI_Transmit+0x144>
 8002820:	e053      	b.n	80028ca <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d004      	beq.n	8002834 <HAL_SPI_Transmit+0x1c4>
 800282a:	2316      	movs	r3, #22
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d145      	bne.n	80028c0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	330c      	adds	r3, #12
 800283e:	7812      	ldrb	r2, [r2, #0]
 8002840:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800285a:	e031      	b.n	80028c0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2202      	movs	r2, #2
 8002864:	4013      	ands	r3, r2
 8002866:	2b02      	cmp	r3, #2
 8002868:	d113      	bne.n	8002892 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	330c      	adds	r3, #12
 8002874:	7812      	ldrb	r2, [r2, #0]
 8002876:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002890:	e016      	b.n	80028c0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002892:	f7fe fcb1 	bl	80011f8 <HAL_GetTick>
 8002896:	0002      	movs	r2, r0
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d802      	bhi.n	80028a8 <HAL_SPI_Transmit+0x238>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	3301      	adds	r3, #1
 80028a6:	d102      	bne.n	80028ae <HAL_SPI_Transmit+0x23e>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d108      	bne.n	80028c0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80028ae:	231f      	movs	r3, #31
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	2203      	movs	r2, #3
 80028b4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	225d      	movs	r2, #93	@ 0x5d
 80028ba:	2101      	movs	r1, #1
 80028bc:	5499      	strb	r1, [r3, r2]
          goto error;
 80028be:	e02b      	b.n	8002918 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1c8      	bne.n	800285c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	6839      	ldr	r1, [r7, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 fa65 	bl	8002da0 <SPI_EndRxTxTransaction>
 80028d6:	1e03      	subs	r3, r0, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002906:	231f      	movs	r3, #31
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e003      	b.n	8002918 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	225d      	movs	r2, #93	@ 0x5d
 8002914:	2101      	movs	r1, #1
 8002916:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	225c      	movs	r2, #92	@ 0x5c
 800291c:	2100      	movs	r1, #0
 800291e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002920:	231f      	movs	r3, #31
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	781b      	ldrb	r3, [r3, #0]
}
 8002926:	0018      	movs	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	b008      	add	sp, #32
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	2240      	movs	r2, #64	@ 0x40
 800294c:	4013      	ands	r3, r2
 800294e:	d10d      	bne.n	800296c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2201      	movs	r2, #1
 8002954:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002956:	d009      	beq.n	800296c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2240      	movs	r2, #64	@ 0x40
 800295c:	4013      	ands	r3, r2
 800295e:	d005      	beq.n	800296c <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	0010      	movs	r0, r2
 8002968:	4798      	blx	r3
    return;
 800296a:	e0c5      	b.n	8002af8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2202      	movs	r2, #2
 8002970:	4013      	ands	r3, r2
 8002972:	d009      	beq.n	8002988 <HAL_SPI_IRQHandler+0x58>
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	2280      	movs	r2, #128	@ 0x80
 8002978:	4013      	ands	r3, r2
 800297a:	d005      	beq.n	8002988 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	0010      	movs	r0, r2
 8002984:	4798      	blx	r3
    return;
 8002986:	e0b7      	b.n	8002af8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2220      	movs	r2, #32
 800298c:	4013      	ands	r3, r2
 800298e:	d109      	bne.n	80029a4 <HAL_SPI_IRQHandler+0x74>
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2240      	movs	r2, #64	@ 0x40
 8002994:	4013      	ands	r3, r2
 8002996:	d105      	bne.n	80029a4 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	2380      	movs	r3, #128	@ 0x80
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4013      	ands	r3, r2
 80029a0:	d100      	bne.n	80029a4 <HAL_SPI_IRQHandler+0x74>
 80029a2:	e0a9      	b.n	8002af8 <HAL_SPI_IRQHandler+0x1c8>
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2220      	movs	r2, #32
 80029a8:	4013      	ands	r3, r2
 80029aa:	d100      	bne.n	80029ae <HAL_SPI_IRQHandler+0x7e>
 80029ac:	e0a4      	b.n	8002af8 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2240      	movs	r2, #64	@ 0x40
 80029b2:	4013      	ands	r3, r2
 80029b4:	d023      	beq.n	80029fe <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	225d      	movs	r2, #93	@ 0x5d
 80029ba:	5c9b      	ldrb	r3, [r3, r2]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d011      	beq.n	80029e6 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c6:	2204      	movs	r2, #4
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	e00b      	b.n	80029fe <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	693b      	ldr	r3, [r7, #16]
        return;
 80029fc:	e07c      	b.n	8002af8 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2220      	movs	r2, #32
 8002a02:	4013      	ands	r3, r2
 8002a04:	d014      	beq.n	8002a30 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2140      	movs	r1, #64	@ 0x40
 8002a2a:	438a      	bics	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4013      	ands	r3, r2
 8002a38:	d00c      	beq.n	8002a54 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a3e:	2208      	movs	r2, #8
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d04c      	beq.n	8002af6 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	21e0      	movs	r1, #224	@ 0xe0
 8002a68:	438a      	bics	r2, r1
 8002a6a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	225d      	movs	r2, #93	@ 0x5d
 8002a70:	2101      	movs	r1, #1
 8002a72:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	2202      	movs	r2, #2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d103      	bne.n	8002a84 <HAL_SPI_IRQHandler+0x154>
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4013      	ands	r3, r2
 8002a82:	d032      	beq.n	8002aea <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2103      	movs	r1, #3
 8002a90:	438a      	bics	r2, r1
 8002a92:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa0:	4a17      	ldr	r2, [pc, #92]	@ (8002b00 <HAL_SPI_IRQHandler+0x1d0>)
 8002aa2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7fe fd3b 	bl	8001524 <HAL_DMA_Abort_IT>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab6:	2240      	movs	r2, #64	@ 0x40
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d016      	beq.n	8002af4 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aca:	4a0d      	ldr	r2, [pc, #52]	@ (8002b00 <HAL_SPI_IRQHandler+0x1d0>)
 8002acc:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f7fe fd26 	bl	8001524 <HAL_DMA_Abort_IT>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d00b      	beq.n	8002af4 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae0:	2240      	movs	r2, #64	@ 0x40
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002ae8:	e004      	b.n	8002af4 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f000 f809 	bl	8002b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002af2:	e000      	b.n	8002af6 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8002af4:	46c0      	nop			@ (mov r8, r8)
    return;
 8002af6:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b008      	add	sp, #32
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	08002b15 	.word	0x08002b15

08002b04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b0c:	46c0      	nop			@ (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2246      	movs	r2, #70	@ 0x46
 8002b26:	2100      	movs	r1, #0
 8002b28:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	0018      	movs	r0, r3
 8002b34:	f7ff ffe6 	bl	8002b04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b38:	46c0      	nop			@ (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b004      	add	sp, #16
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	1dfb      	adds	r3, r7, #7
 8002b4e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b50:	f7fe fb52 	bl	80011f8 <HAL_GetTick>
 8002b54:	0002      	movs	r2, r0
 8002b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	18d3      	adds	r3, r2, r3
 8002b5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b60:	f7fe fb4a 	bl	80011f8 <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b68:	4b3a      	ldr	r3, [pc, #232]	@ (8002c54 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	015b      	lsls	r3, r3, #5
 8002b6e:	0d1b      	lsrs	r3, r3, #20
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	4353      	muls	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b76:	e058      	b.n	8002c2a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	d055      	beq.n	8002c2a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b7e:	f7fe fb3b 	bl	80011f8 <HAL_GetTick>
 8002b82:	0002      	movs	r2, r0
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d902      	bls.n	8002b94 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d142      	bne.n	8002c1a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	21e0      	movs	r1, #224	@ 0xe0
 8002ba0:	438a      	bics	r2, r1
 8002ba2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	2382      	movs	r3, #130	@ 0x82
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d113      	bne.n	8002bd8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	2380      	movs	r3, #128	@ 0x80
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d005      	beq.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d107      	bne.n	8002bd8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2140      	movs	r1, #64	@ 0x40
 8002bd4:	438a      	bics	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	019b      	lsls	r3, r3, #6
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d110      	bne.n	8002c06 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	491a      	ldr	r1, [pc, #104]	@ (8002c58 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2180      	movs	r1, #128	@ 0x80
 8002c00:	0189      	lsls	r1, r1, #6
 8002c02:	430a      	orrs	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	225d      	movs	r2, #93	@ 0x5d
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	225c      	movs	r2, #92	@ 0x5c
 8002c12:	2100      	movs	r1, #0
 8002c14:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e017      	b.n	8002c4a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	4013      	ands	r3, r2
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	425a      	negs	r2, r3
 8002c3a:	4153      	adcs	r3, r2
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	001a      	movs	r2, r3
 8002c40:	1dfb      	adds	r3, r7, #7
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d197      	bne.n	8002b78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b008      	add	sp, #32
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	20000000 	.word	0x20000000
 8002c58:	ffffdfff 	.word	0xffffdfff

08002c5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	@ 0x28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002c6a:	2317      	movs	r3, #23
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c72:	f7fe fac1 	bl	80011f8 <HAL_GetTick>
 8002c76:	0002      	movs	r2, r0
 8002c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	18d3      	adds	r3, r2, r3
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002c82:	f7fe fab9 	bl	80011f8 <HAL_GetTick>
 8002c86:	0003      	movs	r3, r0
 8002c88:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	330c      	adds	r3, #12
 8002c90:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c92:	4b41      	ldr	r3, [pc, #260]	@ (8002d98 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	0013      	movs	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	189b      	adds	r3, r3, r2
 8002c9c:	00da      	lsls	r2, r3, #3
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	0d1b      	lsrs	r3, r3, #20
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca4:	4353      	muls	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ca8:	e068      	b.n	8002d7c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	23c0      	movs	r3, #192	@ 0xc0
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d10a      	bne.n	8002cca <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d107      	bne.n	8002cca <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	2117      	movs	r1, #23
 8002cc2:	187b      	adds	r3, r7, r1
 8002cc4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	d055      	beq.n	8002d7c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cd0:	f7fe fa92 	bl	80011f8 <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d902      	bls.n	8002ce6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d142      	bne.n	8002d6c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	21e0      	movs	r1, #224	@ 0xe0
 8002cf2:	438a      	bics	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	2382      	movs	r3, #130	@ 0x82
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d113      	bne.n	8002d2a <SPI_WaitFifoStateUntilTimeout+0xce>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	2380      	movs	r3, #128	@ 0x80
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d005      	beq.n	8002d1a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	2380      	movs	r3, #128	@ 0x80
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d107      	bne.n	8002d2a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2140      	movs	r1, #64	@ 0x40
 8002d26:	438a      	bics	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d2e:	2380      	movs	r3, #128	@ 0x80
 8002d30:	019b      	lsls	r3, r3, #6
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d110      	bne.n	8002d58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4916      	ldr	r1, [pc, #88]	@ (8002d9c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002d42:	400a      	ands	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2180      	movs	r1, #128	@ 0x80
 8002d52:	0189      	lsls	r1, r1, #6
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	225d      	movs	r2, #93	@ 0x5d
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	225c      	movs	r2, #92	@ 0x5c
 8002d64:	2100      	movs	r1, #0
 8002d66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e010      	b.n	8002d8e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d18e      	bne.n	8002caa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b00a      	add	sp, #40	@ 0x28
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	ffffdfff 	.word	0xffffdfff

08002da0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	23c0      	movs	r3, #192	@ 0xc0
 8002db0:	0159      	lsls	r1, r3, #5
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	0013      	movs	r3, r2
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f7ff ff4e 	bl	8002c5c <SPI_WaitFifoStateUntilTimeout>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d007      	beq.n	8002dd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dc8:	2220      	movs	r2, #32
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e027      	b.n	8002e24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	0013      	movs	r3, r2
 8002dde:	2200      	movs	r2, #0
 8002de0:	2180      	movs	r1, #128	@ 0x80
 8002de2:	f7ff fead 	bl	8002b40 <SPI_WaitFlagStateUntilTimeout>
 8002de6:	1e03      	subs	r3, r0, #0
 8002de8:	d007      	beq.n	8002dfa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dee:	2220      	movs	r2, #32
 8002df0:	431a      	orrs	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e014      	b.n	8002e24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	23c0      	movs	r3, #192	@ 0xc0
 8002dfe:	00d9      	lsls	r1, r3, #3
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	0013      	movs	r3, r2
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f7ff ff27 	bl	8002c5c <SPI_WaitFifoStateUntilTimeout>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d007      	beq.n	8002e22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e16:	2220      	movs	r2, #32
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e000      	b.n	8002e24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b004      	add	sp, #16
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <srand>:
 8002e2c:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <srand+0x48>)
 8002e2e:	b570      	push	{r4, r5, r6, lr}
 8002e30:	681d      	ldr	r5, [r3, #0]
 8002e32:	0004      	movs	r4, r0
 8002e34:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d116      	bne.n	8002e68 <srand+0x3c>
 8002e3a:	2018      	movs	r0, #24
 8002e3c:	f000 fa68 	bl	8003310 <malloc>
 8002e40:	1e02      	subs	r2, r0, #0
 8002e42:	6328      	str	r0, [r5, #48]	@ 0x30
 8002e44:	d104      	bne.n	8002e50 <srand+0x24>
 8002e46:	2146      	movs	r1, #70	@ 0x46
 8002e48:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <srand+0x4c>)
 8002e4a:	480c      	ldr	r0, [pc, #48]	@ (8002e7c <srand+0x50>)
 8002e4c:	f000 f9f8 	bl	8003240 <__assert_func>
 8002e50:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <srand+0x54>)
 8002e52:	2100      	movs	r1, #0
 8002e54:	6003      	str	r3, [r0, #0]
 8002e56:	4b0b      	ldr	r3, [pc, #44]	@ (8002e84 <srand+0x58>)
 8002e58:	6043      	str	r3, [r0, #4]
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <srand+0x5c>)
 8002e5c:	6083      	str	r3, [r0, #8]
 8002e5e:	230b      	movs	r3, #11
 8002e60:	8183      	strh	r3, [r0, #12]
 8002e62:	2001      	movs	r0, #1
 8002e64:	6110      	str	r0, [r2, #16]
 8002e66:	6151      	str	r1, [r2, #20]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002e6c:	611c      	str	r4, [r3, #16]
 8002e6e:	615a      	str	r2, [r3, #20]
 8002e70:	bd70      	pop	{r4, r5, r6, pc}
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	20000018 	.word	0x20000018
 8002e78:	08003fb4 	.word	0x08003fb4
 8002e7c:	08003fcb 	.word	0x08003fcb
 8002e80:	abcd330e 	.word	0xabcd330e
 8002e84:	e66d1234 	.word	0xe66d1234
 8002e88:	0005deec 	.word	0x0005deec

08002e8c <rand>:
 8002e8c:	4b16      	ldr	r3, [pc, #88]	@ (8002ee8 <rand+0x5c>)
 8002e8e:	b510      	push	{r4, lr}
 8002e90:	681c      	ldr	r4, [r3, #0]
 8002e92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d116      	bne.n	8002ec6 <rand+0x3a>
 8002e98:	2018      	movs	r0, #24
 8002e9a:	f000 fa39 	bl	8003310 <malloc>
 8002e9e:	1e02      	subs	r2, r0, #0
 8002ea0:	6320      	str	r0, [r4, #48]	@ 0x30
 8002ea2:	d104      	bne.n	8002eae <rand+0x22>
 8002ea4:	2152      	movs	r1, #82	@ 0x52
 8002ea6:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <rand+0x60>)
 8002ea8:	4811      	ldr	r0, [pc, #68]	@ (8002ef0 <rand+0x64>)
 8002eaa:	f000 f9c9 	bl	8003240 <__assert_func>
 8002eae:	4b11      	ldr	r3, [pc, #68]	@ (8002ef4 <rand+0x68>)
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	6003      	str	r3, [r0, #0]
 8002eb4:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <rand+0x6c>)
 8002eb6:	6043      	str	r3, [r0, #4]
 8002eb8:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <rand+0x70>)
 8002eba:	6083      	str	r3, [r0, #8]
 8002ebc:	230b      	movs	r3, #11
 8002ebe:	8183      	strh	r3, [r0, #12]
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	6110      	str	r0, [r2, #16]
 8002ec4:	6151      	str	r1, [r2, #20]
 8002ec6:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f00 <rand+0x74>)
 8002eca:	6920      	ldr	r0, [r4, #16]
 8002ecc:	6961      	ldr	r1, [r4, #20]
 8002ece:	4b0d      	ldr	r3, [pc, #52]	@ (8002f04 <rand+0x78>)
 8002ed0:	f7fd fa98 	bl	8000404 <__aeabi_lmul>
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	1880      	adds	r0, r0, r2
 8002eda:	4159      	adcs	r1, r3
 8002edc:	6120      	str	r0, [r4, #16]
 8002ede:	6161      	str	r1, [r4, #20]
 8002ee0:	0048      	lsls	r0, r1, #1
 8002ee2:	0840      	lsrs	r0, r0, #1
 8002ee4:	bd10      	pop	{r4, pc}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	20000018 	.word	0x20000018
 8002eec:	08003fb4 	.word	0x08003fb4
 8002ef0:	08003fcb 	.word	0x08003fcb
 8002ef4:	abcd330e 	.word	0xabcd330e
 8002ef8:	e66d1234 	.word	0xe66d1234
 8002efc:	0005deec 	.word	0x0005deec
 8002f00:	4c957f2d 	.word	0x4c957f2d
 8002f04:	5851f42d 	.word	0x5851f42d

08002f08 <std>:
 8002f08:	2300      	movs	r3, #0
 8002f0a:	b510      	push	{r4, lr}
 8002f0c:	0004      	movs	r4, r0
 8002f0e:	6003      	str	r3, [r0, #0]
 8002f10:	6043      	str	r3, [r0, #4]
 8002f12:	6083      	str	r3, [r0, #8]
 8002f14:	8181      	strh	r1, [r0, #12]
 8002f16:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f18:	81c2      	strh	r2, [r0, #14]
 8002f1a:	6103      	str	r3, [r0, #16]
 8002f1c:	6143      	str	r3, [r0, #20]
 8002f1e:	6183      	str	r3, [r0, #24]
 8002f20:	0019      	movs	r1, r3
 8002f22:	2208      	movs	r2, #8
 8002f24:	305c      	adds	r0, #92	@ 0x5c
 8002f26:	f000 f8ff 	bl	8003128 <memset>
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <std+0x50>)
 8002f2c:	6224      	str	r4, [r4, #32]
 8002f2e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f30:	4b0a      	ldr	r3, [pc, #40]	@ (8002f5c <std+0x54>)
 8002f32:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f34:	4b0a      	ldr	r3, [pc, #40]	@ (8002f60 <std+0x58>)
 8002f36:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f38:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <std+0x5c>)
 8002f3a:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f68 <std+0x60>)
 8002f3e:	429c      	cmp	r4, r3
 8002f40:	d005      	beq.n	8002f4e <std+0x46>
 8002f42:	4b0a      	ldr	r3, [pc, #40]	@ (8002f6c <std+0x64>)
 8002f44:	429c      	cmp	r4, r3
 8002f46:	d002      	beq.n	8002f4e <std+0x46>
 8002f48:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <std+0x68>)
 8002f4a:	429c      	cmp	r4, r3
 8002f4c:	d103      	bne.n	8002f56 <std+0x4e>
 8002f4e:	0020      	movs	r0, r4
 8002f50:	3058      	adds	r0, #88	@ 0x58
 8002f52:	f000 f969 	bl	8003228 <__retarget_lock_init_recursive>
 8002f56:	bd10      	pop	{r4, pc}
 8002f58:	08003091 	.word	0x08003091
 8002f5c:	080030b9 	.word	0x080030b9
 8002f60:	080030f1 	.word	0x080030f1
 8002f64:	0800311d 	.word	0x0800311d
 8002f68:	20000168 	.word	0x20000168
 8002f6c:	200001d0 	.word	0x200001d0
 8002f70:	20000238 	.word	0x20000238

08002f74 <stdio_exit_handler>:
 8002f74:	b510      	push	{r4, lr}
 8002f76:	4a03      	ldr	r2, [pc, #12]	@ (8002f84 <stdio_exit_handler+0x10>)
 8002f78:	4903      	ldr	r1, [pc, #12]	@ (8002f88 <stdio_exit_handler+0x14>)
 8002f7a:	4804      	ldr	r0, [pc, #16]	@ (8002f8c <stdio_exit_handler+0x18>)
 8002f7c:	f000 f86c 	bl	8003058 <_fwalk_sglue>
 8002f80:	bd10      	pop	{r4, pc}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	2000000c 	.word	0x2000000c
 8002f88:	08003595 	.word	0x08003595
 8002f8c:	2000001c 	.word	0x2000001c

08002f90 <cleanup_stdio>:
 8002f90:	6841      	ldr	r1, [r0, #4]
 8002f92:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <cleanup_stdio+0x30>)
 8002f94:	b510      	push	{r4, lr}
 8002f96:	0004      	movs	r4, r0
 8002f98:	4299      	cmp	r1, r3
 8002f9a:	d001      	beq.n	8002fa0 <cleanup_stdio+0x10>
 8002f9c:	f000 fafa 	bl	8003594 <_fflush_r>
 8002fa0:	68a1      	ldr	r1, [r4, #8]
 8002fa2:	4b08      	ldr	r3, [pc, #32]	@ (8002fc4 <cleanup_stdio+0x34>)
 8002fa4:	4299      	cmp	r1, r3
 8002fa6:	d002      	beq.n	8002fae <cleanup_stdio+0x1e>
 8002fa8:	0020      	movs	r0, r4
 8002faa:	f000 faf3 	bl	8003594 <_fflush_r>
 8002fae:	68e1      	ldr	r1, [r4, #12]
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <cleanup_stdio+0x38>)
 8002fb2:	4299      	cmp	r1, r3
 8002fb4:	d002      	beq.n	8002fbc <cleanup_stdio+0x2c>
 8002fb6:	0020      	movs	r0, r4
 8002fb8:	f000 faec 	bl	8003594 <_fflush_r>
 8002fbc:	bd10      	pop	{r4, pc}
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	20000168 	.word	0x20000168
 8002fc4:	200001d0 	.word	0x200001d0
 8002fc8:	20000238 	.word	0x20000238

08002fcc <global_stdio_init.part.0>:
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	4b09      	ldr	r3, [pc, #36]	@ (8002ff4 <global_stdio_init.part.0+0x28>)
 8002fd0:	4a09      	ldr	r2, [pc, #36]	@ (8002ff8 <global_stdio_init.part.0+0x2c>)
 8002fd2:	2104      	movs	r1, #4
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	4809      	ldr	r0, [pc, #36]	@ (8002ffc <global_stdio_init.part.0+0x30>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f7ff ff95 	bl	8002f08 <std>
 8002fde:	2201      	movs	r2, #1
 8002fe0:	2109      	movs	r1, #9
 8002fe2:	4807      	ldr	r0, [pc, #28]	@ (8003000 <global_stdio_init.part.0+0x34>)
 8002fe4:	f7ff ff90 	bl	8002f08 <std>
 8002fe8:	2202      	movs	r2, #2
 8002fea:	2112      	movs	r1, #18
 8002fec:	4805      	ldr	r0, [pc, #20]	@ (8003004 <global_stdio_init.part.0+0x38>)
 8002fee:	f7ff ff8b 	bl	8002f08 <std>
 8002ff2:	bd10      	pop	{r4, pc}
 8002ff4:	200002a0 	.word	0x200002a0
 8002ff8:	08002f75 	.word	0x08002f75
 8002ffc:	20000168 	.word	0x20000168
 8003000:	200001d0 	.word	0x200001d0
 8003004:	20000238 	.word	0x20000238

08003008 <__sfp_lock_acquire>:
 8003008:	b510      	push	{r4, lr}
 800300a:	4802      	ldr	r0, [pc, #8]	@ (8003014 <__sfp_lock_acquire+0xc>)
 800300c:	f000 f90d 	bl	800322a <__retarget_lock_acquire_recursive>
 8003010:	bd10      	pop	{r4, pc}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	200002a9 	.word	0x200002a9

08003018 <__sfp_lock_release>:
 8003018:	b510      	push	{r4, lr}
 800301a:	4802      	ldr	r0, [pc, #8]	@ (8003024 <__sfp_lock_release+0xc>)
 800301c:	f000 f906 	bl	800322c <__retarget_lock_release_recursive>
 8003020:	bd10      	pop	{r4, pc}
 8003022:	46c0      	nop			@ (mov r8, r8)
 8003024:	200002a9 	.word	0x200002a9

08003028 <__sinit>:
 8003028:	b510      	push	{r4, lr}
 800302a:	0004      	movs	r4, r0
 800302c:	f7ff ffec 	bl	8003008 <__sfp_lock_acquire>
 8003030:	6a23      	ldr	r3, [r4, #32]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <__sinit+0x14>
 8003036:	f7ff ffef 	bl	8003018 <__sfp_lock_release>
 800303a:	bd10      	pop	{r4, pc}
 800303c:	4b04      	ldr	r3, [pc, #16]	@ (8003050 <__sinit+0x28>)
 800303e:	6223      	str	r3, [r4, #32]
 8003040:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <__sinit+0x2c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f6      	bne.n	8003036 <__sinit+0xe>
 8003048:	f7ff ffc0 	bl	8002fcc <global_stdio_init.part.0>
 800304c:	e7f3      	b.n	8003036 <__sinit+0xe>
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	08002f91 	.word	0x08002f91
 8003054:	200002a0 	.word	0x200002a0

08003058 <_fwalk_sglue>:
 8003058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800305a:	0014      	movs	r4, r2
 800305c:	2600      	movs	r6, #0
 800305e:	9000      	str	r0, [sp, #0]
 8003060:	9101      	str	r1, [sp, #4]
 8003062:	68a5      	ldr	r5, [r4, #8]
 8003064:	6867      	ldr	r7, [r4, #4]
 8003066:	3f01      	subs	r7, #1
 8003068:	d504      	bpl.n	8003074 <_fwalk_sglue+0x1c>
 800306a:	6824      	ldr	r4, [r4, #0]
 800306c:	2c00      	cmp	r4, #0
 800306e:	d1f8      	bne.n	8003062 <_fwalk_sglue+0xa>
 8003070:	0030      	movs	r0, r6
 8003072:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003074:	89ab      	ldrh	r3, [r5, #12]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d908      	bls.n	800308c <_fwalk_sglue+0x34>
 800307a:	220e      	movs	r2, #14
 800307c:	5eab      	ldrsh	r3, [r5, r2]
 800307e:	3301      	adds	r3, #1
 8003080:	d004      	beq.n	800308c <_fwalk_sglue+0x34>
 8003082:	0029      	movs	r1, r5
 8003084:	9800      	ldr	r0, [sp, #0]
 8003086:	9b01      	ldr	r3, [sp, #4]
 8003088:	4798      	blx	r3
 800308a:	4306      	orrs	r6, r0
 800308c:	3568      	adds	r5, #104	@ 0x68
 800308e:	e7ea      	b.n	8003066 <_fwalk_sglue+0xe>

08003090 <__sread>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	000c      	movs	r4, r1
 8003094:	250e      	movs	r5, #14
 8003096:	5f49      	ldrsh	r1, [r1, r5]
 8003098:	f000 f874 	bl	8003184 <_read_r>
 800309c:	2800      	cmp	r0, #0
 800309e:	db03      	blt.n	80030a8 <__sread+0x18>
 80030a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80030a2:	181b      	adds	r3, r3, r0
 80030a4:	6563      	str	r3, [r4, #84]	@ 0x54
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
 80030a8:	89a3      	ldrh	r3, [r4, #12]
 80030aa:	4a02      	ldr	r2, [pc, #8]	@ (80030b4 <__sread+0x24>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	81a3      	strh	r3, [r4, #12]
 80030b0:	e7f9      	b.n	80030a6 <__sread+0x16>
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	ffffefff 	.word	0xffffefff

080030b8 <__swrite>:
 80030b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ba:	001f      	movs	r7, r3
 80030bc:	898b      	ldrh	r3, [r1, #12]
 80030be:	0005      	movs	r5, r0
 80030c0:	000c      	movs	r4, r1
 80030c2:	0016      	movs	r6, r2
 80030c4:	05db      	lsls	r3, r3, #23
 80030c6:	d505      	bpl.n	80030d4 <__swrite+0x1c>
 80030c8:	230e      	movs	r3, #14
 80030ca:	5ec9      	ldrsh	r1, [r1, r3]
 80030cc:	2200      	movs	r2, #0
 80030ce:	2302      	movs	r3, #2
 80030d0:	f000 f844 	bl	800315c <_lseek_r>
 80030d4:	89a3      	ldrh	r3, [r4, #12]
 80030d6:	4a05      	ldr	r2, [pc, #20]	@ (80030ec <__swrite+0x34>)
 80030d8:	0028      	movs	r0, r5
 80030da:	4013      	ands	r3, r2
 80030dc:	81a3      	strh	r3, [r4, #12]
 80030de:	0032      	movs	r2, r6
 80030e0:	230e      	movs	r3, #14
 80030e2:	5ee1      	ldrsh	r1, [r4, r3]
 80030e4:	003b      	movs	r3, r7
 80030e6:	f000 f861 	bl	80031ac <_write_r>
 80030ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030ec:	ffffefff 	.word	0xffffefff

080030f0 <__sseek>:
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	000c      	movs	r4, r1
 80030f4:	250e      	movs	r5, #14
 80030f6:	5f49      	ldrsh	r1, [r1, r5]
 80030f8:	f000 f830 	bl	800315c <_lseek_r>
 80030fc:	89a3      	ldrh	r3, [r4, #12]
 80030fe:	1c42      	adds	r2, r0, #1
 8003100:	d103      	bne.n	800310a <__sseek+0x1a>
 8003102:	4a05      	ldr	r2, [pc, #20]	@ (8003118 <__sseek+0x28>)
 8003104:	4013      	ands	r3, r2
 8003106:	81a3      	strh	r3, [r4, #12]
 8003108:	bd70      	pop	{r4, r5, r6, pc}
 800310a:	2280      	movs	r2, #128	@ 0x80
 800310c:	0152      	lsls	r2, r2, #5
 800310e:	4313      	orrs	r3, r2
 8003110:	81a3      	strh	r3, [r4, #12]
 8003112:	6560      	str	r0, [r4, #84]	@ 0x54
 8003114:	e7f8      	b.n	8003108 <__sseek+0x18>
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	ffffefff 	.word	0xffffefff

0800311c <__sclose>:
 800311c:	b510      	push	{r4, lr}
 800311e:	230e      	movs	r3, #14
 8003120:	5ec9      	ldrsh	r1, [r1, r3]
 8003122:	f000 f809 	bl	8003138 <_close_r>
 8003126:	bd10      	pop	{r4, pc}

08003128 <memset>:
 8003128:	0003      	movs	r3, r0
 800312a:	1882      	adds	r2, r0, r2
 800312c:	4293      	cmp	r3, r2
 800312e:	d100      	bne.n	8003132 <memset+0xa>
 8003130:	4770      	bx	lr
 8003132:	7019      	strb	r1, [r3, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	e7f9      	b.n	800312c <memset+0x4>

08003138 <_close_r>:
 8003138:	2300      	movs	r3, #0
 800313a:	b570      	push	{r4, r5, r6, lr}
 800313c:	4d06      	ldr	r5, [pc, #24]	@ (8003158 <_close_r+0x20>)
 800313e:	0004      	movs	r4, r0
 8003140:	0008      	movs	r0, r1
 8003142:	602b      	str	r3, [r5, #0]
 8003144:	f7fd ff4a 	bl	8000fdc <_close>
 8003148:	1c43      	adds	r3, r0, #1
 800314a:	d103      	bne.n	8003154 <_close_r+0x1c>
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d000      	beq.n	8003154 <_close_r+0x1c>
 8003152:	6023      	str	r3, [r4, #0]
 8003154:	bd70      	pop	{r4, r5, r6, pc}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	200002a4 	.word	0x200002a4

0800315c <_lseek_r>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	0004      	movs	r4, r0
 8003160:	0008      	movs	r0, r1
 8003162:	0011      	movs	r1, r2
 8003164:	001a      	movs	r2, r3
 8003166:	2300      	movs	r3, #0
 8003168:	4d05      	ldr	r5, [pc, #20]	@ (8003180 <_lseek_r+0x24>)
 800316a:	602b      	str	r3, [r5, #0]
 800316c:	f7fd ff57 	bl	800101e <_lseek>
 8003170:	1c43      	adds	r3, r0, #1
 8003172:	d103      	bne.n	800317c <_lseek_r+0x20>
 8003174:	682b      	ldr	r3, [r5, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d000      	beq.n	800317c <_lseek_r+0x20>
 800317a:	6023      	str	r3, [r4, #0]
 800317c:	bd70      	pop	{r4, r5, r6, pc}
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	200002a4 	.word	0x200002a4

08003184 <_read_r>:
 8003184:	b570      	push	{r4, r5, r6, lr}
 8003186:	0004      	movs	r4, r0
 8003188:	0008      	movs	r0, r1
 800318a:	0011      	movs	r1, r2
 800318c:	001a      	movs	r2, r3
 800318e:	2300      	movs	r3, #0
 8003190:	4d05      	ldr	r5, [pc, #20]	@ (80031a8 <_read_r+0x24>)
 8003192:	602b      	str	r3, [r5, #0]
 8003194:	f7fd fee9 	bl	8000f6a <_read>
 8003198:	1c43      	adds	r3, r0, #1
 800319a:	d103      	bne.n	80031a4 <_read_r+0x20>
 800319c:	682b      	ldr	r3, [r5, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d000      	beq.n	80031a4 <_read_r+0x20>
 80031a2:	6023      	str	r3, [r4, #0]
 80031a4:	bd70      	pop	{r4, r5, r6, pc}
 80031a6:	46c0      	nop			@ (mov r8, r8)
 80031a8:	200002a4 	.word	0x200002a4

080031ac <_write_r>:
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	0004      	movs	r4, r0
 80031b0:	0008      	movs	r0, r1
 80031b2:	0011      	movs	r1, r2
 80031b4:	001a      	movs	r2, r3
 80031b6:	2300      	movs	r3, #0
 80031b8:	4d05      	ldr	r5, [pc, #20]	@ (80031d0 <_write_r+0x24>)
 80031ba:	602b      	str	r3, [r5, #0]
 80031bc:	f7fd fef2 	bl	8000fa4 <_write>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	d103      	bne.n	80031cc <_write_r+0x20>
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d000      	beq.n	80031cc <_write_r+0x20>
 80031ca:	6023      	str	r3, [r4, #0]
 80031cc:	bd70      	pop	{r4, r5, r6, pc}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	200002a4 	.word	0x200002a4

080031d4 <__errno>:
 80031d4:	4b01      	ldr	r3, [pc, #4]	@ (80031dc <__errno+0x8>)
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	4770      	bx	lr
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	20000018 	.word	0x20000018

080031e0 <__libc_init_array>:
 80031e0:	b570      	push	{r4, r5, r6, lr}
 80031e2:	2600      	movs	r6, #0
 80031e4:	4c0c      	ldr	r4, [pc, #48]	@ (8003218 <__libc_init_array+0x38>)
 80031e6:	4d0d      	ldr	r5, [pc, #52]	@ (800321c <__libc_init_array+0x3c>)
 80031e8:	1b64      	subs	r4, r4, r5
 80031ea:	10a4      	asrs	r4, r4, #2
 80031ec:	42a6      	cmp	r6, r4
 80031ee:	d109      	bne.n	8003204 <__libc_init_array+0x24>
 80031f0:	2600      	movs	r6, #0
 80031f2:	f000 fe6b 	bl	8003ecc <_init>
 80031f6:	4c0a      	ldr	r4, [pc, #40]	@ (8003220 <__libc_init_array+0x40>)
 80031f8:	4d0a      	ldr	r5, [pc, #40]	@ (8003224 <__libc_init_array+0x44>)
 80031fa:	1b64      	subs	r4, r4, r5
 80031fc:	10a4      	asrs	r4, r4, #2
 80031fe:	42a6      	cmp	r6, r4
 8003200:	d105      	bne.n	800320e <__libc_init_array+0x2e>
 8003202:	bd70      	pop	{r4, r5, r6, pc}
 8003204:	00b3      	lsls	r3, r6, #2
 8003206:	58eb      	ldr	r3, [r5, r3]
 8003208:	4798      	blx	r3
 800320a:	3601      	adds	r6, #1
 800320c:	e7ee      	b.n	80031ec <__libc_init_array+0xc>
 800320e:	00b3      	lsls	r3, r6, #2
 8003210:	58eb      	ldr	r3, [r5, r3]
 8003212:	4798      	blx	r3
 8003214:	3601      	adds	r6, #1
 8003216:	e7f2      	b.n	80031fe <__libc_init_array+0x1e>
 8003218:	08004094 	.word	0x08004094
 800321c:	08004094 	.word	0x08004094
 8003220:	08004098 	.word	0x08004098
 8003224:	08004094 	.word	0x08004094

08003228 <__retarget_lock_init_recursive>:
 8003228:	4770      	bx	lr

0800322a <__retarget_lock_acquire_recursive>:
 800322a:	4770      	bx	lr

0800322c <__retarget_lock_release_recursive>:
 800322c:	4770      	bx	lr

0800322e <memcpy>:
 800322e:	2300      	movs	r3, #0
 8003230:	b510      	push	{r4, lr}
 8003232:	429a      	cmp	r2, r3
 8003234:	d100      	bne.n	8003238 <memcpy+0xa>
 8003236:	bd10      	pop	{r4, pc}
 8003238:	5ccc      	ldrb	r4, [r1, r3]
 800323a:	54c4      	strb	r4, [r0, r3]
 800323c:	3301      	adds	r3, #1
 800323e:	e7f8      	b.n	8003232 <memcpy+0x4>

08003240 <__assert_func>:
 8003240:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003242:	0014      	movs	r4, r2
 8003244:	001a      	movs	r2, r3
 8003246:	4b09      	ldr	r3, [pc, #36]	@ (800326c <__assert_func+0x2c>)
 8003248:	0005      	movs	r5, r0
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	000e      	movs	r6, r1
 800324e:	68d8      	ldr	r0, [r3, #12]
 8003250:	4b07      	ldr	r3, [pc, #28]	@ (8003270 <__assert_func+0x30>)
 8003252:	2c00      	cmp	r4, #0
 8003254:	d101      	bne.n	800325a <__assert_func+0x1a>
 8003256:	4b07      	ldr	r3, [pc, #28]	@ (8003274 <__assert_func+0x34>)
 8003258:	001c      	movs	r4, r3
 800325a:	4907      	ldr	r1, [pc, #28]	@ (8003278 <__assert_func+0x38>)
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	9402      	str	r4, [sp, #8]
 8003260:	002b      	movs	r3, r5
 8003262:	9600      	str	r6, [sp, #0]
 8003264:	f000 f9c2 	bl	80035ec <fiprintf>
 8003268:	f000 f9e2 	bl	8003630 <abort>
 800326c:	20000018 	.word	0x20000018
 8003270:	08004023 	.word	0x08004023
 8003274:	0800405e 	.word	0x0800405e
 8003278:	08004030 	.word	0x08004030

0800327c <_free_r>:
 800327c:	b570      	push	{r4, r5, r6, lr}
 800327e:	0005      	movs	r5, r0
 8003280:	1e0c      	subs	r4, r1, #0
 8003282:	d010      	beq.n	80032a6 <_free_r+0x2a>
 8003284:	3c04      	subs	r4, #4
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	da00      	bge.n	800328e <_free_r+0x12>
 800328c:	18e4      	adds	r4, r4, r3
 800328e:	0028      	movs	r0, r5
 8003290:	f000 f8ea 	bl	8003468 <__malloc_lock>
 8003294:	4a1d      	ldr	r2, [pc, #116]	@ (800330c <_free_r+0x90>)
 8003296:	6813      	ldr	r3, [r2, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <_free_r+0x2c>
 800329c:	6063      	str	r3, [r4, #4]
 800329e:	6014      	str	r4, [r2, #0]
 80032a0:	0028      	movs	r0, r5
 80032a2:	f000 f8e9 	bl	8003478 <__malloc_unlock>
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	42a3      	cmp	r3, r4
 80032aa:	d908      	bls.n	80032be <_free_r+0x42>
 80032ac:	6820      	ldr	r0, [r4, #0]
 80032ae:	1821      	adds	r1, r4, r0
 80032b0:	428b      	cmp	r3, r1
 80032b2:	d1f3      	bne.n	800329c <_free_r+0x20>
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	1809      	adds	r1, r1, r0
 80032ba:	6021      	str	r1, [r4, #0]
 80032bc:	e7ee      	b.n	800329c <_free_r+0x20>
 80032be:	001a      	movs	r2, r3
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <_free_r+0x4e>
 80032c6:	42a3      	cmp	r3, r4
 80032c8:	d9f9      	bls.n	80032be <_free_r+0x42>
 80032ca:	6811      	ldr	r1, [r2, #0]
 80032cc:	1850      	adds	r0, r2, r1
 80032ce:	42a0      	cmp	r0, r4
 80032d0:	d10b      	bne.n	80032ea <_free_r+0x6e>
 80032d2:	6820      	ldr	r0, [r4, #0]
 80032d4:	1809      	adds	r1, r1, r0
 80032d6:	1850      	adds	r0, r2, r1
 80032d8:	6011      	str	r1, [r2, #0]
 80032da:	4283      	cmp	r3, r0
 80032dc:	d1e0      	bne.n	80032a0 <_free_r+0x24>
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	1841      	adds	r1, r0, r1
 80032e4:	6011      	str	r1, [r2, #0]
 80032e6:	6053      	str	r3, [r2, #4]
 80032e8:	e7da      	b.n	80032a0 <_free_r+0x24>
 80032ea:	42a0      	cmp	r0, r4
 80032ec:	d902      	bls.n	80032f4 <_free_r+0x78>
 80032ee:	230c      	movs	r3, #12
 80032f0:	602b      	str	r3, [r5, #0]
 80032f2:	e7d5      	b.n	80032a0 <_free_r+0x24>
 80032f4:	6820      	ldr	r0, [r4, #0]
 80032f6:	1821      	adds	r1, r4, r0
 80032f8:	428b      	cmp	r3, r1
 80032fa:	d103      	bne.n	8003304 <_free_r+0x88>
 80032fc:	6819      	ldr	r1, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	1809      	adds	r1, r1, r0
 8003302:	6021      	str	r1, [r4, #0]
 8003304:	6063      	str	r3, [r4, #4]
 8003306:	6054      	str	r4, [r2, #4]
 8003308:	e7ca      	b.n	80032a0 <_free_r+0x24>
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	200002b0 	.word	0x200002b0

08003310 <malloc>:
 8003310:	b510      	push	{r4, lr}
 8003312:	4b03      	ldr	r3, [pc, #12]	@ (8003320 <malloc+0x10>)
 8003314:	0001      	movs	r1, r0
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	f000 f826 	bl	8003368 <_malloc_r>
 800331c:	bd10      	pop	{r4, pc}
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	20000018 	.word	0x20000018

08003324 <sbrk_aligned>:
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	4e0f      	ldr	r6, [pc, #60]	@ (8003364 <sbrk_aligned+0x40>)
 8003328:	000d      	movs	r5, r1
 800332a:	6831      	ldr	r1, [r6, #0]
 800332c:	0004      	movs	r4, r0
 800332e:	2900      	cmp	r1, #0
 8003330:	d102      	bne.n	8003338 <sbrk_aligned+0x14>
 8003332:	f000 f96b 	bl	800360c <_sbrk_r>
 8003336:	6030      	str	r0, [r6, #0]
 8003338:	0029      	movs	r1, r5
 800333a:	0020      	movs	r0, r4
 800333c:	f000 f966 	bl	800360c <_sbrk_r>
 8003340:	1c43      	adds	r3, r0, #1
 8003342:	d103      	bne.n	800334c <sbrk_aligned+0x28>
 8003344:	2501      	movs	r5, #1
 8003346:	426d      	negs	r5, r5
 8003348:	0028      	movs	r0, r5
 800334a:	bd70      	pop	{r4, r5, r6, pc}
 800334c:	2303      	movs	r3, #3
 800334e:	1cc5      	adds	r5, r0, #3
 8003350:	439d      	bics	r5, r3
 8003352:	42a8      	cmp	r0, r5
 8003354:	d0f8      	beq.n	8003348 <sbrk_aligned+0x24>
 8003356:	1a29      	subs	r1, r5, r0
 8003358:	0020      	movs	r0, r4
 800335a:	f000 f957 	bl	800360c <_sbrk_r>
 800335e:	3001      	adds	r0, #1
 8003360:	d1f2      	bne.n	8003348 <sbrk_aligned+0x24>
 8003362:	e7ef      	b.n	8003344 <sbrk_aligned+0x20>
 8003364:	200002ac 	.word	0x200002ac

08003368 <_malloc_r>:
 8003368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800336a:	2203      	movs	r2, #3
 800336c:	1ccb      	adds	r3, r1, #3
 800336e:	4393      	bics	r3, r2
 8003370:	3308      	adds	r3, #8
 8003372:	0005      	movs	r5, r0
 8003374:	001f      	movs	r7, r3
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d234      	bcs.n	80033e4 <_malloc_r+0x7c>
 800337a:	270c      	movs	r7, #12
 800337c:	42b9      	cmp	r1, r7
 800337e:	d833      	bhi.n	80033e8 <_malloc_r+0x80>
 8003380:	0028      	movs	r0, r5
 8003382:	f000 f871 	bl	8003468 <__malloc_lock>
 8003386:	4e37      	ldr	r6, [pc, #220]	@ (8003464 <_malloc_r+0xfc>)
 8003388:	6833      	ldr	r3, [r6, #0]
 800338a:	001c      	movs	r4, r3
 800338c:	2c00      	cmp	r4, #0
 800338e:	d12f      	bne.n	80033f0 <_malloc_r+0x88>
 8003390:	0039      	movs	r1, r7
 8003392:	0028      	movs	r0, r5
 8003394:	f7ff ffc6 	bl	8003324 <sbrk_aligned>
 8003398:	0004      	movs	r4, r0
 800339a:	1c43      	adds	r3, r0, #1
 800339c:	d15f      	bne.n	800345e <_malloc_r+0xf6>
 800339e:	6834      	ldr	r4, [r6, #0]
 80033a0:	9400      	str	r4, [sp, #0]
 80033a2:	9b00      	ldr	r3, [sp, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d14a      	bne.n	800343e <_malloc_r+0xd6>
 80033a8:	2c00      	cmp	r4, #0
 80033aa:	d052      	beq.n	8003452 <_malloc_r+0xea>
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	0028      	movs	r0, r5
 80033b0:	18e3      	adds	r3, r4, r3
 80033b2:	9900      	ldr	r1, [sp, #0]
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	f000 f929 	bl	800360c <_sbrk_r>
 80033ba:	9b01      	ldr	r3, [sp, #4]
 80033bc:	4283      	cmp	r3, r0
 80033be:	d148      	bne.n	8003452 <_malloc_r+0xea>
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	0028      	movs	r0, r5
 80033c4:	1aff      	subs	r7, r7, r3
 80033c6:	0039      	movs	r1, r7
 80033c8:	f7ff ffac 	bl	8003324 <sbrk_aligned>
 80033cc:	3001      	adds	r0, #1
 80033ce:	d040      	beq.n	8003452 <_malloc_r+0xea>
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	19db      	adds	r3, r3, r7
 80033d4:	6023      	str	r3, [r4, #0]
 80033d6:	6833      	ldr	r3, [r6, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	2a00      	cmp	r2, #0
 80033dc:	d133      	bne.n	8003446 <_malloc_r+0xde>
 80033de:	9b00      	ldr	r3, [sp, #0]
 80033e0:	6033      	str	r3, [r6, #0]
 80033e2:	e019      	b.n	8003418 <_malloc_r+0xb0>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	dac9      	bge.n	800337c <_malloc_r+0x14>
 80033e8:	230c      	movs	r3, #12
 80033ea:	602b      	str	r3, [r5, #0]
 80033ec:	2000      	movs	r0, #0
 80033ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033f0:	6821      	ldr	r1, [r4, #0]
 80033f2:	1bc9      	subs	r1, r1, r7
 80033f4:	d420      	bmi.n	8003438 <_malloc_r+0xd0>
 80033f6:	290b      	cmp	r1, #11
 80033f8:	d90a      	bls.n	8003410 <_malloc_r+0xa8>
 80033fa:	19e2      	adds	r2, r4, r7
 80033fc:	6027      	str	r7, [r4, #0]
 80033fe:	42a3      	cmp	r3, r4
 8003400:	d104      	bne.n	800340c <_malloc_r+0xa4>
 8003402:	6032      	str	r2, [r6, #0]
 8003404:	6863      	ldr	r3, [r4, #4]
 8003406:	6011      	str	r1, [r2, #0]
 8003408:	6053      	str	r3, [r2, #4]
 800340a:	e005      	b.n	8003418 <_malloc_r+0xb0>
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	e7f9      	b.n	8003404 <_malloc_r+0x9c>
 8003410:	6862      	ldr	r2, [r4, #4]
 8003412:	42a3      	cmp	r3, r4
 8003414:	d10e      	bne.n	8003434 <_malloc_r+0xcc>
 8003416:	6032      	str	r2, [r6, #0]
 8003418:	0028      	movs	r0, r5
 800341a:	f000 f82d 	bl	8003478 <__malloc_unlock>
 800341e:	0020      	movs	r0, r4
 8003420:	2207      	movs	r2, #7
 8003422:	300b      	adds	r0, #11
 8003424:	1d23      	adds	r3, r4, #4
 8003426:	4390      	bics	r0, r2
 8003428:	1ac2      	subs	r2, r0, r3
 800342a:	4298      	cmp	r0, r3
 800342c:	d0df      	beq.n	80033ee <_malloc_r+0x86>
 800342e:	1a1b      	subs	r3, r3, r0
 8003430:	50a3      	str	r3, [r4, r2]
 8003432:	e7dc      	b.n	80033ee <_malloc_r+0x86>
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	e7ef      	b.n	8003418 <_malloc_r+0xb0>
 8003438:	0023      	movs	r3, r4
 800343a:	6864      	ldr	r4, [r4, #4]
 800343c:	e7a6      	b.n	800338c <_malloc_r+0x24>
 800343e:	9c00      	ldr	r4, [sp, #0]
 8003440:	6863      	ldr	r3, [r4, #4]
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	e7ad      	b.n	80033a2 <_malloc_r+0x3a>
 8003446:	001a      	movs	r2, r3
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	42a3      	cmp	r3, r4
 800344c:	d1fb      	bne.n	8003446 <_malloc_r+0xde>
 800344e:	2300      	movs	r3, #0
 8003450:	e7da      	b.n	8003408 <_malloc_r+0xa0>
 8003452:	230c      	movs	r3, #12
 8003454:	0028      	movs	r0, r5
 8003456:	602b      	str	r3, [r5, #0]
 8003458:	f000 f80e 	bl	8003478 <__malloc_unlock>
 800345c:	e7c6      	b.n	80033ec <_malloc_r+0x84>
 800345e:	6007      	str	r7, [r0, #0]
 8003460:	e7da      	b.n	8003418 <_malloc_r+0xb0>
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	200002b0 	.word	0x200002b0

08003468 <__malloc_lock>:
 8003468:	b510      	push	{r4, lr}
 800346a:	4802      	ldr	r0, [pc, #8]	@ (8003474 <__malloc_lock+0xc>)
 800346c:	f7ff fedd 	bl	800322a <__retarget_lock_acquire_recursive>
 8003470:	bd10      	pop	{r4, pc}
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	200002a8 	.word	0x200002a8

08003478 <__malloc_unlock>:
 8003478:	b510      	push	{r4, lr}
 800347a:	4802      	ldr	r0, [pc, #8]	@ (8003484 <__malloc_unlock+0xc>)
 800347c:	f7ff fed6 	bl	800322c <__retarget_lock_release_recursive>
 8003480:	bd10      	pop	{r4, pc}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	200002a8 	.word	0x200002a8

08003488 <__sflush_r>:
 8003488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800348a:	220c      	movs	r2, #12
 800348c:	5e8b      	ldrsh	r3, [r1, r2]
 800348e:	0005      	movs	r5, r0
 8003490:	000c      	movs	r4, r1
 8003492:	071a      	lsls	r2, r3, #28
 8003494:	d456      	bmi.n	8003544 <__sflush_r+0xbc>
 8003496:	684a      	ldr	r2, [r1, #4]
 8003498:	2a00      	cmp	r2, #0
 800349a:	dc02      	bgt.n	80034a2 <__sflush_r+0x1a>
 800349c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800349e:	2a00      	cmp	r2, #0
 80034a0:	dd4e      	ble.n	8003540 <__sflush_r+0xb8>
 80034a2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80034a4:	2f00      	cmp	r7, #0
 80034a6:	d04b      	beq.n	8003540 <__sflush_r+0xb8>
 80034a8:	2200      	movs	r2, #0
 80034aa:	2080      	movs	r0, #128	@ 0x80
 80034ac:	682e      	ldr	r6, [r5, #0]
 80034ae:	602a      	str	r2, [r5, #0]
 80034b0:	001a      	movs	r2, r3
 80034b2:	0140      	lsls	r0, r0, #5
 80034b4:	6a21      	ldr	r1, [r4, #32]
 80034b6:	4002      	ands	r2, r0
 80034b8:	4203      	tst	r3, r0
 80034ba:	d033      	beq.n	8003524 <__sflush_r+0x9c>
 80034bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80034be:	89a3      	ldrh	r3, [r4, #12]
 80034c0:	075b      	lsls	r3, r3, #29
 80034c2:	d506      	bpl.n	80034d2 <__sflush_r+0x4a>
 80034c4:	6863      	ldr	r3, [r4, #4]
 80034c6:	1ad2      	subs	r2, r2, r3
 80034c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <__sflush_r+0x4a>
 80034ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034d0:	1ad2      	subs	r2, r2, r3
 80034d2:	2300      	movs	r3, #0
 80034d4:	0028      	movs	r0, r5
 80034d6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80034d8:	6a21      	ldr	r1, [r4, #32]
 80034da:	47b8      	blx	r7
 80034dc:	89a2      	ldrh	r2, [r4, #12]
 80034de:	1c43      	adds	r3, r0, #1
 80034e0:	d106      	bne.n	80034f0 <__sflush_r+0x68>
 80034e2:	6829      	ldr	r1, [r5, #0]
 80034e4:	291d      	cmp	r1, #29
 80034e6:	d846      	bhi.n	8003576 <__sflush_r+0xee>
 80034e8:	4b29      	ldr	r3, [pc, #164]	@ (8003590 <__sflush_r+0x108>)
 80034ea:	410b      	asrs	r3, r1
 80034ec:	07db      	lsls	r3, r3, #31
 80034ee:	d442      	bmi.n	8003576 <__sflush_r+0xee>
 80034f0:	2300      	movs	r3, #0
 80034f2:	6063      	str	r3, [r4, #4]
 80034f4:	6923      	ldr	r3, [r4, #16]
 80034f6:	6023      	str	r3, [r4, #0]
 80034f8:	04d2      	lsls	r2, r2, #19
 80034fa:	d505      	bpl.n	8003508 <__sflush_r+0x80>
 80034fc:	1c43      	adds	r3, r0, #1
 80034fe:	d102      	bne.n	8003506 <__sflush_r+0x7e>
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d100      	bne.n	8003508 <__sflush_r+0x80>
 8003506:	6560      	str	r0, [r4, #84]	@ 0x54
 8003508:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800350a:	602e      	str	r6, [r5, #0]
 800350c:	2900      	cmp	r1, #0
 800350e:	d017      	beq.n	8003540 <__sflush_r+0xb8>
 8003510:	0023      	movs	r3, r4
 8003512:	3344      	adds	r3, #68	@ 0x44
 8003514:	4299      	cmp	r1, r3
 8003516:	d002      	beq.n	800351e <__sflush_r+0x96>
 8003518:	0028      	movs	r0, r5
 800351a:	f7ff feaf 	bl	800327c <_free_r>
 800351e:	2300      	movs	r3, #0
 8003520:	6363      	str	r3, [r4, #52]	@ 0x34
 8003522:	e00d      	b.n	8003540 <__sflush_r+0xb8>
 8003524:	2301      	movs	r3, #1
 8003526:	0028      	movs	r0, r5
 8003528:	47b8      	blx	r7
 800352a:	0002      	movs	r2, r0
 800352c:	1c43      	adds	r3, r0, #1
 800352e:	d1c6      	bne.n	80034be <__sflush_r+0x36>
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0c3      	beq.n	80034be <__sflush_r+0x36>
 8003536:	2b1d      	cmp	r3, #29
 8003538:	d001      	beq.n	800353e <__sflush_r+0xb6>
 800353a:	2b16      	cmp	r3, #22
 800353c:	d11a      	bne.n	8003574 <__sflush_r+0xec>
 800353e:	602e      	str	r6, [r5, #0]
 8003540:	2000      	movs	r0, #0
 8003542:	e01e      	b.n	8003582 <__sflush_r+0xfa>
 8003544:	690e      	ldr	r6, [r1, #16]
 8003546:	2e00      	cmp	r6, #0
 8003548:	d0fa      	beq.n	8003540 <__sflush_r+0xb8>
 800354a:	680f      	ldr	r7, [r1, #0]
 800354c:	600e      	str	r6, [r1, #0]
 800354e:	1bba      	subs	r2, r7, r6
 8003550:	9201      	str	r2, [sp, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	079b      	lsls	r3, r3, #30
 8003556:	d100      	bne.n	800355a <__sflush_r+0xd2>
 8003558:	694a      	ldr	r2, [r1, #20]
 800355a:	60a2      	str	r2, [r4, #8]
 800355c:	9b01      	ldr	r3, [sp, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	ddee      	ble.n	8003540 <__sflush_r+0xb8>
 8003562:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003564:	0032      	movs	r2, r6
 8003566:	001f      	movs	r7, r3
 8003568:	0028      	movs	r0, r5
 800356a:	9b01      	ldr	r3, [sp, #4]
 800356c:	6a21      	ldr	r1, [r4, #32]
 800356e:	47b8      	blx	r7
 8003570:	2800      	cmp	r0, #0
 8003572:	dc07      	bgt.n	8003584 <__sflush_r+0xfc>
 8003574:	89a2      	ldrh	r2, [r4, #12]
 8003576:	2340      	movs	r3, #64	@ 0x40
 8003578:	2001      	movs	r0, #1
 800357a:	4313      	orrs	r3, r2
 800357c:	b21b      	sxth	r3, r3
 800357e:	81a3      	strh	r3, [r4, #12]
 8003580:	4240      	negs	r0, r0
 8003582:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003584:	9b01      	ldr	r3, [sp, #4]
 8003586:	1836      	adds	r6, r6, r0
 8003588:	1a1b      	subs	r3, r3, r0
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	e7e6      	b.n	800355c <__sflush_r+0xd4>
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	dfbffffe 	.word	0xdfbffffe

08003594 <_fflush_r>:
 8003594:	690b      	ldr	r3, [r1, #16]
 8003596:	b570      	push	{r4, r5, r6, lr}
 8003598:	0005      	movs	r5, r0
 800359a:	000c      	movs	r4, r1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <_fflush_r+0x12>
 80035a0:	2500      	movs	r5, #0
 80035a2:	0028      	movs	r0, r5
 80035a4:	bd70      	pop	{r4, r5, r6, pc}
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d004      	beq.n	80035b4 <_fflush_r+0x20>
 80035aa:	6a03      	ldr	r3, [r0, #32]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <_fflush_r+0x20>
 80035b0:	f7ff fd3a 	bl	8003028 <__sinit>
 80035b4:	220c      	movs	r2, #12
 80035b6:	5ea3      	ldrsh	r3, [r4, r2]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f1      	beq.n	80035a0 <_fflush_r+0xc>
 80035bc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80035be:	07d2      	lsls	r2, r2, #31
 80035c0:	d404      	bmi.n	80035cc <_fflush_r+0x38>
 80035c2:	059b      	lsls	r3, r3, #22
 80035c4:	d402      	bmi.n	80035cc <_fflush_r+0x38>
 80035c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035c8:	f7ff fe2f 	bl	800322a <__retarget_lock_acquire_recursive>
 80035cc:	0028      	movs	r0, r5
 80035ce:	0021      	movs	r1, r4
 80035d0:	f7ff ff5a 	bl	8003488 <__sflush_r>
 80035d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035d6:	0005      	movs	r5, r0
 80035d8:	07db      	lsls	r3, r3, #31
 80035da:	d4e2      	bmi.n	80035a2 <_fflush_r+0xe>
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	059b      	lsls	r3, r3, #22
 80035e0:	d4df      	bmi.n	80035a2 <_fflush_r+0xe>
 80035e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035e4:	f7ff fe22 	bl	800322c <__retarget_lock_release_recursive>
 80035e8:	e7db      	b.n	80035a2 <_fflush_r+0xe>
	...

080035ec <fiprintf>:
 80035ec:	b40e      	push	{r1, r2, r3}
 80035ee:	b517      	push	{r0, r1, r2, r4, lr}
 80035f0:	4c05      	ldr	r4, [pc, #20]	@ (8003608 <fiprintf+0x1c>)
 80035f2:	ab05      	add	r3, sp, #20
 80035f4:	cb04      	ldmia	r3!, {r2}
 80035f6:	0001      	movs	r1, r0
 80035f8:	6820      	ldr	r0, [r4, #0]
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	f000 f846 	bl	800368c <_vfiprintf_r>
 8003600:	bc1e      	pop	{r1, r2, r3, r4}
 8003602:	bc08      	pop	{r3}
 8003604:	b003      	add	sp, #12
 8003606:	4718      	bx	r3
 8003608:	20000018 	.word	0x20000018

0800360c <_sbrk_r>:
 800360c:	2300      	movs	r3, #0
 800360e:	b570      	push	{r4, r5, r6, lr}
 8003610:	4d06      	ldr	r5, [pc, #24]	@ (800362c <_sbrk_r+0x20>)
 8003612:	0004      	movs	r4, r0
 8003614:	0008      	movs	r0, r1
 8003616:	602b      	str	r3, [r5, #0]
 8003618:	f7fd fd0c 	bl	8001034 <_sbrk>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	d103      	bne.n	8003628 <_sbrk_r+0x1c>
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d000      	beq.n	8003628 <_sbrk_r+0x1c>
 8003626:	6023      	str	r3, [r4, #0]
 8003628:	bd70      	pop	{r4, r5, r6, pc}
 800362a:	46c0      	nop			@ (mov r8, r8)
 800362c:	200002a4 	.word	0x200002a4

08003630 <abort>:
 8003630:	2006      	movs	r0, #6
 8003632:	b510      	push	{r4, lr}
 8003634:	f000 fb8e 	bl	8003d54 <raise>
 8003638:	2001      	movs	r0, #1
 800363a:	f7fd fc89 	bl	8000f50 <_exit>

0800363e <__sfputc_r>:
 800363e:	6893      	ldr	r3, [r2, #8]
 8003640:	b510      	push	{r4, lr}
 8003642:	3b01      	subs	r3, #1
 8003644:	6093      	str	r3, [r2, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	da04      	bge.n	8003654 <__sfputc_r+0x16>
 800364a:	6994      	ldr	r4, [r2, #24]
 800364c:	42a3      	cmp	r3, r4
 800364e:	db07      	blt.n	8003660 <__sfputc_r+0x22>
 8003650:	290a      	cmp	r1, #10
 8003652:	d005      	beq.n	8003660 <__sfputc_r+0x22>
 8003654:	6813      	ldr	r3, [r2, #0]
 8003656:	1c58      	adds	r0, r3, #1
 8003658:	6010      	str	r0, [r2, #0]
 800365a:	7019      	strb	r1, [r3, #0]
 800365c:	0008      	movs	r0, r1
 800365e:	bd10      	pop	{r4, pc}
 8003660:	f000 faae 	bl	8003bc0 <__swbuf_r>
 8003664:	0001      	movs	r1, r0
 8003666:	e7f9      	b.n	800365c <__sfputc_r+0x1e>

08003668 <__sfputs_r>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	0006      	movs	r6, r0
 800366c:	000f      	movs	r7, r1
 800366e:	0014      	movs	r4, r2
 8003670:	18d5      	adds	r5, r2, r3
 8003672:	42ac      	cmp	r4, r5
 8003674:	d101      	bne.n	800367a <__sfputs_r+0x12>
 8003676:	2000      	movs	r0, #0
 8003678:	e007      	b.n	800368a <__sfputs_r+0x22>
 800367a:	7821      	ldrb	r1, [r4, #0]
 800367c:	003a      	movs	r2, r7
 800367e:	0030      	movs	r0, r6
 8003680:	f7ff ffdd 	bl	800363e <__sfputc_r>
 8003684:	3401      	adds	r4, #1
 8003686:	1c43      	adds	r3, r0, #1
 8003688:	d1f3      	bne.n	8003672 <__sfputs_r+0xa>
 800368a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800368c <_vfiprintf_r>:
 800368c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800368e:	b0a1      	sub	sp, #132	@ 0x84
 8003690:	000f      	movs	r7, r1
 8003692:	0015      	movs	r5, r2
 8003694:	001e      	movs	r6, r3
 8003696:	9003      	str	r0, [sp, #12]
 8003698:	2800      	cmp	r0, #0
 800369a:	d004      	beq.n	80036a6 <_vfiprintf_r+0x1a>
 800369c:	6a03      	ldr	r3, [r0, #32]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <_vfiprintf_r+0x1a>
 80036a2:	f7ff fcc1 	bl	8003028 <__sinit>
 80036a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036a8:	07db      	lsls	r3, r3, #31
 80036aa:	d405      	bmi.n	80036b8 <_vfiprintf_r+0x2c>
 80036ac:	89bb      	ldrh	r3, [r7, #12]
 80036ae:	059b      	lsls	r3, r3, #22
 80036b0:	d402      	bmi.n	80036b8 <_vfiprintf_r+0x2c>
 80036b2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80036b4:	f7ff fdb9 	bl	800322a <__retarget_lock_acquire_recursive>
 80036b8:	89bb      	ldrh	r3, [r7, #12]
 80036ba:	071b      	lsls	r3, r3, #28
 80036bc:	d502      	bpl.n	80036c4 <_vfiprintf_r+0x38>
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d113      	bne.n	80036ec <_vfiprintf_r+0x60>
 80036c4:	0039      	movs	r1, r7
 80036c6:	9803      	ldr	r0, [sp, #12]
 80036c8:	f000 fabc 	bl	8003c44 <__swsetup_r>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d00d      	beq.n	80036ec <_vfiprintf_r+0x60>
 80036d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036d2:	07db      	lsls	r3, r3, #31
 80036d4:	d503      	bpl.n	80036de <_vfiprintf_r+0x52>
 80036d6:	2001      	movs	r0, #1
 80036d8:	4240      	negs	r0, r0
 80036da:	b021      	add	sp, #132	@ 0x84
 80036dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036de:	89bb      	ldrh	r3, [r7, #12]
 80036e0:	059b      	lsls	r3, r3, #22
 80036e2:	d4f8      	bmi.n	80036d6 <_vfiprintf_r+0x4a>
 80036e4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80036e6:	f7ff fda1 	bl	800322c <__retarget_lock_release_recursive>
 80036ea:	e7f4      	b.n	80036d6 <_vfiprintf_r+0x4a>
 80036ec:	2300      	movs	r3, #0
 80036ee:	ac08      	add	r4, sp, #32
 80036f0:	6163      	str	r3, [r4, #20]
 80036f2:	3320      	adds	r3, #32
 80036f4:	7663      	strb	r3, [r4, #25]
 80036f6:	3310      	adds	r3, #16
 80036f8:	76a3      	strb	r3, [r4, #26]
 80036fa:	9607      	str	r6, [sp, #28]
 80036fc:	002e      	movs	r6, r5
 80036fe:	7833      	ldrb	r3, [r6, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <_vfiprintf_r+0x7c>
 8003704:	2b25      	cmp	r3, #37	@ 0x25
 8003706:	d148      	bne.n	800379a <_vfiprintf_r+0x10e>
 8003708:	1b73      	subs	r3, r6, r5
 800370a:	9305      	str	r3, [sp, #20]
 800370c:	42ae      	cmp	r6, r5
 800370e:	d00b      	beq.n	8003728 <_vfiprintf_r+0x9c>
 8003710:	002a      	movs	r2, r5
 8003712:	0039      	movs	r1, r7
 8003714:	9803      	ldr	r0, [sp, #12]
 8003716:	f7ff ffa7 	bl	8003668 <__sfputs_r>
 800371a:	3001      	adds	r0, #1
 800371c:	d100      	bne.n	8003720 <_vfiprintf_r+0x94>
 800371e:	e0ae      	b.n	800387e <_vfiprintf_r+0x1f2>
 8003720:	6963      	ldr	r3, [r4, #20]
 8003722:	9a05      	ldr	r2, [sp, #20]
 8003724:	189b      	adds	r3, r3, r2
 8003726:	6163      	str	r3, [r4, #20]
 8003728:	7833      	ldrb	r3, [r6, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d100      	bne.n	8003730 <_vfiprintf_r+0xa4>
 800372e:	e0a6      	b.n	800387e <_vfiprintf_r+0x1f2>
 8003730:	2201      	movs	r2, #1
 8003732:	2300      	movs	r3, #0
 8003734:	4252      	negs	r2, r2
 8003736:	6062      	str	r2, [r4, #4]
 8003738:	a904      	add	r1, sp, #16
 800373a:	3254      	adds	r2, #84	@ 0x54
 800373c:	1852      	adds	r2, r2, r1
 800373e:	1c75      	adds	r5, r6, #1
 8003740:	6023      	str	r3, [r4, #0]
 8003742:	60e3      	str	r3, [r4, #12]
 8003744:	60a3      	str	r3, [r4, #8]
 8003746:	7013      	strb	r3, [r2, #0]
 8003748:	65a3      	str	r3, [r4, #88]	@ 0x58
 800374a:	4b59      	ldr	r3, [pc, #356]	@ (80038b0 <_vfiprintf_r+0x224>)
 800374c:	2205      	movs	r2, #5
 800374e:	0018      	movs	r0, r3
 8003750:	7829      	ldrb	r1, [r5, #0]
 8003752:	9305      	str	r3, [sp, #20]
 8003754:	f000 fb1e 	bl	8003d94 <memchr>
 8003758:	1c6e      	adds	r6, r5, #1
 800375a:	2800      	cmp	r0, #0
 800375c:	d11f      	bne.n	800379e <_vfiprintf_r+0x112>
 800375e:	6822      	ldr	r2, [r4, #0]
 8003760:	06d3      	lsls	r3, r2, #27
 8003762:	d504      	bpl.n	800376e <_vfiprintf_r+0xe2>
 8003764:	2353      	movs	r3, #83	@ 0x53
 8003766:	a904      	add	r1, sp, #16
 8003768:	185b      	adds	r3, r3, r1
 800376a:	2120      	movs	r1, #32
 800376c:	7019      	strb	r1, [r3, #0]
 800376e:	0713      	lsls	r3, r2, #28
 8003770:	d504      	bpl.n	800377c <_vfiprintf_r+0xf0>
 8003772:	2353      	movs	r3, #83	@ 0x53
 8003774:	a904      	add	r1, sp, #16
 8003776:	185b      	adds	r3, r3, r1
 8003778:	212b      	movs	r1, #43	@ 0x2b
 800377a:	7019      	strb	r1, [r3, #0]
 800377c:	782b      	ldrb	r3, [r5, #0]
 800377e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003780:	d016      	beq.n	80037b0 <_vfiprintf_r+0x124>
 8003782:	002e      	movs	r6, r5
 8003784:	2100      	movs	r1, #0
 8003786:	200a      	movs	r0, #10
 8003788:	68e3      	ldr	r3, [r4, #12]
 800378a:	7832      	ldrb	r2, [r6, #0]
 800378c:	1c75      	adds	r5, r6, #1
 800378e:	3a30      	subs	r2, #48	@ 0x30
 8003790:	2a09      	cmp	r2, #9
 8003792:	d950      	bls.n	8003836 <_vfiprintf_r+0x1aa>
 8003794:	2900      	cmp	r1, #0
 8003796:	d111      	bne.n	80037bc <_vfiprintf_r+0x130>
 8003798:	e017      	b.n	80037ca <_vfiprintf_r+0x13e>
 800379a:	3601      	adds	r6, #1
 800379c:	e7af      	b.n	80036fe <_vfiprintf_r+0x72>
 800379e:	9b05      	ldr	r3, [sp, #20]
 80037a0:	6822      	ldr	r2, [r4, #0]
 80037a2:	1ac0      	subs	r0, r0, r3
 80037a4:	2301      	movs	r3, #1
 80037a6:	4083      	lsls	r3, r0
 80037a8:	4313      	orrs	r3, r2
 80037aa:	0035      	movs	r5, r6
 80037ac:	6023      	str	r3, [r4, #0]
 80037ae:	e7cc      	b.n	800374a <_vfiprintf_r+0xbe>
 80037b0:	9b07      	ldr	r3, [sp, #28]
 80037b2:	1d19      	adds	r1, r3, #4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	9107      	str	r1, [sp, #28]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db01      	blt.n	80037c0 <_vfiprintf_r+0x134>
 80037bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80037be:	e004      	b.n	80037ca <_vfiprintf_r+0x13e>
 80037c0:	425b      	negs	r3, r3
 80037c2:	60e3      	str	r3, [r4, #12]
 80037c4:	2302      	movs	r3, #2
 80037c6:	4313      	orrs	r3, r2
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	7833      	ldrb	r3, [r6, #0]
 80037cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80037ce:	d10c      	bne.n	80037ea <_vfiprintf_r+0x15e>
 80037d0:	7873      	ldrb	r3, [r6, #1]
 80037d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80037d4:	d134      	bne.n	8003840 <_vfiprintf_r+0x1b4>
 80037d6:	9b07      	ldr	r3, [sp, #28]
 80037d8:	3602      	adds	r6, #2
 80037da:	1d1a      	adds	r2, r3, #4
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	9207      	str	r2, [sp, #28]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	da01      	bge.n	80037e8 <_vfiprintf_r+0x15c>
 80037e4:	2301      	movs	r3, #1
 80037e6:	425b      	negs	r3, r3
 80037e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80037ea:	4d32      	ldr	r5, [pc, #200]	@ (80038b4 <_vfiprintf_r+0x228>)
 80037ec:	2203      	movs	r2, #3
 80037ee:	0028      	movs	r0, r5
 80037f0:	7831      	ldrb	r1, [r6, #0]
 80037f2:	f000 facf 	bl	8003d94 <memchr>
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d006      	beq.n	8003808 <_vfiprintf_r+0x17c>
 80037fa:	2340      	movs	r3, #64	@ 0x40
 80037fc:	1b40      	subs	r0, r0, r5
 80037fe:	4083      	lsls	r3, r0
 8003800:	6822      	ldr	r2, [r4, #0]
 8003802:	3601      	adds	r6, #1
 8003804:	4313      	orrs	r3, r2
 8003806:	6023      	str	r3, [r4, #0]
 8003808:	7831      	ldrb	r1, [r6, #0]
 800380a:	2206      	movs	r2, #6
 800380c:	482a      	ldr	r0, [pc, #168]	@ (80038b8 <_vfiprintf_r+0x22c>)
 800380e:	1c75      	adds	r5, r6, #1
 8003810:	7621      	strb	r1, [r4, #24]
 8003812:	f000 fabf 	bl	8003d94 <memchr>
 8003816:	2800      	cmp	r0, #0
 8003818:	d040      	beq.n	800389c <_vfiprintf_r+0x210>
 800381a:	4b28      	ldr	r3, [pc, #160]	@ (80038bc <_vfiprintf_r+0x230>)
 800381c:	2b00      	cmp	r3, #0
 800381e:	d122      	bne.n	8003866 <_vfiprintf_r+0x1da>
 8003820:	2207      	movs	r2, #7
 8003822:	9b07      	ldr	r3, [sp, #28]
 8003824:	3307      	adds	r3, #7
 8003826:	4393      	bics	r3, r2
 8003828:	3308      	adds	r3, #8
 800382a:	9307      	str	r3, [sp, #28]
 800382c:	6963      	ldr	r3, [r4, #20]
 800382e:	9a04      	ldr	r2, [sp, #16]
 8003830:	189b      	adds	r3, r3, r2
 8003832:	6163      	str	r3, [r4, #20]
 8003834:	e762      	b.n	80036fc <_vfiprintf_r+0x70>
 8003836:	4343      	muls	r3, r0
 8003838:	002e      	movs	r6, r5
 800383a:	2101      	movs	r1, #1
 800383c:	189b      	adds	r3, r3, r2
 800383e:	e7a4      	b.n	800378a <_vfiprintf_r+0xfe>
 8003840:	2300      	movs	r3, #0
 8003842:	200a      	movs	r0, #10
 8003844:	0019      	movs	r1, r3
 8003846:	3601      	adds	r6, #1
 8003848:	6063      	str	r3, [r4, #4]
 800384a:	7832      	ldrb	r2, [r6, #0]
 800384c:	1c75      	adds	r5, r6, #1
 800384e:	3a30      	subs	r2, #48	@ 0x30
 8003850:	2a09      	cmp	r2, #9
 8003852:	d903      	bls.n	800385c <_vfiprintf_r+0x1d0>
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0c8      	beq.n	80037ea <_vfiprintf_r+0x15e>
 8003858:	9109      	str	r1, [sp, #36]	@ 0x24
 800385a:	e7c6      	b.n	80037ea <_vfiprintf_r+0x15e>
 800385c:	4341      	muls	r1, r0
 800385e:	002e      	movs	r6, r5
 8003860:	2301      	movs	r3, #1
 8003862:	1889      	adds	r1, r1, r2
 8003864:	e7f1      	b.n	800384a <_vfiprintf_r+0x1be>
 8003866:	aa07      	add	r2, sp, #28
 8003868:	9200      	str	r2, [sp, #0]
 800386a:	0021      	movs	r1, r4
 800386c:	003a      	movs	r2, r7
 800386e:	4b14      	ldr	r3, [pc, #80]	@ (80038c0 <_vfiprintf_r+0x234>)
 8003870:	9803      	ldr	r0, [sp, #12]
 8003872:	e000      	b.n	8003876 <_vfiprintf_r+0x1ea>
 8003874:	bf00      	nop
 8003876:	9004      	str	r0, [sp, #16]
 8003878:	9b04      	ldr	r3, [sp, #16]
 800387a:	3301      	adds	r3, #1
 800387c:	d1d6      	bne.n	800382c <_vfiprintf_r+0x1a0>
 800387e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003880:	07db      	lsls	r3, r3, #31
 8003882:	d405      	bmi.n	8003890 <_vfiprintf_r+0x204>
 8003884:	89bb      	ldrh	r3, [r7, #12]
 8003886:	059b      	lsls	r3, r3, #22
 8003888:	d402      	bmi.n	8003890 <_vfiprintf_r+0x204>
 800388a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800388c:	f7ff fcce 	bl	800322c <__retarget_lock_release_recursive>
 8003890:	89bb      	ldrh	r3, [r7, #12]
 8003892:	065b      	lsls	r3, r3, #25
 8003894:	d500      	bpl.n	8003898 <_vfiprintf_r+0x20c>
 8003896:	e71e      	b.n	80036d6 <_vfiprintf_r+0x4a>
 8003898:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800389a:	e71e      	b.n	80036da <_vfiprintf_r+0x4e>
 800389c:	aa07      	add	r2, sp, #28
 800389e:	9200      	str	r2, [sp, #0]
 80038a0:	0021      	movs	r1, r4
 80038a2:	003a      	movs	r2, r7
 80038a4:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <_vfiprintf_r+0x234>)
 80038a6:	9803      	ldr	r0, [sp, #12]
 80038a8:	f000 f87c 	bl	80039a4 <_printf_i>
 80038ac:	e7e3      	b.n	8003876 <_vfiprintf_r+0x1ea>
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	0800405f 	.word	0x0800405f
 80038b4:	08004065 	.word	0x08004065
 80038b8:	08004069 	.word	0x08004069
 80038bc:	00000000 	.word	0x00000000
 80038c0:	08003669 	.word	0x08003669

080038c4 <_printf_common>:
 80038c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038c6:	0016      	movs	r6, r2
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	688a      	ldr	r2, [r1, #8]
 80038cc:	690b      	ldr	r3, [r1, #16]
 80038ce:	000c      	movs	r4, r1
 80038d0:	9000      	str	r0, [sp, #0]
 80038d2:	4293      	cmp	r3, r2
 80038d4:	da00      	bge.n	80038d8 <_printf_common+0x14>
 80038d6:	0013      	movs	r3, r2
 80038d8:	0022      	movs	r2, r4
 80038da:	6033      	str	r3, [r6, #0]
 80038dc:	3243      	adds	r2, #67	@ 0x43
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	2a00      	cmp	r2, #0
 80038e2:	d001      	beq.n	80038e8 <_printf_common+0x24>
 80038e4:	3301      	adds	r3, #1
 80038e6:	6033      	str	r3, [r6, #0]
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	069b      	lsls	r3, r3, #26
 80038ec:	d502      	bpl.n	80038f4 <_printf_common+0x30>
 80038ee:	6833      	ldr	r3, [r6, #0]
 80038f0:	3302      	adds	r3, #2
 80038f2:	6033      	str	r3, [r6, #0]
 80038f4:	6822      	ldr	r2, [r4, #0]
 80038f6:	2306      	movs	r3, #6
 80038f8:	0015      	movs	r5, r2
 80038fa:	401d      	ands	r5, r3
 80038fc:	421a      	tst	r2, r3
 80038fe:	d027      	beq.n	8003950 <_printf_common+0x8c>
 8003900:	0023      	movs	r3, r4
 8003902:	3343      	adds	r3, #67	@ 0x43
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	1e5a      	subs	r2, r3, #1
 8003908:	4193      	sbcs	r3, r2
 800390a:	6822      	ldr	r2, [r4, #0]
 800390c:	0692      	lsls	r2, r2, #26
 800390e:	d430      	bmi.n	8003972 <_printf_common+0xae>
 8003910:	0022      	movs	r2, r4
 8003912:	9901      	ldr	r1, [sp, #4]
 8003914:	9800      	ldr	r0, [sp, #0]
 8003916:	9d08      	ldr	r5, [sp, #32]
 8003918:	3243      	adds	r2, #67	@ 0x43
 800391a:	47a8      	blx	r5
 800391c:	3001      	adds	r0, #1
 800391e:	d025      	beq.n	800396c <_printf_common+0xa8>
 8003920:	2206      	movs	r2, #6
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	2500      	movs	r5, #0
 8003926:	4013      	ands	r3, r2
 8003928:	2b04      	cmp	r3, #4
 800392a:	d105      	bne.n	8003938 <_printf_common+0x74>
 800392c:	6833      	ldr	r3, [r6, #0]
 800392e:	68e5      	ldr	r5, [r4, #12]
 8003930:	1aed      	subs	r5, r5, r3
 8003932:	43eb      	mvns	r3, r5
 8003934:	17db      	asrs	r3, r3, #31
 8003936:	401d      	ands	r5, r3
 8003938:	68a3      	ldr	r3, [r4, #8]
 800393a:	6922      	ldr	r2, [r4, #16]
 800393c:	4293      	cmp	r3, r2
 800393e:	dd01      	ble.n	8003944 <_printf_common+0x80>
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	18ed      	adds	r5, r5, r3
 8003944:	2600      	movs	r6, #0
 8003946:	42b5      	cmp	r5, r6
 8003948:	d120      	bne.n	800398c <_printf_common+0xc8>
 800394a:	2000      	movs	r0, #0
 800394c:	e010      	b.n	8003970 <_printf_common+0xac>
 800394e:	3501      	adds	r5, #1
 8003950:	68e3      	ldr	r3, [r4, #12]
 8003952:	6832      	ldr	r2, [r6, #0]
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	42ab      	cmp	r3, r5
 8003958:	ddd2      	ble.n	8003900 <_printf_common+0x3c>
 800395a:	0022      	movs	r2, r4
 800395c:	2301      	movs	r3, #1
 800395e:	9901      	ldr	r1, [sp, #4]
 8003960:	9800      	ldr	r0, [sp, #0]
 8003962:	9f08      	ldr	r7, [sp, #32]
 8003964:	3219      	adds	r2, #25
 8003966:	47b8      	blx	r7
 8003968:	3001      	adds	r0, #1
 800396a:	d1f0      	bne.n	800394e <_printf_common+0x8a>
 800396c:	2001      	movs	r0, #1
 800396e:	4240      	negs	r0, r0
 8003970:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003972:	2030      	movs	r0, #48	@ 0x30
 8003974:	18e1      	adds	r1, r4, r3
 8003976:	3143      	adds	r1, #67	@ 0x43
 8003978:	7008      	strb	r0, [r1, #0]
 800397a:	0021      	movs	r1, r4
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	3145      	adds	r1, #69	@ 0x45
 8003980:	7809      	ldrb	r1, [r1, #0]
 8003982:	18a2      	adds	r2, r4, r2
 8003984:	3243      	adds	r2, #67	@ 0x43
 8003986:	3302      	adds	r3, #2
 8003988:	7011      	strb	r1, [r2, #0]
 800398a:	e7c1      	b.n	8003910 <_printf_common+0x4c>
 800398c:	0022      	movs	r2, r4
 800398e:	2301      	movs	r3, #1
 8003990:	9901      	ldr	r1, [sp, #4]
 8003992:	9800      	ldr	r0, [sp, #0]
 8003994:	9f08      	ldr	r7, [sp, #32]
 8003996:	321a      	adds	r2, #26
 8003998:	47b8      	blx	r7
 800399a:	3001      	adds	r0, #1
 800399c:	d0e6      	beq.n	800396c <_printf_common+0xa8>
 800399e:	3601      	adds	r6, #1
 80039a0:	e7d1      	b.n	8003946 <_printf_common+0x82>
	...

080039a4 <_printf_i>:
 80039a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a6:	b08b      	sub	sp, #44	@ 0x2c
 80039a8:	9206      	str	r2, [sp, #24]
 80039aa:	000a      	movs	r2, r1
 80039ac:	3243      	adds	r2, #67	@ 0x43
 80039ae:	9307      	str	r3, [sp, #28]
 80039b0:	9005      	str	r0, [sp, #20]
 80039b2:	9203      	str	r2, [sp, #12]
 80039b4:	7e0a      	ldrb	r2, [r1, #24]
 80039b6:	000c      	movs	r4, r1
 80039b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80039ba:	2a78      	cmp	r2, #120	@ 0x78
 80039bc:	d809      	bhi.n	80039d2 <_printf_i+0x2e>
 80039be:	2a62      	cmp	r2, #98	@ 0x62
 80039c0:	d80b      	bhi.n	80039da <_printf_i+0x36>
 80039c2:	2a00      	cmp	r2, #0
 80039c4:	d100      	bne.n	80039c8 <_printf_i+0x24>
 80039c6:	e0bc      	b.n	8003b42 <_printf_i+0x19e>
 80039c8:	497b      	ldr	r1, [pc, #492]	@ (8003bb8 <_printf_i+0x214>)
 80039ca:	9104      	str	r1, [sp, #16]
 80039cc:	2a58      	cmp	r2, #88	@ 0x58
 80039ce:	d100      	bne.n	80039d2 <_printf_i+0x2e>
 80039d0:	e090      	b.n	8003af4 <_printf_i+0x150>
 80039d2:	0025      	movs	r5, r4
 80039d4:	3542      	adds	r5, #66	@ 0x42
 80039d6:	702a      	strb	r2, [r5, #0]
 80039d8:	e022      	b.n	8003a20 <_printf_i+0x7c>
 80039da:	0010      	movs	r0, r2
 80039dc:	3863      	subs	r0, #99	@ 0x63
 80039de:	2815      	cmp	r0, #21
 80039e0:	d8f7      	bhi.n	80039d2 <_printf_i+0x2e>
 80039e2:	f7fc fb8f 	bl	8000104 <__gnu_thumb1_case_shi>
 80039e6:	0016      	.short	0x0016
 80039e8:	fff6001f 	.word	0xfff6001f
 80039ec:	fff6fff6 	.word	0xfff6fff6
 80039f0:	001ffff6 	.word	0x001ffff6
 80039f4:	fff6fff6 	.word	0xfff6fff6
 80039f8:	fff6fff6 	.word	0xfff6fff6
 80039fc:	003600a1 	.word	0x003600a1
 8003a00:	fff60080 	.word	0xfff60080
 8003a04:	00b2fff6 	.word	0x00b2fff6
 8003a08:	0036fff6 	.word	0x0036fff6
 8003a0c:	fff6fff6 	.word	0xfff6fff6
 8003a10:	0084      	.short	0x0084
 8003a12:	0025      	movs	r5, r4
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	3542      	adds	r5, #66	@ 0x42
 8003a18:	1d11      	adds	r1, r2, #4
 8003a1a:	6019      	str	r1, [r3, #0]
 8003a1c:	6813      	ldr	r3, [r2, #0]
 8003a1e:	702b      	strb	r3, [r5, #0]
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0a0      	b.n	8003b66 <_printf_i+0x1c2>
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	6809      	ldr	r1, [r1, #0]
 8003a28:	1d02      	adds	r2, r0, #4
 8003a2a:	060d      	lsls	r5, r1, #24
 8003a2c:	d50b      	bpl.n	8003a46 <_printf_i+0xa2>
 8003a2e:	6806      	ldr	r6, [r0, #0]
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	2e00      	cmp	r6, #0
 8003a34:	da03      	bge.n	8003a3e <_printf_i+0x9a>
 8003a36:	232d      	movs	r3, #45	@ 0x2d
 8003a38:	9a03      	ldr	r2, [sp, #12]
 8003a3a:	4276      	negs	r6, r6
 8003a3c:	7013      	strb	r3, [r2, #0]
 8003a3e:	4b5e      	ldr	r3, [pc, #376]	@ (8003bb8 <_printf_i+0x214>)
 8003a40:	270a      	movs	r7, #10
 8003a42:	9304      	str	r3, [sp, #16]
 8003a44:	e018      	b.n	8003a78 <_printf_i+0xd4>
 8003a46:	6806      	ldr	r6, [r0, #0]
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	0649      	lsls	r1, r1, #25
 8003a4c:	d5f1      	bpl.n	8003a32 <_printf_i+0x8e>
 8003a4e:	b236      	sxth	r6, r6
 8003a50:	e7ef      	b.n	8003a32 <_printf_i+0x8e>
 8003a52:	6808      	ldr	r0, [r1, #0]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	c940      	ldmia	r1!, {r6}
 8003a58:	0605      	lsls	r5, r0, #24
 8003a5a:	d402      	bmi.n	8003a62 <_printf_i+0xbe>
 8003a5c:	0640      	lsls	r0, r0, #25
 8003a5e:	d500      	bpl.n	8003a62 <_printf_i+0xbe>
 8003a60:	b2b6      	uxth	r6, r6
 8003a62:	6019      	str	r1, [r3, #0]
 8003a64:	4b54      	ldr	r3, [pc, #336]	@ (8003bb8 <_printf_i+0x214>)
 8003a66:	270a      	movs	r7, #10
 8003a68:	9304      	str	r3, [sp, #16]
 8003a6a:	2a6f      	cmp	r2, #111	@ 0x6f
 8003a6c:	d100      	bne.n	8003a70 <_printf_i+0xcc>
 8003a6e:	3f02      	subs	r7, #2
 8003a70:	0023      	movs	r3, r4
 8003a72:	2200      	movs	r2, #0
 8003a74:	3343      	adds	r3, #67	@ 0x43
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	6863      	ldr	r3, [r4, #4]
 8003a7a:	60a3      	str	r3, [r4, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	db03      	blt.n	8003a88 <_printf_i+0xe4>
 8003a80:	2104      	movs	r1, #4
 8003a82:	6822      	ldr	r2, [r4, #0]
 8003a84:	438a      	bics	r2, r1
 8003a86:	6022      	str	r2, [r4, #0]
 8003a88:	2e00      	cmp	r6, #0
 8003a8a:	d102      	bne.n	8003a92 <_printf_i+0xee>
 8003a8c:	9d03      	ldr	r5, [sp, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00c      	beq.n	8003aac <_printf_i+0x108>
 8003a92:	9d03      	ldr	r5, [sp, #12]
 8003a94:	0030      	movs	r0, r6
 8003a96:	0039      	movs	r1, r7
 8003a98:	f7fc fbc4 	bl	8000224 <__aeabi_uidivmod>
 8003a9c:	9b04      	ldr	r3, [sp, #16]
 8003a9e:	3d01      	subs	r5, #1
 8003aa0:	5c5b      	ldrb	r3, [r3, r1]
 8003aa2:	702b      	strb	r3, [r5, #0]
 8003aa4:	0033      	movs	r3, r6
 8003aa6:	0006      	movs	r6, r0
 8003aa8:	429f      	cmp	r7, r3
 8003aaa:	d9f3      	bls.n	8003a94 <_printf_i+0xf0>
 8003aac:	2f08      	cmp	r7, #8
 8003aae:	d109      	bne.n	8003ac4 <_printf_i+0x120>
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	07db      	lsls	r3, r3, #31
 8003ab4:	d506      	bpl.n	8003ac4 <_printf_i+0x120>
 8003ab6:	6862      	ldr	r2, [r4, #4]
 8003ab8:	6923      	ldr	r3, [r4, #16]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	dc02      	bgt.n	8003ac4 <_printf_i+0x120>
 8003abe:	2330      	movs	r3, #48	@ 0x30
 8003ac0:	3d01      	subs	r5, #1
 8003ac2:	702b      	strb	r3, [r5, #0]
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	1b5b      	subs	r3, r3, r5
 8003ac8:	6123      	str	r3, [r4, #16]
 8003aca:	9b07      	ldr	r3, [sp, #28]
 8003acc:	0021      	movs	r1, r4
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	9805      	ldr	r0, [sp, #20]
 8003ad2:	9b06      	ldr	r3, [sp, #24]
 8003ad4:	aa09      	add	r2, sp, #36	@ 0x24
 8003ad6:	f7ff fef5 	bl	80038c4 <_printf_common>
 8003ada:	3001      	adds	r0, #1
 8003adc:	d148      	bne.n	8003b70 <_printf_i+0x1cc>
 8003ade:	2001      	movs	r0, #1
 8003ae0:	4240      	negs	r0, r0
 8003ae2:	b00b      	add	sp, #44	@ 0x2c
 8003ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	6809      	ldr	r1, [r1, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	6022      	str	r2, [r4, #0]
 8003aee:	2278      	movs	r2, #120	@ 0x78
 8003af0:	4932      	ldr	r1, [pc, #200]	@ (8003bbc <_printf_i+0x218>)
 8003af2:	9104      	str	r1, [sp, #16]
 8003af4:	0021      	movs	r1, r4
 8003af6:	3145      	adds	r1, #69	@ 0x45
 8003af8:	700a      	strb	r2, [r1, #0]
 8003afa:	6819      	ldr	r1, [r3, #0]
 8003afc:	6822      	ldr	r2, [r4, #0]
 8003afe:	c940      	ldmia	r1!, {r6}
 8003b00:	0610      	lsls	r0, r2, #24
 8003b02:	d402      	bmi.n	8003b0a <_printf_i+0x166>
 8003b04:	0650      	lsls	r0, r2, #25
 8003b06:	d500      	bpl.n	8003b0a <_printf_i+0x166>
 8003b08:	b2b6      	uxth	r6, r6
 8003b0a:	6019      	str	r1, [r3, #0]
 8003b0c:	07d3      	lsls	r3, r2, #31
 8003b0e:	d502      	bpl.n	8003b16 <_printf_i+0x172>
 8003b10:	2320      	movs	r3, #32
 8003b12:	4313      	orrs	r3, r2
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	2e00      	cmp	r6, #0
 8003b18:	d001      	beq.n	8003b1e <_printf_i+0x17a>
 8003b1a:	2710      	movs	r7, #16
 8003b1c:	e7a8      	b.n	8003a70 <_printf_i+0xcc>
 8003b1e:	2220      	movs	r2, #32
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	4393      	bics	r3, r2
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	e7f8      	b.n	8003b1a <_printf_i+0x176>
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	680d      	ldr	r5, [r1, #0]
 8003b2c:	1d10      	adds	r0, r2, #4
 8003b2e:	6949      	ldr	r1, [r1, #20]
 8003b30:	6018      	str	r0, [r3, #0]
 8003b32:	6813      	ldr	r3, [r2, #0]
 8003b34:	062e      	lsls	r6, r5, #24
 8003b36:	d501      	bpl.n	8003b3c <_printf_i+0x198>
 8003b38:	6019      	str	r1, [r3, #0]
 8003b3a:	e002      	b.n	8003b42 <_printf_i+0x19e>
 8003b3c:	066d      	lsls	r5, r5, #25
 8003b3e:	d5fb      	bpl.n	8003b38 <_printf_i+0x194>
 8003b40:	8019      	strh	r1, [r3, #0]
 8003b42:	2300      	movs	r3, #0
 8003b44:	9d03      	ldr	r5, [sp, #12]
 8003b46:	6123      	str	r3, [r4, #16]
 8003b48:	e7bf      	b.n	8003aca <_printf_i+0x126>
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	1d11      	adds	r1, r2, #4
 8003b4e:	6019      	str	r1, [r3, #0]
 8003b50:	6815      	ldr	r5, [r2, #0]
 8003b52:	2100      	movs	r1, #0
 8003b54:	0028      	movs	r0, r5
 8003b56:	6862      	ldr	r2, [r4, #4]
 8003b58:	f000 f91c 	bl	8003d94 <memchr>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d001      	beq.n	8003b64 <_printf_i+0x1c0>
 8003b60:	1b40      	subs	r0, r0, r5
 8003b62:	6060      	str	r0, [r4, #4]
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	6123      	str	r3, [r4, #16]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9a03      	ldr	r2, [sp, #12]
 8003b6c:	7013      	strb	r3, [r2, #0]
 8003b6e:	e7ac      	b.n	8003aca <_printf_i+0x126>
 8003b70:	002a      	movs	r2, r5
 8003b72:	6923      	ldr	r3, [r4, #16]
 8003b74:	9906      	ldr	r1, [sp, #24]
 8003b76:	9805      	ldr	r0, [sp, #20]
 8003b78:	9d07      	ldr	r5, [sp, #28]
 8003b7a:	47a8      	blx	r5
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d0ae      	beq.n	8003ade <_printf_i+0x13a>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	079b      	lsls	r3, r3, #30
 8003b84:	d415      	bmi.n	8003bb2 <_printf_i+0x20e>
 8003b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b88:	68e0      	ldr	r0, [r4, #12]
 8003b8a:	4298      	cmp	r0, r3
 8003b8c:	daa9      	bge.n	8003ae2 <_printf_i+0x13e>
 8003b8e:	0018      	movs	r0, r3
 8003b90:	e7a7      	b.n	8003ae2 <_printf_i+0x13e>
 8003b92:	0022      	movs	r2, r4
 8003b94:	2301      	movs	r3, #1
 8003b96:	9906      	ldr	r1, [sp, #24]
 8003b98:	9805      	ldr	r0, [sp, #20]
 8003b9a:	9e07      	ldr	r6, [sp, #28]
 8003b9c:	3219      	adds	r2, #25
 8003b9e:	47b0      	blx	r6
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d09c      	beq.n	8003ade <_printf_i+0x13a>
 8003ba4:	3501      	adds	r5, #1
 8003ba6:	68e3      	ldr	r3, [r4, #12]
 8003ba8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	42ab      	cmp	r3, r5
 8003bae:	dcf0      	bgt.n	8003b92 <_printf_i+0x1ee>
 8003bb0:	e7e9      	b.n	8003b86 <_printf_i+0x1e2>
 8003bb2:	2500      	movs	r5, #0
 8003bb4:	e7f7      	b.n	8003ba6 <_printf_i+0x202>
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	08004070 	.word	0x08004070
 8003bbc:	08004081 	.word	0x08004081

08003bc0 <__swbuf_r>:
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	0006      	movs	r6, r0
 8003bc4:	000d      	movs	r5, r1
 8003bc6:	0014      	movs	r4, r2
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d004      	beq.n	8003bd6 <__swbuf_r+0x16>
 8003bcc:	6a03      	ldr	r3, [r0, #32]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <__swbuf_r+0x16>
 8003bd2:	f7ff fa29 	bl	8003028 <__sinit>
 8003bd6:	69a3      	ldr	r3, [r4, #24]
 8003bd8:	60a3      	str	r3, [r4, #8]
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	071b      	lsls	r3, r3, #28
 8003bde:	d502      	bpl.n	8003be6 <__swbuf_r+0x26>
 8003be0:	6923      	ldr	r3, [r4, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <__swbuf_r+0x3a>
 8003be6:	0021      	movs	r1, r4
 8003be8:	0030      	movs	r0, r6
 8003bea:	f000 f82b 	bl	8003c44 <__swsetup_r>
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d003      	beq.n	8003bfa <__swbuf_r+0x3a>
 8003bf2:	2501      	movs	r5, #1
 8003bf4:	426d      	negs	r5, r5
 8003bf6:	0028      	movs	r0, r5
 8003bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bfa:	6923      	ldr	r3, [r4, #16]
 8003bfc:	6820      	ldr	r0, [r4, #0]
 8003bfe:	b2ef      	uxtb	r7, r5
 8003c00:	1ac0      	subs	r0, r0, r3
 8003c02:	6963      	ldr	r3, [r4, #20]
 8003c04:	b2ed      	uxtb	r5, r5
 8003c06:	4283      	cmp	r3, r0
 8003c08:	dc05      	bgt.n	8003c16 <__swbuf_r+0x56>
 8003c0a:	0021      	movs	r1, r4
 8003c0c:	0030      	movs	r0, r6
 8003c0e:	f7ff fcc1 	bl	8003594 <_fflush_r>
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d1ed      	bne.n	8003bf2 <__swbuf_r+0x32>
 8003c16:	68a3      	ldr	r3, [r4, #8]
 8003c18:	3001      	adds	r0, #1
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	60a3      	str	r3, [r4, #8]
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	6022      	str	r2, [r4, #0]
 8003c24:	701f      	strb	r7, [r3, #0]
 8003c26:	6963      	ldr	r3, [r4, #20]
 8003c28:	4283      	cmp	r3, r0
 8003c2a:	d004      	beq.n	8003c36 <__swbuf_r+0x76>
 8003c2c:	89a3      	ldrh	r3, [r4, #12]
 8003c2e:	07db      	lsls	r3, r3, #31
 8003c30:	d5e1      	bpl.n	8003bf6 <__swbuf_r+0x36>
 8003c32:	2d0a      	cmp	r5, #10
 8003c34:	d1df      	bne.n	8003bf6 <__swbuf_r+0x36>
 8003c36:	0021      	movs	r1, r4
 8003c38:	0030      	movs	r0, r6
 8003c3a:	f7ff fcab 	bl	8003594 <_fflush_r>
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d0d9      	beq.n	8003bf6 <__swbuf_r+0x36>
 8003c42:	e7d6      	b.n	8003bf2 <__swbuf_r+0x32>

08003c44 <__swsetup_r>:
 8003c44:	4b2d      	ldr	r3, [pc, #180]	@ (8003cfc <__swsetup_r+0xb8>)
 8003c46:	b570      	push	{r4, r5, r6, lr}
 8003c48:	0005      	movs	r5, r0
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	000c      	movs	r4, r1
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d004      	beq.n	8003c5c <__swsetup_r+0x18>
 8003c52:	6a03      	ldr	r3, [r0, #32]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <__swsetup_r+0x18>
 8003c58:	f7ff f9e6 	bl	8003028 <__sinit>
 8003c5c:	230c      	movs	r3, #12
 8003c5e:	5ee2      	ldrsh	r2, [r4, r3]
 8003c60:	0713      	lsls	r3, r2, #28
 8003c62:	d423      	bmi.n	8003cac <__swsetup_r+0x68>
 8003c64:	06d3      	lsls	r3, r2, #27
 8003c66:	d407      	bmi.n	8003c78 <__swsetup_r+0x34>
 8003c68:	2309      	movs	r3, #9
 8003c6a:	602b      	str	r3, [r5, #0]
 8003c6c:	2340      	movs	r3, #64	@ 0x40
 8003c6e:	2001      	movs	r0, #1
 8003c70:	4313      	orrs	r3, r2
 8003c72:	81a3      	strh	r3, [r4, #12]
 8003c74:	4240      	negs	r0, r0
 8003c76:	e03a      	b.n	8003cee <__swsetup_r+0xaa>
 8003c78:	0752      	lsls	r2, r2, #29
 8003c7a:	d513      	bpl.n	8003ca4 <__swsetup_r+0x60>
 8003c7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c7e:	2900      	cmp	r1, #0
 8003c80:	d008      	beq.n	8003c94 <__swsetup_r+0x50>
 8003c82:	0023      	movs	r3, r4
 8003c84:	3344      	adds	r3, #68	@ 0x44
 8003c86:	4299      	cmp	r1, r3
 8003c88:	d002      	beq.n	8003c90 <__swsetup_r+0x4c>
 8003c8a:	0028      	movs	r0, r5
 8003c8c:	f7ff faf6 	bl	800327c <_free_r>
 8003c90:	2300      	movs	r3, #0
 8003c92:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c94:	2224      	movs	r2, #36	@ 0x24
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	4393      	bics	r3, r2
 8003c9a:	81a3      	strh	r3, [r4, #12]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	6063      	str	r3, [r4, #4]
 8003ca0:	6923      	ldr	r3, [r4, #16]
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	89a2      	ldrh	r2, [r4, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	81a3      	strh	r3, [r4, #12]
 8003cac:	6923      	ldr	r3, [r4, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10b      	bne.n	8003cca <__swsetup_r+0x86>
 8003cb2:	21a0      	movs	r1, #160	@ 0xa0
 8003cb4:	2280      	movs	r2, #128	@ 0x80
 8003cb6:	89a3      	ldrh	r3, [r4, #12]
 8003cb8:	0089      	lsls	r1, r1, #2
 8003cba:	0092      	lsls	r2, r2, #2
 8003cbc:	400b      	ands	r3, r1
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d003      	beq.n	8003cca <__swsetup_r+0x86>
 8003cc2:	0021      	movs	r1, r4
 8003cc4:	0028      	movs	r0, r5
 8003cc6:	f000 f89b 	bl	8003e00 <__smakebuf_r>
 8003cca:	230c      	movs	r3, #12
 8003ccc:	5ee2      	ldrsh	r2, [r4, r3]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	0013      	movs	r3, r2
 8003cd2:	400b      	ands	r3, r1
 8003cd4:	420a      	tst	r2, r1
 8003cd6:	d00b      	beq.n	8003cf0 <__swsetup_r+0xac>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60a3      	str	r3, [r4, #8]
 8003cdc:	6963      	ldr	r3, [r4, #20]
 8003cde:	425b      	negs	r3, r3
 8003ce0:	61a3      	str	r3, [r4, #24]
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	6923      	ldr	r3, [r4, #16]
 8003ce6:	4283      	cmp	r3, r0
 8003ce8:	d101      	bne.n	8003cee <__swsetup_r+0xaa>
 8003cea:	0613      	lsls	r3, r2, #24
 8003cec:	d4be      	bmi.n	8003c6c <__swsetup_r+0x28>
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
 8003cf0:	0791      	lsls	r1, r2, #30
 8003cf2:	d400      	bmi.n	8003cf6 <__swsetup_r+0xb2>
 8003cf4:	6963      	ldr	r3, [r4, #20]
 8003cf6:	60a3      	str	r3, [r4, #8]
 8003cf8:	e7f3      	b.n	8003ce2 <__swsetup_r+0x9e>
 8003cfa:	46c0      	nop			@ (mov r8, r8)
 8003cfc:	20000018 	.word	0x20000018

08003d00 <_raise_r>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	0004      	movs	r4, r0
 8003d04:	000d      	movs	r5, r1
 8003d06:	291f      	cmp	r1, #31
 8003d08:	d904      	bls.n	8003d14 <_raise_r+0x14>
 8003d0a:	2316      	movs	r3, #22
 8003d0c:	6003      	str	r3, [r0, #0]
 8003d0e:	2001      	movs	r0, #1
 8003d10:	4240      	negs	r0, r0
 8003d12:	bd70      	pop	{r4, r5, r6, pc}
 8003d14:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <_raise_r+0x24>
 8003d1a:	008a      	lsls	r2, r1, #2
 8003d1c:	189b      	adds	r3, r3, r2
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	2a00      	cmp	r2, #0
 8003d22:	d108      	bne.n	8003d36 <_raise_r+0x36>
 8003d24:	0020      	movs	r0, r4
 8003d26:	f000 f831 	bl	8003d8c <_getpid_r>
 8003d2a:	002a      	movs	r2, r5
 8003d2c:	0001      	movs	r1, r0
 8003d2e:	0020      	movs	r0, r4
 8003d30:	f000 f81a 	bl	8003d68 <_kill_r>
 8003d34:	e7ed      	b.n	8003d12 <_raise_r+0x12>
 8003d36:	2a01      	cmp	r2, #1
 8003d38:	d009      	beq.n	8003d4e <_raise_r+0x4e>
 8003d3a:	1c51      	adds	r1, r2, #1
 8003d3c:	d103      	bne.n	8003d46 <_raise_r+0x46>
 8003d3e:	2316      	movs	r3, #22
 8003d40:	6003      	str	r3, [r0, #0]
 8003d42:	2001      	movs	r0, #1
 8003d44:	e7e5      	b.n	8003d12 <_raise_r+0x12>
 8003d46:	2100      	movs	r1, #0
 8003d48:	0028      	movs	r0, r5
 8003d4a:	6019      	str	r1, [r3, #0]
 8003d4c:	4790      	blx	r2
 8003d4e:	2000      	movs	r0, #0
 8003d50:	e7df      	b.n	8003d12 <_raise_r+0x12>
	...

08003d54 <raise>:
 8003d54:	b510      	push	{r4, lr}
 8003d56:	4b03      	ldr	r3, [pc, #12]	@ (8003d64 <raise+0x10>)
 8003d58:	0001      	movs	r1, r0
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	f7ff ffd0 	bl	8003d00 <_raise_r>
 8003d60:	bd10      	pop	{r4, pc}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	20000018 	.word	0x20000018

08003d68 <_kill_r>:
 8003d68:	2300      	movs	r3, #0
 8003d6a:	b570      	push	{r4, r5, r6, lr}
 8003d6c:	4d06      	ldr	r5, [pc, #24]	@ (8003d88 <_kill_r+0x20>)
 8003d6e:	0004      	movs	r4, r0
 8003d70:	0008      	movs	r0, r1
 8003d72:	0011      	movs	r1, r2
 8003d74:	602b      	str	r3, [r5, #0]
 8003d76:	f7fd f8db 	bl	8000f30 <_kill>
 8003d7a:	1c43      	adds	r3, r0, #1
 8003d7c:	d103      	bne.n	8003d86 <_kill_r+0x1e>
 8003d7e:	682b      	ldr	r3, [r5, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d000      	beq.n	8003d86 <_kill_r+0x1e>
 8003d84:	6023      	str	r3, [r4, #0]
 8003d86:	bd70      	pop	{r4, r5, r6, pc}
 8003d88:	200002a4 	.word	0x200002a4

08003d8c <_getpid_r>:
 8003d8c:	b510      	push	{r4, lr}
 8003d8e:	f7fd f8c9 	bl	8000f24 <_getpid>
 8003d92:	bd10      	pop	{r4, pc}

08003d94 <memchr>:
 8003d94:	b2c9      	uxtb	r1, r1
 8003d96:	1882      	adds	r2, r0, r2
 8003d98:	4290      	cmp	r0, r2
 8003d9a:	d101      	bne.n	8003da0 <memchr+0xc>
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	4770      	bx	lr
 8003da0:	7803      	ldrb	r3, [r0, #0]
 8003da2:	428b      	cmp	r3, r1
 8003da4:	d0fb      	beq.n	8003d9e <memchr+0xa>
 8003da6:	3001      	adds	r0, #1
 8003da8:	e7f6      	b.n	8003d98 <memchr+0x4>
	...

08003dac <__swhatbuf_r>:
 8003dac:	b570      	push	{r4, r5, r6, lr}
 8003dae:	000e      	movs	r6, r1
 8003db0:	001d      	movs	r5, r3
 8003db2:	230e      	movs	r3, #14
 8003db4:	5ec9      	ldrsh	r1, [r1, r3]
 8003db6:	0014      	movs	r4, r2
 8003db8:	b096      	sub	sp, #88	@ 0x58
 8003dba:	2900      	cmp	r1, #0
 8003dbc:	da0c      	bge.n	8003dd8 <__swhatbuf_r+0x2c>
 8003dbe:	89b2      	ldrh	r2, [r6, #12]
 8003dc0:	2380      	movs	r3, #128	@ 0x80
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	4019      	ands	r1, r3
 8003dc6:	421a      	tst	r2, r3
 8003dc8:	d114      	bne.n	8003df4 <__swhatbuf_r+0x48>
 8003dca:	2380      	movs	r3, #128	@ 0x80
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	2000      	movs	r0, #0
 8003dd0:	6029      	str	r1, [r5, #0]
 8003dd2:	6023      	str	r3, [r4, #0]
 8003dd4:	b016      	add	sp, #88	@ 0x58
 8003dd6:	bd70      	pop	{r4, r5, r6, pc}
 8003dd8:	466a      	mov	r2, sp
 8003dda:	f000 f853 	bl	8003e84 <_fstat_r>
 8003dde:	2800      	cmp	r0, #0
 8003de0:	dbed      	blt.n	8003dbe <__swhatbuf_r+0x12>
 8003de2:	23f0      	movs	r3, #240	@ 0xf0
 8003de4:	9901      	ldr	r1, [sp, #4]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	4019      	ands	r1, r3
 8003dea:	4b04      	ldr	r3, [pc, #16]	@ (8003dfc <__swhatbuf_r+0x50>)
 8003dec:	18c9      	adds	r1, r1, r3
 8003dee:	424b      	negs	r3, r1
 8003df0:	4159      	adcs	r1, r3
 8003df2:	e7ea      	b.n	8003dca <__swhatbuf_r+0x1e>
 8003df4:	2100      	movs	r1, #0
 8003df6:	2340      	movs	r3, #64	@ 0x40
 8003df8:	e7e9      	b.n	8003dce <__swhatbuf_r+0x22>
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	ffffe000 	.word	0xffffe000

08003e00 <__smakebuf_r>:
 8003e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e02:	2602      	movs	r6, #2
 8003e04:	898b      	ldrh	r3, [r1, #12]
 8003e06:	0005      	movs	r5, r0
 8003e08:	000c      	movs	r4, r1
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	4233      	tst	r3, r6
 8003e0e:	d007      	beq.n	8003e20 <__smakebuf_r+0x20>
 8003e10:	0023      	movs	r3, r4
 8003e12:	3347      	adds	r3, #71	@ 0x47
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	6123      	str	r3, [r4, #16]
 8003e18:	2301      	movs	r3, #1
 8003e1a:	6163      	str	r3, [r4, #20]
 8003e1c:	b005      	add	sp, #20
 8003e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e20:	ab03      	add	r3, sp, #12
 8003e22:	aa02      	add	r2, sp, #8
 8003e24:	f7ff ffc2 	bl	8003dac <__swhatbuf_r>
 8003e28:	9f02      	ldr	r7, [sp, #8]
 8003e2a:	9001      	str	r0, [sp, #4]
 8003e2c:	0039      	movs	r1, r7
 8003e2e:	0028      	movs	r0, r5
 8003e30:	f7ff fa9a 	bl	8003368 <_malloc_r>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d108      	bne.n	8003e4a <__smakebuf_r+0x4a>
 8003e38:	220c      	movs	r2, #12
 8003e3a:	5ea3      	ldrsh	r3, [r4, r2]
 8003e3c:	059a      	lsls	r2, r3, #22
 8003e3e:	d4ed      	bmi.n	8003e1c <__smakebuf_r+0x1c>
 8003e40:	2203      	movs	r2, #3
 8003e42:	4393      	bics	r3, r2
 8003e44:	431e      	orrs	r6, r3
 8003e46:	81a6      	strh	r6, [r4, #12]
 8003e48:	e7e2      	b.n	8003e10 <__smakebuf_r+0x10>
 8003e4a:	2380      	movs	r3, #128	@ 0x80
 8003e4c:	89a2      	ldrh	r2, [r4, #12]
 8003e4e:	6020      	str	r0, [r4, #0]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	81a3      	strh	r3, [r4, #12]
 8003e54:	9b03      	ldr	r3, [sp, #12]
 8003e56:	6120      	str	r0, [r4, #16]
 8003e58:	6167      	str	r7, [r4, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00c      	beq.n	8003e78 <__smakebuf_r+0x78>
 8003e5e:	0028      	movs	r0, r5
 8003e60:	230e      	movs	r3, #14
 8003e62:	5ee1      	ldrsh	r1, [r4, r3]
 8003e64:	f000 f820 	bl	8003ea8 <_isatty_r>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d005      	beq.n	8003e78 <__smakebuf_r+0x78>
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	89a2      	ldrh	r2, [r4, #12]
 8003e70:	439a      	bics	r2, r3
 8003e72:	3b02      	subs	r3, #2
 8003e74:	4313      	orrs	r3, r2
 8003e76:	81a3      	strh	r3, [r4, #12]
 8003e78:	89a3      	ldrh	r3, [r4, #12]
 8003e7a:	9a01      	ldr	r2, [sp, #4]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	81a3      	strh	r3, [r4, #12]
 8003e80:	e7cc      	b.n	8003e1c <__smakebuf_r+0x1c>
	...

08003e84 <_fstat_r>:
 8003e84:	2300      	movs	r3, #0
 8003e86:	b570      	push	{r4, r5, r6, lr}
 8003e88:	4d06      	ldr	r5, [pc, #24]	@ (8003ea4 <_fstat_r+0x20>)
 8003e8a:	0004      	movs	r4, r0
 8003e8c:	0008      	movs	r0, r1
 8003e8e:	0011      	movs	r1, r2
 8003e90:	602b      	str	r3, [r5, #0]
 8003e92:	f7fd f8ad 	bl	8000ff0 <_fstat>
 8003e96:	1c43      	adds	r3, r0, #1
 8003e98:	d103      	bne.n	8003ea2 <_fstat_r+0x1e>
 8003e9a:	682b      	ldr	r3, [r5, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d000      	beq.n	8003ea2 <_fstat_r+0x1e>
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	bd70      	pop	{r4, r5, r6, pc}
 8003ea4:	200002a4 	.word	0x200002a4

08003ea8 <_isatty_r>:
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	b570      	push	{r4, r5, r6, lr}
 8003eac:	4d06      	ldr	r5, [pc, #24]	@ (8003ec8 <_isatty_r+0x20>)
 8003eae:	0004      	movs	r4, r0
 8003eb0:	0008      	movs	r0, r1
 8003eb2:	602b      	str	r3, [r5, #0]
 8003eb4:	f7fd f8aa 	bl	800100c <_isatty>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d103      	bne.n	8003ec4 <_isatty_r+0x1c>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d000      	beq.n	8003ec4 <_isatty_r+0x1c>
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	bd70      	pop	{r4, r5, r6, pc}
 8003ec6:	46c0      	nop			@ (mov r8, r8)
 8003ec8:	200002a4 	.word	0x200002a4

08003ecc <_init>:
 8003ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ece:	46c0      	nop			@ (mov r8, r8)
 8003ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed2:	bc08      	pop	{r3}
 8003ed4:	469e      	mov	lr, r3
 8003ed6:	4770      	bx	lr

08003ed8 <_fini>:
 8003ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eda:	46c0      	nop			@ (mov r8, r8)
 8003edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ede:	bc08      	pop	{r3}
 8003ee0:	469e      	mov	lr, r3
 8003ee2:	4770      	bx	lr
