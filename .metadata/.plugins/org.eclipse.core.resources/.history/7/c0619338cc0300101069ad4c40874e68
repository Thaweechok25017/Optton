/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "Sensor.h"
#include "Write_data.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

uint8_t Sensor[3] = {0};
uint8_t LedPattern[3] = {0};
int prevSensor[3] = {0, 0, 0};
uint8_t PatternIndex = 0;
uint8_t ReData[3] = 0;

uint8_t Holdtime = 0;

uint32_t RelTime = 0;
uint32_t PreTime = 0;

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void Write_data(uint8_t reg, uint8_t Value) {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
    uint8_t data[4] = {MCP_ADDR, 0x00, reg, Value};
    if (HAL_SPI_Transmit(&hspi1, data, 4, 1000) != HAL_OK) {
        Error_Handler();
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
}

void ReadSensor(void) {
	Sensor[0] = (HAL_GPIO_ReadPin(GPIOA, OP1_Pin) == GPIO_PIN_SET) ? 1 : 0;
	Sensor[1] = (HAL_GPIO_ReadPin(GPIOA, OP2_Pin) == GPIO_PIN_SET) ? 1 : 0;
	Sensor[2] = (HAL_GPIO_ReadPin(GPIOA, OP3_Pin) == GPIO_PIN_SET) ? 1 : 0;
}

void LED_Blink(void){
	if(Sensor[0] == 0 && Sensor[1] == 0 && Sensor[2] == 0){PatternIndex = 0;}
	if(Sensor[0] == 1 ){HAL_GPIO_WritePin(GPIOB, LED_1_Pin,GPIO_PIN_SET); HAL_GPIO_WritePin(GPIOB, LED_1B1_Pin,GPIO_PIN_SET); PatternIndex |= (1 << 0);}
		else{HAL_GPIO_WritePin(GPIOB, LED_1_Pin,GPIO_PIN_RESET); HAL_GPIO_WritePin(GPIOB, LED_1B1_Pin,GPIO_PIN_RESET);}
	if(Sensor[1] == 1 ){HAL_GPIO_WritePin(GPIOB, LED_2_Pin,GPIO_PIN_SET); HAL_GPIO_WritePin(GPIOB, LED_2B6_Pin,GPIO_PIN_SET); PatternIndex |= (1 << 1);}
		else{HAL_GPIO_WritePin(GPIOB, LED_2_Pin,GPIO_PIN_RESET); HAL_GPIO_WritePin(GPIOB, LED_2B6_Pin,GPIO_PIN_RESET);}
	if(Sensor[2] == 1 ){HAL_GPIO_WritePin(GPIOB, LED_3_Pin,GPIO_PIN_SET); HAL_GPIO_WritePin(GPIOB, LED_3B4_Pin,GPIO_PIN_SET); PatternIndex |= (1 << 2);}
		else{HAL_GPIO_WritePin(GPIOB, LED_3_Pin,GPIO_PIN_RESET); HAL_GPIO_WritePin(GPIOB, LED_3B4_Pin,GPIO_PIN_RESET);}

	for (int i = 0; i < 3; i++) {prevSensor[i] = Sensor[i];}
}
// 0b110
void GeneratePattern(void) {

    int s1 = (PatternIndex >> 0) & 0x01;
    int s2 = (PatternIndex >> 1) & 0x01;
    int s3 = (PatternIndex >> 2) & 0x01;

    for (int i = 1; i <= 3; i++) {
        for (int j = 1; j <= 3; j++) {
            for (int k = 1; k <= 3; k++) {
            	if(s1 == 1){
            		printf("S-%d-%d-%d\n", i, j, k);
            	}
            	if(s2 == 1){
            		printf("S-%d-%d-%d\n", i, j, k);
            	}
            	if(s3 == 1){
            		printf("S-%d-%d-%d\n", i, j, k);
            	}
            }
        }
    }
}

void Default(void){
	if(prevSensor[0] == 0b001 && prevSensor[1] == 0b010 && prevSensor[2] == 0b100){
		HAL_GPIO_WritePin(GPIOB, LED_on_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, LED_onB8_Pin,GPIO_PIN_SET);
	}
	else if(prevSensor[0] == 0b100 && prevSensor[1] == 0b010 && prevSensor[2] == 0b001){
		HAL_GPIO_WritePin(GPIOB, LED_on_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, LED_onB8_Pin,GPIO_PIN_RESET);

		HAL_GPIO_WritePin(GPIOB, LED_off_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, LED_offC15_Pin,GPIO_PIN_SET);
	}
	else{
		HAL_GPIO_WritePin(GPIOB, LED_off_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, LED_offC15_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, LED_on_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, LED_onB8_Pin,GPIO_PIN_RESET);
	}
}

void Modified(void){
	if ((Sensor[0] == 1) || ((prevSensor[0] == 1) && (Sensor[2] == 1)) || (prevSensor[2] == 64)){
		PreTime = HAL_GetTick();
		Holdtime = 1;
		if(Holdtime == 1){
			if((HAL_GetTick() - PreTime) >= 5000){Holdtime = 2;
				for(int i = 0;i < 3;i++){
					prevSensor[i] = 0;
						HAL_GPIO_WritePin(GPIOB, LED_off_Pin,GPIO_PIN_RESET);
						HAL_GPIO_WritePin(GPIOB, LED_offC15_Pin,GPIO_PIN_RESET);
						HAL_GPIO_WritePin(GPIOB, LED_on_Pin,GPIO_PIN_RESET);
						HAL_GPIO_WritePin(GPIOB, LED_onB8_Pin,GPIO_PIN_RESET);

				}
			}
		}
		else{
			if(Holdtime == 1){PreTime = HAL_GetTick(); Holdtime = 0;}
		}
	}
}


/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

extern SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

HAL_Init();  // เริ่มต้น HAL Library
GPIO_Init(); // เริ่มต้นการตั้งค่า PA7

MCP23S17_Init(&hspi1, GPIOA, GPIO_PIN_7);
  /* USER CODE BEGIN 1 */
#define IODIRA 0x00
#define GPIOA 0x12
#define OLATA 0x14

MCP_ADDR = 0x40; /* 7 bit Set address 0100 000 (R/w bit)  กรณี A1 - A2 ลง GND*/


/* USER CODE END 1 */

  /* MCU Configuration---------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      uint8_t op1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
      uint8_t op2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
      uint8_t op3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);

      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | GPIO_PIN_0, op1);
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_5, op2);
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 | GPIO_PIN_3, op3);

      if (op1 && op2 && op3) {
          MCP23S17_WriteGPIOA(0x03);  // Set GPIOA0, GPIOA1 HIGH
          MCP23S17_WriteGPIOA(0x0C);  // Set GPIOA2, GPIOA3 HIGH
      }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_off_Pin|LED_offC15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_1B1_Pin|LED_3_Pin|LED_3B4_Pin
                          |LED_2_Pin|LED_2B6_Pin|LED_on_Pin|LED_onB8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_off_Pin LED_offC15_Pin */
  GPIO_InitStruct.Pin = LED_off_Pin|LED_offC15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : NRST_Pin */
  GPIO_InitStruct.Pin = NRST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LED_1_Pin LED_1B1_Pin LED_3_Pin LED_3B4_Pin
                           LED_2_Pin LED_2B6_Pin LED_on_Pin LED_onB8_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_1B1_Pin|LED_3_Pin|LED_3B4_Pin
                          |LED_2_Pin|LED_2B6_Pin|LED_on_Pin|LED_onB8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : OP1_Pin OP3_Pin OP2_Pin */
  GPIO_InitStruct.Pin = OP1_Pin|OP3_Pin|OP2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
